; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\can_protocol.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\can_protocol.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\FWlib\inc -I.\user -IC:\Users\BudiRyan\Documents\GitHub\robocon-2016\hkust-robocon-mb\motor_driver\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=516 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\can_protocol.crf user\can_protocol.c]
                          THUMB

                          AREA ||i.USB_HP_CAN1_TX_IRQHandler||, CODE, READONLY, ALIGN=2

                  USB_HP_CAN1_TX_IRQHandler PROC
;;;142    	*/
;;;143    CAN_TX_IRQHander
000000  b510              PUSH     {r4,lr}
;;;144    {
;;;145    	if (CAN_GetITStatus(CAN1, CAN_IT_TME) != RESET)
000002  4c08              LDR      r4,|L1.36|
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       CAN_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d007              BEQ      |L1.32|
;;;146    	{
;;;147    		// If all the mailboxes are empty
;;;148    		CAN_ClearITPendingBit(CAN1, CAN_IT_TME);
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       CAN_ClearITPendingBit
;;;149    		can_tx_dequeue();
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      can_tx_dequeue
                  |L1.32|
;;;150    	}
;;;151    }
000020  bd10              POP      {r4,pc}
;;;152    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      0x40006400

                          AREA ||i.USB_LP_CAN1_RX0_IRQHandler||, CODE, READONLY, ALIGN=2

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;220    	*/
;;;221    CAN_Rx_IRQHandler
000000  b510              PUSH     {r4,lr}
;;;222    {
;;;223    	if (CAN_GetITStatus(CANn, CAN_IT_FMP0) != RESET) {
000002  4c15              LDR      r4,|L2.88|
000004  b086              SUB      sp,sp,#0x18           ;222
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       CAN_GetITStatus
00000e  2800              CMP      r0,#0
000010  d020              BEQ      |L2.84|
;;;224    		CanRxMsg RxMessage;
;;;225    		CAN_ClearITPendingBit(CANn, CAN_IT_FMP0);
000012  2102              MOVS     r1,#2
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       CAN_ClearITPendingBit
;;;226    		CAN_Receive(CANn, CAN_FIFO0, &RxMessage);
00001a  aa01              ADD      r2,sp,#4
00001c  2100              MOVS     r1,#0
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       CAN_Receive
;;;227    		if(RxMessage.IDE == CAN_ID_STD) {
000024  f89d000c          LDRB     r0,[sp,#0xc]
000028  2800              CMP      r0,#0
00002a  d113              BNE      |L2.84|
;;;228    			u8 filter_id = RxMessage.FMI;
;;;229    			if (filter_id < CAN_FilterCount && filter_id < CAN_RX_FILTER_LIMIT && CAN_Rx_Handlers[filter_id] != 0) {
00002c  490b              LDR      r1,|L2.92|
00002e  f89d0017          LDRB     r0,[sp,#0x17]         ;228
000032  7809              LDRB     r1,[r1,#0]  ; CAN_FilterCount
000034  4288              CMP      r0,r1
000036  d20d              BCS      |L2.84|
000038  281c              CMP      r0,#0x1c
00003a  d20b              BCS      |L2.84|
00003c  4908              LDR      r1,|L2.96|
00003e  f8514020          LDR      r4,[r1,r0,LSL #2]
000042  2c00              CMP      r4,#0
000044  d006              BEQ      |L2.84|
;;;230    				CAN_Rx_Handlers[filter_id](RxMessage);
000046  9805              LDR      r0,[sp,#0x14]
000048  f10d0c04          ADD      r12,sp,#4
00004c  9000              STR      r0,[sp,#0]
00004e  e89c000f          LDM      r12,{r0-r3}
000052  47a0              BLX      r4
                  |L2.84|
;;;231    			}
;;;232    		}		
;;;233    	}
;;;234    
;;;235    }
000054  b006              ADD      sp,sp,#0x18
000056  bd10              POP      {r4,pc}
;;;236    
                          ENDP

                  |L2.88|
                          DCD      0x40006400
                  |L2.92|
                          DCD      ||.data||
                  |L2.96|
                          DCD      ||area_number.17||

                          AREA ||i.can_empty_mailbox||, CODE, READONLY, ALIGN=2

                  can_empty_mailbox PROC
;;;57     	*/
;;;58     u8 can_empty_mailbox(void)
000000  4806              LDR      r0,|L3.28|
;;;59     {
;;;60     	return ((CANn->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
000002  6801              LDR      r1,[r0,#0]
000004  6802              LDR      r2,[r0,#0]
000006  f3c16180          UBFX     r1,r1,#26,#1
00000a  f3c262c0          UBFX     r2,r2,#27,#1
00000e  6800              LDR      r0,[r0,#0]
000010  4411              ADD      r1,r1,r2
000012  f3c07000          UBFX     r0,r0,#28,#1
000016  4408              ADD      r0,r0,r1
;;;61     	+((CANn->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
;;;62     	+ ((CANn->TSR&CAN_TSR_TME2) == CAN_TSR_TME2);
;;;63     //	return (CAN_TransmitStatus(CANn, 0) == CAN_TxStatus_Ok)
;;;64     //		+ (CAN_TransmitStatus(CANn, 1) == CAN_TxStatus_Ok)
;;;65     //		+ (CAN_TransmitStatus(CANn, 2) == CAN_TxStatus_Ok);
;;;66     }
000018  4770              BX       lr
;;;67     
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40006408

                          AREA ||i.can_rx_add_filter||, CODE, READONLY, ALIGN=2

                  can_rx_add_filter PROC
;;;192    	*/
;;;193    void can_rx_add_filter(u16 id, u16 mask, void (*handler)(CanRxMsg msg))
000000  b57f              PUSH     {r0-r6,lr}
;;;194    {
000002  4615              MOV      r5,r2
;;;195    	CAN_FilterInitTypeDef CAN_FilterInitStructure;
;;;196    	mask = ((mask << 5) | 0x001F) & 0xFFFF;
;;;197    	
;;;198    	CAN_FilterInitStructure.CAN_FilterNumber = CAN_FilterCount;
000004  4c13              LDR      r4,|L4.84|
000006  221f              MOVS     r2,#0x1f              ;196
000008  ea421241          ORR      r2,r2,r1,LSL #5       ;196
00000c  7821              LDRB     r1,[r4,#0]  ; CAN_FilterCount
00000e  f88d100a          STRB     r1,[sp,#0xa]
;;;199    	CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
000012  2100              MOVS     r1,#0
;;;200    	CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
;;;201    	CAN_FilterInitStructure.CAN_FilterIdHigh = (id << 5) & 0xFFFF;
000014  f64f76ff          MOV      r6,#0xffff
000018  ea061040          AND      r0,r6,r0,LSL #5
00001c  2301              MOVS     r3,#1                 ;200
00001e  f8ad0000          STRH     r0,[sp,#0]
000022  f88d100b          STRB     r1,[sp,#0xb]          ;199
000026  f88d300c          STRB     r3,[sp,#0xc]          ;200
;;;202    	CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;
;;;203    	CAN_FilterInitStructure.CAN_FilterMaskIdHigh = mask;
00002a  f8ad2004          STRH     r2,[sp,#4]
00002e  f8ad1002          STRH     r1,[sp,#2]            ;202
;;;204    	CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;
000032  f8ad1006          STRH     r1,[sp,#6]
;;;205    	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
000036  f8ad1008          STRH     r1,[sp,#8]
;;;206    	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
00003a  f88d300d          STRB     r3,[sp,#0xd]
;;;207    	CAN_FilterInit(&CAN_FilterInitStructure);	
00003e  4668              MOV      r0,sp
000040  f7fffffe          BL       CAN_FilterInit
;;;208    	
;;;209    	CAN_Rx_Handlers[CAN_FilterCount] = handler;
000044  4904              LDR      r1,|L4.88|
000046  7820              LDRB     r0,[r4,#0]  ; CAN_FilterCount
000048  f8415020          STR      r5,[r1,r0,LSL #2]
00004c  1c40              ADDS     r0,r0,#1
;;;210    	
;;;211    	++CAN_FilterCount;
00004e  7020              STRB     r0,[r4,#0]
;;;212    }
000050  bd7f              POP      {r0-r6,pc}
;;;213    
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      ||.data||
                  |L4.88|
                          DCD      ||area_number.17||

                          AREA ||i.can_rx_init||, CODE, READONLY, ALIGN=2

                  can_rx_init PROC
;;;157    	*/
;;;158    void can_rx_init(void)
000000  b508              PUSH     {r3,lr}
;;;159    {
;;;160    	NVIC_InitTypeDef NVIC_InitStructure;
;;;161    	
;;;162    	/*
;;;163    	#ifdef  VECT_TAB_RAM  
;;;164    	// Set the Vector Table base location at 0x20000000 
;;;165    	NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0); 
;;;166    	#else  // VECT_TAB_FLASH  
;;;167    	// Set the Vector Table base location at 0x08000000  
;;;168    	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
;;;169    	#endif
;;;170    	*/
;;;171    	
;;;172    	CAN_ITConfig(CANn, CAN_IT_FMP0, ENABLE);
000002  2201              MOVS     r2,#1
000004  2102              MOVS     r1,#2
000006  4809              LDR      r0,|L5.44|
000008  f7fffffe          BL       CAN_ITConfig
;;;173    
;;;174    	/* enabling interrupt */
;;;175    	NVIC_InitStructure.NVIC_IRQChannel= CAN_Rx_IRQn; 
00000c  2014              MOVS     r0,#0x14
00000e  f88d0000          STRB     r0,[sp,#0]
;;;176    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000012  2000              MOVS     r0,#0
000014  f88d0001          STRB     r0,[sp,#1]
;;;177    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
000018  2004              MOVS     r0,#4
00001a  f88d0002          STRB     r0,[sp,#2]
;;;178    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00001e  2001              MOVS     r0,#1
000020  f88d0003          STRB     r0,[sp,#3]
;;;179    	NVIC_Init(&NVIC_InitStructure);
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       NVIC_Init
;;;180    }
00002a  bd08              POP      {r3,pc}
;;;181    
                          ENDP

                  |L5.44|
                          DCD      0x40006400

                          AREA ||i.can_tx_dequeue||, CODE, READONLY, ALIGN=2

                  can_tx_dequeue PROC
;;;94     	*/
;;;95     u8 can_tx_dequeue(void)
000000  b530              PUSH     {r4,r5,lr}
;;;96     {
000002  b08b              SUB      sp,sp,#0x2c
;;;97     	if (!can_tx_queue_empty() && can_empty_mailbox() > 0) {
000004  f7fffffe          BL       can_tx_queue_empty
000008  2800              CMP      r0,#0
00000a  d16f              BNE      |L6.236|
00000c  f7fffffe          BL       can_empty_mailbox
000010  2800              CMP      r0,#0
000012  d06b              BEQ      |L6.236|
;;;98     		CAN_MESSAGE msg = CAN_Tx_Queue.queue[CAN_Tx_Queue.head];
000014  4c36              LDR      r4,|L6.240|
000016  8820              LDRH     r0,[r4,#0]  ; CAN_Tx_Queue
000018  68a1              LDR      r1,[r4,#8]  ; CAN_Tx_Queue
00001a  eb011200          ADD      r2,r1,r0,LSL #4
00001e  6812              LDR      r2,[r2,#0]
000020  9201              STR      r2,[sp,#4]
000022  2204              MOVS     r2,#4
000024  eb021200          ADD      r2,r2,r0,LSL #4
000028  5c8a              LDRB     r2,[r1,r2]
00002a  f88d2008          STRB     r2,[sp,#8]
00002e  2205              MOVS     r2,#5
000030  eb021200          ADD      r2,r2,r0,LSL #4
000034  5c8a              LDRB     r2,[r1,r2]
000036  f88d2009          STRB     r2,[sp,#9]
00003a  2206              MOVS     r2,#6
00003c  eb021200          ADD      r2,r2,r0,LSL #4
000040  5c8a              LDRB     r2,[r1,r2]
000042  f88d200a          STRB     r2,[sp,#0xa]
000046  2207              MOVS     r2,#7
000048  eb021200          ADD      r2,r2,r0,LSL #4
00004c  5c8a              LDRB     r2,[r1,r2]
00004e  f88d200b          STRB     r2,[sp,#0xb]
000052  2208              MOVS     r2,#8
000054  eb021200          ADD      r2,r2,r0,LSL #4
000058  5c8a              LDRB     r2,[r1,r2]
00005a  f88d200c          STRB     r2,[sp,#0xc]
00005e  2209              MOVS     r2,#9
000060  eb021200          ADD      r2,r2,r0,LSL #4
000064  5c8a              LDRB     r2,[r1,r2]
000066  f88d200d          STRB     r2,[sp,#0xd]
00006a  220a              MOVS     r2,#0xa
00006c  eb021200          ADD      r2,r2,r0,LSL #4
000070  5c8a              LDRB     r2,[r1,r2]
000072  f88d200e          STRB     r2,[sp,#0xe]
000076  220b              MOVS     r2,#0xb
000078  eb021200          ADD      r2,r2,r0,LSL #4
00007c  5c8a              LDRB     r2,[r1,r2]
00007e  f88d200f          STRB     r2,[sp,#0xf]
000082  220c              MOVS     r2,#0xc
000084  eb021000          ADD      r0,r2,r0,LSL #4
000088  5c08              LDRB     r0,[r1,r0]
;;;99     		CanTxMsg TxMsg;
;;;100    		u8 data_length = msg.length;
;;;101    		
;;;102    		TxMsg.StdId = msg.id;
00008a  9901              LDR      r1,[sp,#4]
;;;103    		TxMsg.ExtId = 0x00;
00008c  9105              STR      r1,[sp,#0x14]
00008e  f88d0010          STRB     r0,[sp,#0x10]         ;98
000092  2100              MOVS     r1,#0
000094  f89d0008          LDRB     r0,[sp,#8]            ;100
;;;104    		TxMsg.RTR = CAN_RTR_DATA;
000098  f88d101d          STRB     r1,[sp,#0x1d]
;;;105    		TxMsg.IDE = CAN_ID_STD;
00009c  f88d101c          STRB     r1,[sp,#0x1c]
0000a0  9106              STR      r1,[sp,#0x18]         ;104
;;;106    		TxMsg.DLC = data_length;
0000a2  f88d001e          STRB     r0,[sp,#0x1e]
0000a6  a901              ADD      r1,sp,#4              ;98
0000a8  aa05              ADD      r2,sp,#0x14           ;99
;;;107    		
;;;108    		// Copy the data array
;;;109    		while (data_length--) {
0000aa  e003              B        |L6.180|
                  |L6.172|
;;;110    			TxMsg.Data[data_length] = msg.data[data_length];
0000ac  180b              ADDS     r3,r1,r0
0000ae  1815              ADDS     r5,r2,r0
0000b0  795b              LDRB     r3,[r3,#5]
0000b2  72eb              STRB     r3,[r5,#0xb]
                  |L6.180|
0000b4  1e40              SUBS     r0,r0,#1              ;109
0000b6  b2c0              UXTB     r0,r0                 ;109
0000b8  d2f8              BCS      |L6.172|
;;;111    		}
;;;112    
;;;113    		
;;;114    		if (can_tx(TxMsg)) {
0000ba  9809              LDR      r0,[sp,#0x24]
0000bc  ad05              ADD      r5,sp,#0x14
0000be  9000              STR      r0,[sp,#0]
0000c0  e895000f          LDM      r5,{r0-r3}
0000c4  f7fffffe          BL       can_tx
0000c8  b138              CBZ      r0,|L6.218|
;;;115    			CAN_Tx_Queue.head = (CAN_Tx_Queue.head + 1) % CAN_Tx_Queue.length;
0000ca  8820              LDRH     r0,[r4,#0]  ; CAN_Tx_Queue
0000cc  88a1              LDRH     r1,[r4,#4]  ; CAN_Tx_Queue
0000ce  1c40              ADDS     r0,r0,#1
0000d0  fbb0f2f1          UDIV     r2,r0,r1
0000d4  fb010012          MLS      r0,r1,r2,r0
0000d8  8020              STRH     r0,[r4,#0]
                  |L6.218|
;;;116    		}
;;;117    		
;;;118    		// If there are still empty mailbox, dequeue again
;;;119    		if (can_empty_mailbox() > 0) {
0000da  f7fffffe          BL       can_empty_mailbox
0000de  b108              CBZ      r0,|L6.228|
;;;120    			can_tx_dequeue();
0000e0  f7fffffe          BL       can_tx_dequeue
                  |L6.228|
;;;121    		}
;;;122    		
;;;123    		return 1;
0000e4  2001              MOVS     r0,#1
                  |L6.230|
;;;124    	} else {
;;;125    		return 0;
;;;126    	}
;;;127    }
0000e6  b00b              ADD      sp,sp,#0x2c
0000e8  bd30              POP      {r4,r5,pc}
0000ea  e7ff              B        |L6.236|
                  |L6.236|
0000ec  2000              MOVS     r0,#0                 ;125
0000ee  e7fa              B        |L6.230|
;;;128    
                          ENDP

                  |L6.240|
                          DCD      ||.data||+0x4

                          AREA ||i.can_tx_enqueue||, CODE, READONLY, ALIGN=2

                  can_tx_enqueue PROC
;;;72     	*/
;;;73     u8 can_tx_enqueue(CAN_MESSAGE msg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;74     {
;;;75     	u8 queue_full = 0;
;;;76     	if ((CAN_Tx_Queue.tail + 1) % CAN_Tx_Queue.length == CAN_Tx_Queue.head) {
000004  4c2d              LDR      r4,|L7.188|
000006  8865              LDRH     r5,[r4,#2]  ; CAN_Tx_Queue
000008  88a7              LDRH     r7,[r4,#4]  ; CAN_Tx_Queue
00000a  1c6e              ADDS     r6,r5,#1
00000c  fbb6fcf7          UDIV     r12,r6,r7
000010  fb07661c          MLS      r6,r7,r12,r6
000014  8827              LDRH     r7,[r4,#0]  ; CAN_Tx_Queue
000016  42be              CMP      r6,r7
000018  d104              BNE      |L7.36|
;;;77     		// Queue full
;;;78     		queue_full = 1;
;;;79     	}	else {
;;;80     		CAN_Tx_Queue.queue[CAN_Tx_Queue.tail] = msg;
;;;81     		CAN_Tx_Queue.tail = (CAN_Tx_Queue.tail + 1) % CAN_Tx_Queue.length;
;;;82     		queue_full = 0;
;;;83     		
;;;84     	}
;;;85     	
;;;86     	can_tx_dequeue();
00001a  f7fffffe          BL       can_tx_dequeue
;;;87     	return !queue_full;
00001e  2000              MOVS     r0,#0
                  |L7.32|
;;;88     }
000020  e8bd81f0          POP      {r4-r8,pc}
                  |L7.36|
000024  68a6              LDR      r6,[r4,#8]            ;80  ; CAN_Tx_Queue
000026  eb061505          ADD      r5,r6,r5,LSL #4       ;80
00002a  6028              STR      r0,[r5,#0]            ;80
00002c  8865              LDRH     r5,[r4,#2]            ;80  ; CAN_Tx_Queue
00002e  2604              MOVS     r6,#4                 ;80
000030  68a0              LDR      r0,[r4,#8]            ;80  ; CAN_Tx_Queue
000032  eb061505          ADD      r5,r6,r5,LSL #4       ;80
000036  5541              STRB     r1,[r0,r5]            ;80
000038  0a08              LSRS     r0,r1,#8              ;80
00003a  8866              LDRH     r6,[r4,#2]            ;80  ; CAN_Tx_Queue
00003c  2705              MOVS     r7,#5                 ;80
00003e  68a5              LDR      r5,[r4,#8]            ;80  ; CAN_Tx_Queue
000040  eb071606          ADD      r6,r7,r6,LSL #4       ;80
000044  55a8              STRB     r0,[r5,r6]            ;80
000046  0c0d              LSRS     r5,r1,#16             ;80
000048  8866              LDRH     r6,[r4,#2]            ;80  ; CAN_Tx_Queue
00004a  2706              MOVS     r7,#6                 ;80
00004c  68a0              LDR      r0,[r4,#8]            ;80  ; CAN_Tx_Queue
00004e  eb071606          ADD      r6,r7,r6,LSL #4       ;80
000052  5585              STRB     r5,[r0,r6]            ;80
000054  0e08              LSRS     r0,r1,#24             ;80
000056  8865              LDRH     r5,[r4,#2]            ;80  ; CAN_Tx_Queue
000058  2607              MOVS     r6,#7                 ;80
00005a  68a1              LDR      r1,[r4,#8]            ;80  ; CAN_Tx_Queue
00005c  eb061505          ADD      r5,r6,r5,LSL #4       ;80
000060  5548              STRB     r0,[r1,r5]            ;80
000062  8861              LDRH     r1,[r4,#2]            ;80  ; CAN_Tx_Queue
000064  2508              MOVS     r5,#8                 ;80
000066  68a0              LDR      r0,[r4,#8]            ;80  ; CAN_Tx_Queue
000068  eb051101          ADD      r1,r5,r1,LSL #4       ;80
00006c  5442              STRB     r2,[r0,r1]            ;80
00006e  0a11              LSRS     r1,r2,#8              ;80
000070  8865              LDRH     r5,[r4,#2]            ;80  ; CAN_Tx_Queue
000072  2609              MOVS     r6,#9                 ;80
000074  68a0              LDR      r0,[r4,#8]            ;80  ; CAN_Tx_Queue
000076  eb061505          ADD      r5,r6,r5,LSL #4       ;80
00007a  5541              STRB     r1,[r0,r5]            ;80
00007c  0c10              LSRS     r0,r2,#16             ;80
00007e  8865              LDRH     r5,[r4,#2]            ;80  ; CAN_Tx_Queue
000080  260a              MOVS     r6,#0xa               ;80
000082  68a1              LDR      r1,[r4,#8]            ;80  ; CAN_Tx_Queue
000084  eb061505          ADD      r5,r6,r5,LSL #4       ;80
000088  5548              STRB     r0,[r1,r5]            ;80
00008a  0e10              LSRS     r0,r2,#24             ;80
00008c  8862              LDRH     r2,[r4,#2]            ;80  ; CAN_Tx_Queue
00008e  250b              MOVS     r5,#0xb               ;80
000090  68a1              LDR      r1,[r4,#8]            ;80  ; CAN_Tx_Queue
000092  eb051202          ADD      r2,r5,r2,LSL #4       ;80
000096  5488              STRB     r0,[r1,r2]            ;80
000098  8861              LDRH     r1,[r4,#2]            ;80  ; CAN_Tx_Queue
00009a  220c              MOVS     r2,#0xc               ;80
00009c  68a0              LDR      r0,[r4,#8]            ;80  ; CAN_Tx_Queue
00009e  eb021101          ADD      r1,r2,r1,LSL #4       ;80
0000a2  5443              STRB     r3,[r0,r1]            ;80
0000a4  8860              LDRH     r0,[r4,#2]            ;81  ; CAN_Tx_Queue
0000a6  88a1              LDRH     r1,[r4,#4]            ;81  ; CAN_Tx_Queue
0000a8  1c40              ADDS     r0,r0,#1              ;81
0000aa  fbb0f2f1          UDIV     r2,r0,r1              ;81
0000ae  fb010012          MLS      r0,r1,r2,r0           ;81
0000b2  8060              STRH     r0,[r4,#2]            ;81
0000b4  f7fffffe          BL       can_tx_dequeue
0000b8  2001              MOVS     r0,#1                 ;87
0000ba  e7b1              B        |L7.32|
;;;89     
                          ENDP

                  |L7.188|
                          DCD      ||.data||+0x4

                          AREA ||i.can_tx_queue_clear||, CODE, READONLY, ALIGN=2

                  can_tx_queue_clear PROC
;;;133    	*/
;;;134    void can_tx_queue_clear(void)
000000  4802              LDR      r0,|L8.12|
;;;135    {
;;;136    	CAN_Tx_Queue.head = CAN_Tx_Queue.tail = 0;
000002  2100              MOVS     r1,#0
000004  8041              STRH     r1,[r0,#2]
000006  8001              STRH     r1,[r0,#0]
;;;137    }
000008  4770              BX       lr
;;;138    
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      ||.data||+0x4

                          AREA ||i.can_tx_queue_empty||, CODE, READONLY, ALIGN=2

                  can_tx_queue_empty PROC
;;;47     	*/
;;;48     u8 can_tx_queue_empty(void)
000000  4804              LDR      r0,|L9.20|
;;;49     {
;;;50     	return CAN_Tx_Queue.head == CAN_Tx_Queue.tail;
000002  8801              LDRH     r1,[r0,#0]  ; CAN_Tx_Queue
000004  8840              LDRH     r0,[r0,#2]  ; CAN_Tx_Queue
000006  4281              CMP      r1,r0
000008  d101              BNE      |L9.14|
00000a  2001              MOVS     r0,#1
;;;51     }
00000c  4770              BX       lr
                  |L9.14|
00000e  2000              MOVS     r0,#0                 ;50
000010  4770              BX       lr
;;;52     
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      ||.data||+0x4

                          AREA ||i.can_tx_queue_head||, CODE, READONLY, ALIGN=2

                  can_tx_queue_head PROC
;;;15     	*/
;;;16     u16 can_tx_queue_head(void)
000000  4801              LDR      r0,|L10.8|
;;;17     {
;;;18     	return CAN_Tx_Queue.head;
000002  8800              LDRH     r0,[r0,#0]  ; CAN_Tx_Queue
;;;19     }
000004  4770              BX       lr
;;;20     
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      ||.data||+0x4

                          AREA ||i.can_tx_queue_size||, CODE, READONLY, ALIGN=2

                  can_tx_queue_size PROC
;;;35     	*/
;;;36     u16 can_tx_queue_size(void)
000000  4905              LDR      r1,|L11.24|
;;;37     {
;;;38     	s16 size = CAN_Tx_Queue.tail - CAN_Tx_Queue.head;
000002  8848              LDRH     r0,[r1,#2]  ; CAN_Tx_Queue
000004  880a              LDRH     r2,[r1,#0]  ; CAN_Tx_Queue
000006  1a80              SUBS     r0,r0,r2
000008  b200              SXTH     r0,r0
;;;39     	if (size < 0) {size += CAN_Tx_Queue.length;}
00000a  2800              CMP      r0,#0
00000c  da02              BGE      |L11.20|
00000e  8889              LDRH     r1,[r1,#4]  ; CAN_Tx_Queue
000010  4408              ADD      r0,r0,r1
000012  b200              SXTH     r0,r0
                  |L11.20|
;;;40     	return (u16) size;
000014  b280              UXTH     r0,r0
;;;41     }
000016  4770              BX       lr
;;;42     
                          ENDP

                  |L11.24|
                          DCD      ||.data||+0x4

                          AREA ||i.can_tx_queue_tail||, CODE, READONLY, ALIGN=2

                  can_tx_queue_tail PROC
;;;25     	*/
;;;26     u16 can_tx_queue_tail(void)
000000  4801              LDR      r0,|L12.8|
;;;27     {
;;;28     	return CAN_Tx_Queue.tail;
000002  8840              LDRH     r0,[r0,#2]  ; CAN_Tx_Queue
;;;29     }
000004  4770              BX       lr
;;;30     
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      ||.data||+0x4

                          AREA ||i.n_bytes_to_one||, CODE, READONLY, ALIGN=1

                  n_bytes_to_one PROC
;;;254    	*/
;;;255    s32 n_bytes_to_one(u8* array, u8 n)
000000  b510              PUSH     {r4,lr}
;;;256    {
000002  4604              MOV      r4,r0
000004  b141              CBZ      r1,|L13.24|
000006  1e49              SUBS     r1,r1,#1
;;;257    	assert_param(n >= 1 && n <= 4);
;;;258    	return (n == 0) ? (array[0] & 0xFF) : ((array[0] & 0xFF) + (n_bytes_to_one(&array[1], n-1) << 8));
000008  b2c9              UXTB     r1,r1
00000a  1c60              ADDS     r0,r4,#1
00000c  f7fffffe          BL       n_bytes_to_one
000010  7821              LDRB     r1,[r4,#0]
000012  eb012000          ADD      r0,r1,r0,LSL #8
;;;259    }
000016  bd10              POP      {r4,pc}
                  |L13.24|
000018  7800              LDRB     r0,[r0,#0]            ;258
00001a  bd10              POP      {r4,pc}
;;;260    
                          ENDP


                          AREA ||i.one_to_n_bytes||, CODE, READONLY, ALIGN=1

                  one_to_n_bytes PROC
;;;243    	*/
;;;244    u8 one_to_n_bytes(s32 num, u8 n)
000000  b119              CBZ      r1,|L14.10|
;;;245    {
000002  1e49              SUBS     r1,r1,#1
;;;246    	assert_param(n >= 0 && n <= 3);
;;;247    	return (n == 0) ? (num & 0xFF) : (one_to_n_bytes(num >> 8, n-1));
000004  b2c9              UXTB     r1,r1
000006  1200              ASRS     r0,r0,#8
000008  e7fe              B        one_to_n_bytes
                  |L14.10|
00000a  b2c0              UXTB     r0,r0
;;;248    }
00000c  4770              BX       lr
;;;249    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CAN_Tx_Queue_Array
                          %        16000

                          AREA ||area_number.17||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.bss||
                  CAN_Rx_Handlers
                          %        112

                          AREA ||.data||, DATA, ALIGN=2

                  CAN_FilterCount
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  CAN_Tx_Queue
000004  00000000          DCW      0x0000,0x0000
000008  03e8              DCW      0x03e8
00000a  0000              DCB      0x00,0x00
                          DCD      CAN_Tx_Queue_Array
