; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_adc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_adc.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\FWlib\inc -I.\user -IC:\Users\BudiRyan\Documents\GitHub\robocon-2016\hkust-robocon-mb\motor_driver\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=516 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_adc.crf FWlib\SRC\stm32f10x_adc.c]
                          THUMB

                          AREA ||i.ADC_AnalogWatchdogCmd||, CODE, READONLY, ALIGN=2

                  ADC_AnalogWatchdogCmd PROC
;;;1081     */
;;;1082   void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
000000  6842              LDR      r2,[r0,#4]
;;;1083   {
;;;1084     uint32_t tmpreg = 0;
;;;1085     /* Check the parameters */
;;;1086     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1087     assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
;;;1088     /* Get the old register value */
;;;1089     tmpreg = ADCx->CR1;
;;;1090     /* Clear AWDEN, AWDENJ and AWDSGL bits */
;;;1091     tmpreg &= CR1_AWDMode_Reset;
000002  4b02              LDR      r3,|L1.12|
000004  401a              ANDS     r2,r2,r3
;;;1092     /* Set the analog watchdog enable mode */
;;;1093     tmpreg |= ADC_AnalogWatchdog;
000006  430a              ORRS     r2,r2,r1
;;;1094     /* Store the new register value */
;;;1095     ADCx->CR1 = tmpreg;
000008  6042              STR      r2,[r0,#4]
;;;1096   }
00000a  4770              BX       lr
;;;1097   
                          ENDP

                  |L1.12|
                          DCD      0xff3ffdff

                          AREA ||i.ADC_AnalogWatchdogSingleChannelConfig||, CODE, READONLY, ALIGN=1

                  ADC_AnalogWatchdogSingleChannelConfig PROC
;;;1144     */
;;;1145   void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
000000  6842              LDR      r2,[r0,#4]
;;;1146   {
;;;1147     uint32_t tmpreg = 0;
;;;1148     /* Check the parameters */
;;;1149     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1150     assert_param(IS_ADC_CHANNEL(ADC_Channel));
;;;1151     /* Get the old register value */
;;;1152     tmpreg = ADCx->CR1;
;;;1153     /* Clear the Analog watchdog channel select bits */
;;;1154     tmpreg &= CR1_AWDCH_Reset;
000002  f022021f          BIC      r2,r2,#0x1f
;;;1155     /* Set the Analog watchdog channel */
;;;1156     tmpreg |= ADC_Channel;
000006  430a              ORRS     r2,r2,r1
;;;1157     /* Store the new register value */
;;;1158     ADCx->CR1 = tmpreg;
000008  6042              STR      r2,[r0,#4]
;;;1159   }
00000a  4770              BX       lr
;;;1160   
                          ENDP


                          AREA ||i.ADC_AnalogWatchdogThresholdsConfig||, CODE, READONLY, ALIGN=1

                  ADC_AnalogWatchdogThresholdsConfig PROC
;;;1106     */
;;;1107   void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
000000  6241              STR      r1,[r0,#0x24]
;;;1108                                           uint16_t LowThreshold)
;;;1109   {
;;;1110     /* Check the parameters */
;;;1111     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1112     assert_param(IS_ADC_THRESHOLD(HighThreshold));
;;;1113     assert_param(IS_ADC_THRESHOLD(LowThreshold));
;;;1114     /* Set the ADCx high threshold */
;;;1115     ADCx->HTR = HighThreshold;
;;;1116     /* Set the ADCx low threshold */
;;;1117     ADCx->LTR = LowThreshold;
000002  6282              STR      r2,[r0,#0x28]
;;;1118   }
000004  4770              BX       lr
;;;1119   
                          ENDP


                          AREA ||i.ADC_AutoInjectedConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_AutoInjectedConvCmd PROC
;;;733      */
;;;734    void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;735    {
;;;736      /* Check the parameters */
;;;737      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;738      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;739      if (NewState != DISABLE)
;;;740      {
;;;741        /* Enable the selected ADC automatic injected group conversion */
;;;742        ADCx->CR1 |= CR1_JAUTO_Set;
;;;743      }
;;;744      else
;;;745      {
;;;746        /* Disable the selected ADC automatic injected group conversion */
;;;747        ADCx->CR1 &= CR1_JAUTO_Reset;
000002  6841              LDR      r1,[r0,#4]
000004  d002              BEQ      |L4.12|
000006  f4416180          ORR      r1,r1,#0x400          ;742
00000a  e001              B        |L4.16|
                  |L4.12|
00000c  f4216180          BIC      r1,r1,#0x400
                  |L4.16|
000010  6041              STR      r1,[r0,#4]            ;742
;;;748      }
;;;749    }
000012  4770              BX       lr
;;;750    
                          ENDP


                          AREA ||i.ADC_ClearFlag||, CODE, READONLY, ALIGN=1

                  ADC_ClearFlag PROC
;;;1227     */
;;;1228   void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
000000  43c9              MVNS     r1,r1
;;;1229   {
;;;1230     /* Check the parameters */
;;;1231     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1232     assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
;;;1233     /* Clear the selected ADC flags */
;;;1234     ADCx->SR = ~(uint32_t)ADC_FLAG;
000002  6001              STR      r1,[r0,#0]
;;;1235   }
000004  4770              BX       lr
;;;1236   
                          ENDP


                          AREA ||i.ADC_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  ADC_ClearITPendingBit PROC
;;;1282     */
;;;1283   void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
000000  ea6f2111          MVN      r1,r1,LSR #8
;;;1284   {
;;;1285     uint8_t itmask = 0;
;;;1286     /* Check the parameters */
;;;1287     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1288     assert_param(IS_ADC_IT(ADC_IT));
;;;1289     /* Get the ADC IT index */
;;;1290     itmask = (uint8_t)(ADC_IT >> 8);
;;;1291     /* Clear the selected ADC interrupt pending bits */
;;;1292     ADCx->SR = ~(uint32_t)itmask;
000004  6001              STR      r1,[r0,#0]
;;;1293   }
000006  4770              BX       lr
;;;1294   
                          ENDP


                          AREA ||i.ADC_Cmd||, CODE, READONLY, ALIGN=1

                  ADC_Cmd PROC
;;;298      */
;;;299    void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;300    {
;;;301      /* Check the parameters */
;;;302      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;303      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;304      if (NewState != DISABLE)
;;;305      {
;;;306        /* Set the ADON bit to wake up the ADC from power down mode */
;;;307        ADCx->CR2 |= CR2_ADON_Set;
;;;308      }
;;;309      else
;;;310      {
;;;311        /* Disable the selected ADC peripheral */
;;;312        ADCx->CR2 &= CR2_ADON_Reset;
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L7.12|
000006  f0410101          ORR      r1,r1,#1              ;307
00000a  e001              B        |L7.16|
                  |L7.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L7.16|
000010  6081              STR      r1,[r0,#8]            ;307
;;;313      }
;;;314    }
000012  4770              BX       lr
;;;315    
                          ENDP


                          AREA ||i.ADC_DMACmd||, CODE, READONLY, ALIGN=1

                  ADC_DMACmd PROC
;;;323      */
;;;324    void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;325    {
;;;326      /* Check the parameters */
;;;327      assert_param(IS_ADC_DMA_PERIPH(ADCx));
;;;328      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;329      if (NewState != DISABLE)
;;;330      {
;;;331        /* Enable the selected ADC DMA request */
;;;332        ADCx->CR2 |= CR2_DMA_Set;
;;;333      }
;;;334      else
;;;335      {
;;;336        /* Disable the selected ADC DMA request */
;;;337        ADCx->CR2 &= CR2_DMA_Reset;
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L8.12|
000006  f4417180          ORR      r1,r1,#0x100          ;332
00000a  e001              B        |L8.16|
                  |L8.12|
00000c  f4217180          BIC      r1,r1,#0x100
                  |L8.16|
000010  6081              STR      r1,[r0,#8]            ;332
;;;338      }
;;;339    }
000012  4770              BX       lr
;;;340    
                          ENDP


                          AREA ||i.ADC_DeInit||, CODE, READONLY, ALIGN=2

                  ADC_DeInit PROC
;;;178      */
;;;179    void ADC_DeInit(ADC_TypeDef* ADCx)
000000  490d              LDR      r1,|L9.56|
;;;180    {
000002  b510              PUSH     {r4,lr}
;;;181      /* Check the parameters */
;;;182      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;183      
;;;184      if (ADCx == ADC1)
000004  4288              CMP      r0,r1
000006  d102              BNE      |L9.14|
;;;185      {
;;;186        /* Enable ADC1 reset state */
;;;187        RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
000008  2101              MOVS     r1,#1
00000a  1544              ASRS     r4,r0,#21
;;;188        /* Release ADC1 from reset state */
;;;189        RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
00000c  e00a              B        |L9.36|
                  |L9.14|
;;;190      }
;;;191      else if (ADCx == ADC2)
00000e  490b              LDR      r1,|L9.60|
000010  4288              CMP      r0,r1
000012  d102              BNE      |L9.26|
;;;192      {
;;;193        /* Enable ADC2 reset state */
;;;194        RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
000014  2101              MOVS     r1,#1
000016  1504              ASRS     r4,r0,#20
;;;195        /* Release ADC2 from reset state */
;;;196        RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
000018  e004              B        |L9.36|
                  |L9.26|
;;;197      }
;;;198      else
;;;199      {
;;;200        if (ADCx == ADC3)
00001a  4909              LDR      r1,|L9.64|
00001c  4288              CMP      r0,r1
00001e  d10a              BNE      |L9.54|
;;;201        {
;;;202          /* Enable ADC3 reset state */
;;;203          RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
000020  2101              MOVS     r1,#1
000022  03cc              LSLS     r4,r1,#15
                  |L9.36|
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;204          /* Release ADC3 from reset state */
;;;205          RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
00002a  4620              MOV      r0,r4
00002c  e8bd4010          POP      {r4,lr}
000030  2100              MOVS     r1,#0
000032  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L9.54|
;;;206        }
;;;207      }
;;;208    }
000036  bd10              POP      {r4,pc}
;;;209    
                          ENDP

                  |L9.56|
                          DCD      0x40012400
                  |L9.60|
                          DCD      0x40012800
                  |L9.64|
                          DCD      0x40013c00

                          AREA ||i.ADC_DiscModeChannelCountConfig||, CODE, READONLY, ALIGN=1

                  ADC_DiscModeChannelCountConfig PROC
;;;508      */
;;;509    void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
000000  6842              LDR      r2,[r0,#4]
;;;510    {
;;;511      uint32_t tmpreg1 = 0;
;;;512      uint32_t tmpreg2 = 0;
;;;513      /* Check the parameters */
;;;514      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;515      assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
;;;516      /* Get the old register value */
;;;517      tmpreg1 = ADCx->CR1;
;;;518      /* Clear the old discontinuous mode channel count */
;;;519      tmpreg1 &= CR1_DISCNUM_Reset;
000002  1e49              SUBS     r1,r1,#1
000004  f4224260          BIC      r2,r2,#0xe000
;;;520      /* Set the discontinuous mode channel count */
;;;521      tmpreg2 = Number - 1;
;;;522      tmpreg1 |= tmpreg2 << 13;
000008  ea423141          ORR      r1,r2,r1,LSL #13
;;;523      /* Store the new register value */
;;;524      ADCx->CR1 = tmpreg1;
00000c  6041              STR      r1,[r0,#4]
;;;525    }
00000e  4770              BX       lr
;;;526    
                          ENDP


                          AREA ||i.ADC_DiscModeCmd||, CODE, READONLY, ALIGN=1

                  ADC_DiscModeCmd PROC
;;;535      */
;;;536    void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;537    {
;;;538      /* Check the parameters */
;;;539      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;540      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;541      if (NewState != DISABLE)
;;;542      {
;;;543        /* Enable the selected ADC regular discontinuous mode */
;;;544        ADCx->CR1 |= CR1_DISCEN_Set;
;;;545      }
;;;546      else
;;;547      {
;;;548        /* Disable the selected ADC regular discontinuous mode */
;;;549        ADCx->CR1 &= CR1_DISCEN_Reset;
000002  6841              LDR      r1,[r0,#4]
000004  d002              BEQ      |L11.12|
000006  f4416100          ORR      r1,r1,#0x800          ;544
00000a  e001              B        |L11.16|
                  |L11.12|
00000c  f4216100          BIC      r1,r1,#0x800
                  |L11.16|
000010  6041              STR      r1,[r0,#4]            ;544
;;;550      }
;;;551    }
000012  4770              BX       lr
;;;552    
                          ENDP


                          AREA ||i.ADC_ExternalTrigConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_ExternalTrigConvCmd PROC
;;;685      */
;;;686    void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;687    {
;;;688      /* Check the parameters */
;;;689      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;690      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;691      if (NewState != DISABLE)
;;;692      {
;;;693        /* Enable the selected ADC conversion on external event */
;;;694        ADCx->CR2 |= CR2_EXTTRIG_Set;
;;;695      }
;;;696      else
;;;697      {
;;;698        /* Disable the selected ADC conversion on external event */
;;;699        ADCx->CR2 &= CR2_EXTTRIG_Reset;
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L12.12|
000006  f4411180          ORR      r1,r1,#0x100000       ;694
00000a  e001              B        |L12.16|
                  |L12.12|
00000c  f4211180          BIC      r1,r1,#0x100000
                  |L12.16|
000010  6081              STR      r1,[r0,#8]            ;694
;;;700      }
;;;701    }
000012  4770              BX       lr
;;;702    
                          ENDP


                          AREA ||i.ADC_ExternalTrigInjectedConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_ExternalTrigInjectedConvCmd PROC
;;;823      */
;;;824    void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;825    {
;;;826      /* Check the parameters */
;;;827      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;828      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;829      if (NewState != DISABLE)
;;;830      {
;;;831        /* Enable the selected ADC external event selection for injected group */
;;;832        ADCx->CR2 |= CR2_JEXTTRIG_Set;
;;;833      }
;;;834      else
;;;835      {
;;;836        /* Disable the selected ADC external event selection for injected group */
;;;837        ADCx->CR2 &= CR2_JEXTTRIG_Reset;
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L13.12|
000006  f4414100          ORR      r1,r1,#0x8000         ;832
00000a  e001              B        |L13.16|
                  |L13.12|
00000c  f4214100          BIC      r1,r1,#0x8000
                  |L13.16|
000010  6081              STR      r1,[r0,#8]            ;832
;;;838      }
;;;839    }
000012  4770              BX       lr
;;;840    
                          ENDP


                          AREA ||i.ADC_ExternalTrigInjectedConvConfig||, CODE, READONLY, ALIGN=1

                  ADC_ExternalTrigInjectedConvConfig PROC
;;;798      */
;;;799    void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
000000  6882              LDR      r2,[r0,#8]
;;;800    {
;;;801      uint32_t tmpreg = 0;
;;;802      /* Check the parameters */
;;;803      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;804      assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
;;;805      /* Get the old register value */
;;;806      tmpreg = ADCx->CR2;
;;;807      /* Clear the old external event selection for injected group */
;;;808      tmpreg &= CR2_JEXTSEL_Reset;
000002  f42242e0          BIC      r2,r2,#0x7000
;;;809      /* Set the external event selection for injected group */
;;;810      tmpreg |= ADC_ExternalTrigInjecConv;
000006  430a              ORRS     r2,r2,r1
;;;811      /* Store the new register value */
;;;812      ADCx->CR2 = tmpreg;
000008  6082              STR      r2,[r0,#8]
;;;813    }
00000a  4770              BX       lr
;;;814    
                          ENDP


                          AREA ||i.ADC_GetCalibrationStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetCalibrationStatus PROC
;;;429      */
;;;430    FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;431    {
;;;432      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;433      /* Check the parameters */
;;;434      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;435      /* Check the status of CAL bit */
;;;436      if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
000004  6889              LDR      r1,[r1,#8]
000006  0749              LSLS     r1,r1,#29
000008  d500              BPL      |L15.12|
;;;437      {
;;;438        /* CAL bit is set: calibration on going */
;;;439        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L15.12|
;;;440      }
;;;441      else
;;;442      {
;;;443        /* CAL bit is reset: end of calibration */
;;;444        bitstatus = RESET;
;;;445      }
;;;446      /* Return the CAL bit status */
;;;447      return  bitstatus;
;;;448    }
00000c  4770              BX       lr
;;;449    
                          ENDP


                          AREA ||i.ADC_GetConversionValue||, CODE, READONLY, ALIGN=1

                  ADC_GetConversionValue PROC
;;;707      */
;;;708    uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
000000  6cc0              LDR      r0,[r0,#0x4c]
;;;709    {
;;;710      /* Check the parameters */
;;;711      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;712      /* Return the selected ADC conversion value */
;;;713      return (uint16_t) ADCx->DR;
000002  b280              UXTH     r0,r0
;;;714    }
000004  4770              BX       lr
;;;715    
                          ENDP


                          AREA ||i.ADC_GetDualModeConversionValue||, CODE, READONLY, ALIGN=2

                  ADC_GetDualModeConversionValue PROC
;;;719      */
;;;720    uint32_t ADC_GetDualModeConversionValue(void)
000000  4801              LDR      r0,|L17.8|
;;;721    {
;;;722      /* Return the dual mode conversion value */
;;;723      return (*(__IO uint32_t *) DR_ADDRESS);
000002  6800              LDR      r0,[r0,#0]
;;;724    }
000004  4770              BX       lr
;;;725    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x4001244c

                          AREA ||i.ADC_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetFlagStatus PROC
;;;1194     */
;;;1195   FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
000000  4602              MOV      r2,r0
;;;1196   {
;;;1197     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1198     /* Check the parameters */
;;;1199     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1200     assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
;;;1201     /* Check the status of the specified ADC flag */
;;;1202     if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
000004  6812              LDR      r2,[r2,#0]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L18.12|
;;;1203     {
;;;1204       /* ADC_FLAG is set */
;;;1205       bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L18.12|
;;;1206     }
;;;1207     else
;;;1208     {
;;;1209       /* ADC_FLAG is reset */
;;;1210       bitstatus = RESET;
;;;1211     }
;;;1212     /* Return the ADC_FLAG status */
;;;1213     return  bitstatus;
;;;1214   }
00000c  4770              BX       lr
;;;1215   
                          ENDP


                          AREA ||i.ADC_GetITStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetITStatus PROC
;;;1246     */
;;;1247   ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
000000  b510              PUSH     {r4,lr}
;;;1248   {
000002  4602              MOV      r2,r0
;;;1249     ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1250     uint32_t itmask = 0, enablestatus = 0;
;;;1251     /* Check the parameters */
;;;1252     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1253     assert_param(IS_ADC_GET_IT(ADC_IT));
;;;1254     /* Get the ADC IT index */
;;;1255     itmask = ADC_IT >> 8;
;;;1256     /* Get the ADC_IT enable bit status */
;;;1257     enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
000006  6854              LDR      r4,[r2,#4]
000008  0a0b              LSRS     r3,r1,#8              ;1255
00000a  b2c9              UXTB     r1,r1
00000c  400c              ANDS     r4,r4,r1
;;;1258     /* Check the status of the specified ADC interrupt */
;;;1259     if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
00000e  6811              LDR      r1,[r2,#0]
000010  4219              TST      r1,r3
000012  d002              BEQ      |L19.26|
000014  2c00              CMP      r4,#0
000016  d000              BEQ      |L19.26|
;;;1260     {
;;;1261       /* ADC_IT is set */
;;;1262       bitstatus = SET;
000018  2001              MOVS     r0,#1
                  |L19.26|
;;;1263     }
;;;1264     else
;;;1265     {
;;;1266       /* ADC_IT is reset */
;;;1267       bitstatus = RESET;
;;;1268     }
;;;1269     /* Return the ADC_IT status */
;;;1270     return  bitstatus;
;;;1271   }
00001a  bd10              POP      {r4,pc}
;;;1272   
                          ENDP


                          AREA ||i.ADC_GetInjectedConversionValue||, CODE, READONLY, ALIGN=1

                  ADC_GetInjectedConversionValue PROC
;;;1051     */
;;;1052   uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
000000  b508              PUSH     {r3,lr}
;;;1053   {
;;;1054     __IO uint32_t tmp = 0;
;;;1055     
;;;1056     /* Check the parameters */
;;;1057     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1058     assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
;;;1059   
;;;1060     tmp = (uint32_t)ADCx;
;;;1061     tmp += ADC_InjectedChannel + JDR_Offset;
000002  4408              ADD      r0,r0,r1
000004  3028              ADDS     r0,r0,#0x28
;;;1062     
;;;1063     /* Returns the selected injected channel conversion data value */
;;;1064     return (uint16_t) (*(__IO uint32_t*)  tmp);   
000006  9000              STR      r0,[sp,#0]
000008  6800              LDR      r0,[r0,#0]
00000a  b280              UXTH     r0,r0
;;;1065   }
00000c  bd08              POP      {r3,pc}
;;;1066   
                          ENDP


                          AREA ||i.ADC_GetResetCalibrationStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetResetCalibrationStatus PROC
;;;391      */
;;;392    FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;393    {
;;;394      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;395      /* Check the parameters */
;;;396      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;397      /* Check the status of RSTCAL bit */
;;;398      if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
000004  6889              LDR      r1,[r1,#8]
000006  0709              LSLS     r1,r1,#28
000008  d500              BPL      |L21.12|
;;;399      {
;;;400        /* RSTCAL bit is set */
;;;401        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L21.12|
;;;402      }
;;;403      else
;;;404      {
;;;405        /* RSTCAL bit is reset */
;;;406        bitstatus = RESET;
;;;407      }
;;;408      /* Return the RSTCAL bit status */
;;;409      return  bitstatus;
;;;410    }
00000c  4770              BX       lr
;;;411    
                          ENDP


                          AREA ||i.ADC_GetSoftwareStartConvStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetSoftwareStartConvStatus PROC
;;;480      */
;;;481    FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;482    {
;;;483      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;484      /* Check the parameters */
;;;485      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;486      /* Check the status of SWSTART bit */
;;;487      if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
000004  6889              LDR      r1,[r1,#8]
000006  0249              LSLS     r1,r1,#9
000008  d500              BPL      |L22.12|
;;;488      {
;;;489        /* SWSTART bit is set */
;;;490        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L22.12|
;;;491      }
;;;492      else
;;;493      {
;;;494        /* SWSTART bit is reset */
;;;495        bitstatus = RESET;
;;;496      }
;;;497      /* Return the SWSTART bit status */
;;;498      return  bitstatus;
;;;499    }
00000c  4770              BX       lr
;;;500    
                          ENDP


                          AREA ||i.ADC_GetSoftwareStartInjectedConvCmdStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetSoftwareStartInjectedConvCmdStatus PROC
;;;872      */
;;;873    FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;874    {
;;;875      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;876      /* Check the parameters */
;;;877      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;878      /* Check the status of JSWSTART bit */
;;;879      if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
000004  6889              LDR      r1,[r1,#8]
000006  0289              LSLS     r1,r1,#10
000008  d500              BPL      |L23.12|
;;;880      {
;;;881        /* JSWSTART bit is set */
;;;882        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L23.12|
;;;883      }
;;;884      else
;;;885      {
;;;886        /* JSWSTART bit is reset */
;;;887        bitstatus = RESET;
;;;888      }
;;;889      /* Return the JSWSTART bit status */
;;;890      return  bitstatus;
;;;891    }
00000c  4770              BX       lr
;;;892    
                          ENDP


                          AREA ||i.ADC_ITConfig||, CODE, READONLY, ALIGN=1

                  ADC_ITConfig PROC
;;;352      */
;;;353    void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;354    {
;;;355      uint8_t itmask = 0;
;;;356      /* Check the parameters */
;;;357      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;358      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;359      assert_param(IS_ADC_IT(ADC_IT));
;;;360      /* Get the ADC IT index */
;;;361      itmask = (uint8_t)ADC_IT;
;;;362      if (NewState != DISABLE)
;;;363      {
;;;364        /* Enable the selected ADC interrupts */
;;;365        ADCx->CR1 |= itmask;
;;;366      }
;;;367      else
;;;368      {
;;;369        /* Disable the selected ADC interrupts */
;;;370        ADCx->CR1 &= (~(uint32_t)itmask);
000002  6842              LDR      r2,[r0,#4]
000004  b2c9              UXTB     r1,r1                 ;361
000006  d001              BEQ      |L24.12|
000008  430a              ORRS     r2,r2,r1              ;365
00000a  e000              B        |L24.14|
                  |L24.12|
00000c  438a              BICS     r2,r2,r1
                  |L24.14|
00000e  6042              STR      r2,[r0,#4]            ;365
;;;371      }
;;;372    }
000010  4770              BX       lr
;;;373    
                          ENDP


                          AREA ||i.ADC_Init||, CODE, READONLY, ALIGN=2

                  ADC_Init PROC
;;;217      */
;;;218    void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;219    {
;;;220      uint32_t tmpreg1 = 0;
;;;221      uint8_t tmpreg2 = 0;
;;;222      /* Check the parameters */
;;;223      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;224      assert_param(IS_ADC_MODE(ADC_InitStruct->ADC_Mode));
;;;225      assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
;;;226      assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode));
;;;227      assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));   
;;;228      assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
;;;229      assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));
;;;230    
;;;231      /*---------------------------- ADCx CR1 Configuration -----------------*/
;;;232      /* Get the ADCx CR1 value */
;;;233      tmpreg1 = ADCx->CR1;
000002  6842              LDR      r2,[r0,#4]
;;;234      /* Clear DUALMOD and SCAN bits */
;;;235      tmpreg1 &= CR1_CLEAR_Mask;
000004  4b0e              LDR      r3,|L25.64|
;;;236      /* Configure ADCx: Dual mode and scan conversion mode */
;;;237      /* Set DUALMOD bits according to ADC_Mode value */
;;;238      /* Set SCAN bit according to ADC_ScanConvMode value */
;;;239      tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
000006  790c              LDRB     r4,[r1,#4]
000008  401a              ANDS     r2,r2,r3              ;235
00000a  680b              LDR      r3,[r1,#0]
00000c  ea422204          ORR      r2,r2,r4,LSL #8
000010  4313              ORRS     r3,r3,r2
;;;240      /* Write to ADCx CR1 */
;;;241      ADCx->CR1 = tmpreg1;
000012  6043              STR      r3,[r0,#4]
;;;242    
;;;243      /*---------------------------- ADCx CR2 Configuration -----------------*/
;;;244      /* Get the ADCx CR2 value */
;;;245      tmpreg1 = ADCx->CR2;
000014  6883              LDR      r3,[r0,#8]
;;;246      /* Clear CONT, ALIGN and EXTSEL bits */
;;;247      tmpreg1 &= CR2_CLEAR_Mask;
000016  4a0b              LDR      r2,|L25.68|
000018  4013              ANDS     r3,r3,r2
00001a  e9d14202          LDRD     r4,r2,[r1,#8]
;;;248      /* Configure ADCx: external trigger event and continuous conversion mode */
;;;249      /* Set ALIGN bit according to ADC_DataAlign value */
;;;250      /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
;;;251      /* Set CONT bit according to ADC_ContinuousConvMode value */
;;;252      tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
00001e  4322              ORRS     r2,r2,r4
000020  794c              LDRB     r4,[r1,#5]
000022  ea430344          ORR      r3,r3,r4,LSL #1
000026  431a              ORRS     r2,r2,r3
;;;253                ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
;;;254      /* Write to ADCx CR2 */
;;;255      ADCx->CR2 = tmpreg1;
000028  6082              STR      r2,[r0,#8]
;;;256    
;;;257      /*---------------------------- ADCx SQR1 Configuration -----------------*/
;;;258      /* Get the ADCx SQR1 value */
;;;259      tmpreg1 = ADCx->SQR1;
00002a  6ac2              LDR      r2,[r0,#0x2c]
;;;260      /* Clear L bits */
;;;261      tmpreg1 &= SQR1_CLEAR_Mask;
;;;262      /* Configure ADCx: regular channel sequence length */
;;;263      /* Set L bits according to ADC_NbrOfChannel value */
;;;264      tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
00002c  7c09              LDRB     r1,[r1,#0x10]
00002e  f4220270          BIC      r2,r2,#0xf00000       ;261
000032  1e49              SUBS     r1,r1,#1
000034  b2c9              UXTB     r1,r1
;;;265      tmpreg1 |= (uint32_t)tmpreg2 << 20;
000036  ea425101          ORR      r1,r2,r1,LSL #20
;;;266      /* Write to ADCx SQR1 */
;;;267      ADCx->SQR1 = tmpreg1;
00003a  62c1              STR      r1,[r0,#0x2c]
;;;268    }
00003c  bd10              POP      {r4,pc}
;;;269    
                          ENDP

00003e  0000              DCW      0x0000
                  |L25.64|
                          DCD      0xfff0feff
                  |L25.68|
                          DCD      0xfff1f7fd

                          AREA ||i.ADC_InjectedChannelConfig||, CODE, READONLY, ALIGN=1

                  ADC_InjectedChannelConfig PROC
;;;929      */
;;;930    void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
000000  b570              PUSH     {r4-r6,lr}
;;;931    {
;;;932      uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
;;;933      /* Check the parameters */
;;;934      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;935      assert_param(IS_ADC_CHANNEL(ADC_Channel));
;;;936      assert_param(IS_ADC_INJECTED_RANK(Rank));
;;;937      assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
;;;938      /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
;;;939      if (ADC_Channel > ADC_Channel_9)
;;;940      {
;;;941        /* Get the old register value */
;;;942        tmpreg1 = ADCx->SMPR1;
;;;943        /* Calculate the mask to clear */
;;;944        tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
000002  2407              MOVS     r4,#7
000004  2909              CMP      r1,#9                 ;939
000006  d90a              BLS      |L26.30|
000008  68c5              LDR      r5,[r0,#0xc]          ;942
00000a  f1a1060a          SUB      r6,r1,#0xa
00000e  eb060646          ADD      r6,r6,r6,LSL #1
000012  40b4              LSLS     r4,r4,r6
;;;945        /* Clear the old channel sample time */
;;;946        tmpreg1 &= ~tmpreg2;
000014  43a5              BICS     r5,r5,r4
;;;947        /* Calculate the mask to set */
;;;948        tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
000016  40b3              LSLS     r3,r3,r6
;;;949        /* Set the new channel sample time */
;;;950        tmpreg1 |= tmpreg2;
000018  431d              ORRS     r5,r5,r3
;;;951        /* Store the new register value */
;;;952        ADCx->SMPR1 = tmpreg1;
00001a  60c5              STR      r5,[r0,#0xc]
00001c  e007              B        |L26.46|
                  |L26.30|
;;;953      }
;;;954      else /* ADC_Channel include in ADC_Channel_[0..9] */
;;;955      {
;;;956        /* Get the old register value */
;;;957        tmpreg1 = ADCx->SMPR2;
00001e  6905              LDR      r5,[r0,#0x10]
;;;958        /* Calculate the mask to clear */
;;;959        tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
000020  eb010641          ADD      r6,r1,r1,LSL #1
000024  40b4              LSLS     r4,r4,r6
;;;960        /* Clear the old channel sample time */
;;;961        tmpreg1 &= ~tmpreg2;
000026  43a5              BICS     r5,r5,r4
;;;962        /* Calculate the mask to set */
;;;963        tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
000028  40b3              LSLS     r3,r3,r6
;;;964        /* Set the new channel sample time */
;;;965        tmpreg1 |= tmpreg2;
00002a  431d              ORRS     r5,r5,r3
;;;966        /* Store the new register value */
;;;967        ADCx->SMPR2 = tmpreg1;
00002c  6105              STR      r5,[r0,#0x10]
                  |L26.46|
;;;968      }
;;;969      /* Rank configuration */
;;;970      /* Get the old register value */
;;;971      tmpreg1 = ADCx->JSQR;
00002e  6b83              LDR      r3,[r0,#0x38]
;;;972      /* Get JL value: Number = JL+1 */
;;;973      tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
000030  f3c35401          UBFX     r4,r3,#20,#2
;;;974      /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
;;;975      tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
000034  1b12              SUBS     r2,r2,r4
000036  1c92              ADDS     r2,r2,#2
000038  eb020482          ADD      r4,r2,r2,LSL #2
00003c  221f              MOVS     r2,#0x1f
00003e  40a2              LSLS     r2,r2,r4
;;;976      /* Clear the old JSQx bits for the selected rank */
;;;977      tmpreg1 &= ~tmpreg2;
000040  4393              BICS     r3,r3,r2
;;;978      /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
;;;979      tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
000042  40a1              LSLS     r1,r1,r4
;;;980      /* Set the JSQx bits for the selected rank */
;;;981      tmpreg1 |= tmpreg2;
000044  430b              ORRS     r3,r3,r1
;;;982      /* Store the new register value */
;;;983      ADCx->JSQR = tmpreg1;
000046  6383              STR      r3,[r0,#0x38]
;;;984    }
000048  bd70              POP      {r4-r6,pc}
;;;985    
                          ENDP


                          AREA ||i.ADC_InjectedDiscModeCmd||, CODE, READONLY, ALIGN=1

                  ADC_InjectedDiscModeCmd PROC
;;;759      */
;;;760    void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;761    {
;;;762      /* Check the parameters */
;;;763      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;764      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;765      if (NewState != DISABLE)
;;;766      {
;;;767        /* Enable the selected ADC injected discontinuous mode */
;;;768        ADCx->CR1 |= CR1_JDISCEN_Set;
;;;769      }
;;;770      else
;;;771      {
;;;772        /* Disable the selected ADC injected discontinuous mode */
;;;773        ADCx->CR1 &= CR1_JDISCEN_Reset;
000002  6841              LDR      r1,[r0,#4]
000004  d002              BEQ      |L27.12|
000006  f4415180          ORR      r1,r1,#0x1000         ;768
00000a  e001              B        |L27.16|
                  |L27.12|
00000c  f4215180          BIC      r1,r1,#0x1000
                  |L27.16|
000010  6041              STR      r1,[r0,#4]            ;768
;;;774      }
;;;775    }
000012  4770              BX       lr
;;;776    
                          ENDP


                          AREA ||i.ADC_InjectedSequencerLengthConfig||, CODE, READONLY, ALIGN=1

                  ADC_InjectedSequencerLengthConfig PROC
;;;992      */
;;;993    void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
000000  6b82              LDR      r2,[r0,#0x38]
;;;994    {
;;;995      uint32_t tmpreg1 = 0;
;;;996      uint32_t tmpreg2 = 0;
;;;997      /* Check the parameters */
;;;998      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;999      assert_param(IS_ADC_INJECTED_LENGTH(Length));
;;;1000     
;;;1001     /* Get the old register value */
;;;1002     tmpreg1 = ADCx->JSQR;
;;;1003     /* Clear the old injected sequnence lenght JL bits */
;;;1004     tmpreg1 &= JSQR_JL_Reset;
000002  1e49              SUBS     r1,r1,#1
000004  f4221240          BIC      r2,r2,#0x300000
;;;1005     /* Set the injected sequnence lenght JL bits */
;;;1006     tmpreg2 = Length - 1; 
;;;1007     tmpreg1 |= tmpreg2 << 20;
000008  ea425101          ORR      r1,r2,r1,LSL #20
;;;1008     /* Store the new register value */
;;;1009     ADCx->JSQR = tmpreg1;
00000c  6381              STR      r1,[r0,#0x38]
;;;1010   }
00000e  4770              BX       lr
;;;1011   
                          ENDP


                          AREA ||i.ADC_RegularChannelConfig||, CODE, READONLY, ALIGN=1

                  ADC_RegularChannelConfig PROC
;;;589      */
;;;590    void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
000000  b570              PUSH     {r4-r6,lr}
;;;591    {
;;;592      uint32_t tmpreg1 = 0, tmpreg2 = 0;
;;;593      /* Check the parameters */
;;;594      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;595      assert_param(IS_ADC_CHANNEL(ADC_Channel));
;;;596      assert_param(IS_ADC_REGULAR_RANK(Rank));
;;;597      assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
;;;598      /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
;;;599      if (ADC_Channel > ADC_Channel_9)
;;;600      {
;;;601        /* Get the old register value */
;;;602        tmpreg1 = ADCx->SMPR1;
;;;603        /* Calculate the mask to clear */
;;;604        tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
000002  2407              MOVS     r4,#7
000004  2909              CMP      r1,#9                 ;599
000006  d90a              BLS      |L29.30|
000008  68c5              LDR      r5,[r0,#0xc]          ;602
00000a  f1a1060a          SUB      r6,r1,#0xa
00000e  eb060646          ADD      r6,r6,r6,LSL #1
000012  40b4              LSLS     r4,r4,r6
;;;605        /* Clear the old channel sample time */
;;;606        tmpreg1 &= ~tmpreg2;
000014  43a5              BICS     r5,r5,r4
;;;607        /* Calculate the mask to set */
;;;608        tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
000016  40b3              LSLS     r3,r3,r6
;;;609        /* Set the new channel sample time */
;;;610        tmpreg1 |= tmpreg2;
000018  431d              ORRS     r5,r5,r3
;;;611        /* Store the new register value */
;;;612        ADCx->SMPR1 = tmpreg1;
00001a  60c5              STR      r5,[r0,#0xc]
00001c  e007              B        |L29.46|
                  |L29.30|
;;;613      }
;;;614      else /* ADC_Channel include in ADC_Channel_[0..9] */
;;;615      {
;;;616        /* Get the old register value */
;;;617        tmpreg1 = ADCx->SMPR2;
00001e  6905              LDR      r5,[r0,#0x10]
;;;618        /* Calculate the mask to clear */
;;;619        tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
000020  eb010641          ADD      r6,r1,r1,LSL #1
000024  40b4              LSLS     r4,r4,r6
;;;620        /* Clear the old channel sample time */
;;;621        tmpreg1 &= ~tmpreg2;
000026  43a5              BICS     r5,r5,r4
;;;622        /* Calculate the mask to set */
;;;623        tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
000028  40b3              LSLS     r3,r3,r6
;;;624        /* Set the new channel sample time */
;;;625        tmpreg1 |= tmpreg2;
00002a  431d              ORRS     r5,r5,r3
;;;626        /* Store the new register value */
;;;627        ADCx->SMPR2 = tmpreg1;
00002c  6105              STR      r5,[r0,#0x10]
                  |L29.46|
;;;628      }
;;;629      /* For Rank 1 to 6 */
;;;630      if (Rank < 7)
;;;631      {
;;;632        /* Get the old register value */
;;;633        tmpreg1 = ADCx->SQR3;
;;;634        /* Calculate the mask to clear */
;;;635        tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
00002e  231f              MOVS     r3,#0x1f
000030  2a07              CMP      r2,#7                 ;630
000032  d209              BCS      |L29.72|
000034  6b44              LDR      r4,[r0,#0x34]         ;633
000036  1e52              SUBS     r2,r2,#1              ;633
000038  eb020282          ADD      r2,r2,r2,LSL #2
00003c  4093              LSLS     r3,r3,r2
;;;636        /* Clear the old SQx bits for the selected rank */
;;;637        tmpreg1 &= ~tmpreg2;
00003e  439c              BICS     r4,r4,r3
;;;638        /* Calculate the mask to set */
;;;639        tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
000040  4091              LSLS     r1,r1,r2
;;;640        /* Set the SQx bits for the selected rank */
;;;641        tmpreg1 |= tmpreg2;
000042  430c              ORRS     r4,r4,r1
;;;642        /* Store the new register value */
;;;643        ADCx->SQR3 = tmpreg1;
000044  6344              STR      r4,[r0,#0x34]
;;;644      }
;;;645      /* For Rank 7 to 12 */
;;;646      else if (Rank < 13)
;;;647      {
;;;648        /* Get the old register value */
;;;649        tmpreg1 = ADCx->SQR2;
;;;650        /* Calculate the mask to clear */
;;;651        tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
;;;652        /* Clear the old SQx bits for the selected rank */
;;;653        tmpreg1 &= ~tmpreg2;
;;;654        /* Calculate the mask to set */
;;;655        tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
;;;656        /* Set the SQx bits for the selected rank */
;;;657        tmpreg1 |= tmpreg2;
;;;658        /* Store the new register value */
;;;659        ADCx->SQR2 = tmpreg1;
;;;660      }
;;;661      /* For Rank 13 to 16 */
;;;662      else
;;;663      {
;;;664        /* Get the old register value */
;;;665        tmpreg1 = ADCx->SQR1;
;;;666        /* Calculate the mask to clear */
;;;667        tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
;;;668        /* Clear the old SQx bits for the selected rank */
;;;669        tmpreg1 &= ~tmpreg2;
;;;670        /* Calculate the mask to set */
;;;671        tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
;;;672        /* Set the SQx bits for the selected rank */
;;;673        tmpreg1 |= tmpreg2;
;;;674        /* Store the new register value */
;;;675        ADCx->SQR1 = tmpreg1;
;;;676      }
;;;677    }
000046  bd70              POP      {r4-r6,pc}
                  |L29.72|
000048  2a0d              CMP      r2,#0xd               ;646
00004a  d209              BCS      |L29.96|
00004c  6b04              LDR      r4,[r0,#0x30]         ;649
00004e  1fd2              SUBS     r2,r2,#7              ;649
000050  eb020282          ADD      r2,r2,r2,LSL #2       ;651
000054  4093              LSLS     r3,r3,r2              ;651
000056  439c              BICS     r4,r4,r3              ;653
000058  4091              LSLS     r1,r1,r2              ;655
00005a  430c              ORRS     r4,r4,r1              ;657
00005c  6304              STR      r4,[r0,#0x30]         ;659
00005e  bd70              POP      {r4-r6,pc}
                  |L29.96|
000060  6ac4              LDR      r4,[r0,#0x2c]         ;665
000062  3a0d              SUBS     r2,r2,#0xd            ;665
000064  eb020282          ADD      r2,r2,r2,LSL #2       ;667
000068  4093              LSLS     r3,r3,r2              ;667
00006a  439c              BICS     r4,r4,r3              ;669
00006c  4091              LSLS     r1,r1,r2              ;671
00006e  430c              ORRS     r4,r4,r1              ;673
000070  62c4              STR      r4,[r0,#0x2c]         ;675
000072  bd70              POP      {r4-r6,pc}
;;;678    
                          ENDP


                          AREA ||i.ADC_ResetCalibration||, CODE, READONLY, ALIGN=1

                  ADC_ResetCalibration PROC
;;;378      */
;;;379    void ADC_ResetCalibration(ADC_TypeDef* ADCx)
000000  6881              LDR      r1,[r0,#8]
;;;380    {
;;;381      /* Check the parameters */
;;;382      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;383      /* Resets the selected ADC calibration registers */  
;;;384      ADCx->CR2 |= CR2_RSTCAL_Set;
000002  f0410108          ORR      r1,r1,#8
000006  6081              STR      r1,[r0,#8]
;;;385    }
000008  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.ADC_SetInjectedOffset||, CODE, READONLY, ALIGN=1

                  ADC_SetInjectedOffset PROC
;;;1024     */
;;;1025   void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
000000  b508              PUSH     {r3,lr}
;;;1026   {
;;;1027     __IO uint32_t tmp = 0;
;;;1028     
;;;1029     /* Check the parameters */
;;;1030     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1031     assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
;;;1032     assert_param(IS_ADC_OFFSET(Offset));  
;;;1033     
;;;1034     tmp = (uint32_t)ADCx;
;;;1035     tmp += ADC_InjectedChannel;
000002  4408              ADD      r0,r0,r1
;;;1036     
;;;1037     /* Set the selected injected channel data offset */
;;;1038     *(__IO uint32_t *) tmp = (uint32_t)Offset;
000004  9000              STR      r0,[sp,#0]
000006  6002              STR      r2,[r0,#0]
;;;1039   }
000008  bd08              POP      {r3,pc}
;;;1040   
                          ENDP


                          AREA ||i.ADC_SoftwareStartConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_SoftwareStartConvCmd PROC
;;;456      */
;;;457    void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;458    {
;;;459      /* Check the parameters */
;;;460      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;461      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;462      if (NewState != DISABLE)
;;;463      {
;;;464        /* Enable the selected ADC conversion on external event and start the selected
;;;465           ADC conversion */
;;;466        ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
;;;467      }
;;;468      else
;;;469      {
;;;470        /* Disable the selected ADC conversion on external event and stop the selected
;;;471           ADC conversion */
;;;472        ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L32.12|
000006  f44101a0          ORR      r1,r1,#0x500000       ;466
00000a  e001              B        |L32.16|
                  |L32.12|
00000c  f42101a0          BIC      r1,r1,#0x500000
                  |L32.16|
000010  6081              STR      r1,[r0,#8]            ;466
;;;473      }
;;;474    }
000012  4770              BX       lr
;;;475    
                          ENDP


                          AREA ||i.ADC_SoftwareStartInjectedConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_SoftwareStartInjectedConvCmd PROC
;;;848      */
;;;849    void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;850    {
;;;851      /* Check the parameters */
;;;852      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;853      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;854      if (NewState != DISABLE)
;;;855      {
;;;856        /* Enable the selected ADC conversion for injected group on external event and start the selected
;;;857           ADC injected conversion */
;;;858        ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
;;;859      }
;;;860      else
;;;861      {
;;;862        /* Disable the selected ADC conversion on external event for injected group and stop the selected
;;;863           ADC injected conversion */
;;;864        ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L33.12|
000006  f4411102          ORR      r1,r1,#0x208000       ;858
00000a  e001              B        |L33.16|
                  |L33.12|
00000c  f4211102          BIC      r1,r1,#0x208000
                  |L33.16|
000010  6081              STR      r1,[r0,#8]            ;858
;;;865      }
;;;866    }
000012  4770              BX       lr
;;;867    
                          ENDP


                          AREA ||i.ADC_StartCalibration||, CODE, READONLY, ALIGN=1

                  ADC_StartCalibration PROC
;;;416      */
;;;417    void ADC_StartCalibration(ADC_TypeDef* ADCx)
000000  6881              LDR      r1,[r0,#8]
;;;418    {
;;;419      /* Check the parameters */
;;;420      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;421      /* Enable the selected ADC calibration process */  
;;;422      ADCx->CR2 |= CR2_CAL_Set;
000002  f0410104          ORR      r1,r1,#4
000006  6081              STR      r1,[r0,#8]
;;;423    }
000008  4770              BX       lr
;;;424    
                          ENDP


                          AREA ||i.ADC_StructInit||, CODE, READONLY, ALIGN=1

                  ADC_StructInit PROC
;;;274      */
;;;275    void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
000000  2100              MOVS     r1,#0
;;;276    {
;;;277      /* Reset ADC init structure parameters values */
;;;278      /* Initialize the ADC_Mode member */
;;;279      ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
;;;280      /* initialize the ADC_ScanConvMode member */
;;;281      ADC_InitStruct->ADC_ScanConvMode = DISABLE;
000002  6001              STR      r1,[r0,#0]
000004  7101              STRB     r1,[r0,#4]
;;;282      /* Initialize the ADC_ContinuousConvMode member */
;;;283      ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
000006  7141              STRB     r1,[r0,#5]
;;;284      /* Initialize the ADC_ExternalTrigConv member */
;;;285      ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
;;;286      /* Initialize the ADC_DataAlign member */
;;;287      ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
000008  6081              STR      r1,[r0,#8]
;;;288      /* Initialize the ADC_NbrOfChannel member */
;;;289      ADC_InitStruct->ADC_NbrOfChannel = 1;
00000a  60c1              STR      r1,[r0,#0xc]
00000c  2101              MOVS     r1,#1
00000e  7401              STRB     r1,[r0,#0x10]
;;;290    }
000010  4770              BX       lr
;;;291    
                          ENDP


                          AREA ||i.ADC_TempSensorVrefintCmd||, CODE, READONLY, ALIGN=2

                  ADC_TempSensorVrefintCmd PROC
;;;1166     */
;;;1167   void ADC_TempSensorVrefintCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L36.24|
;;;1168   {
;;;1169     /* Check the parameters */
;;;1170     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1171     if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;1172     {
;;;1173       /* Enable the temperature sensor and Vrefint channel*/
;;;1174       ADC1->CR2 |= CR2_TSVREFE_Set;
;;;1175     }
;;;1176     else
;;;1177     {
;;;1178       /* Disable the temperature sensor and Vrefint channel*/
;;;1179       ADC1->CR2 &= CR2_TSVREFE_Reset;
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L36.14|
000008  f4400000          ORR      r0,r0,#0x800000       ;1174
00000c  e001              B        |L36.18|
                  |L36.14|
00000e  f4200000          BIC      r0,r0,#0x800000
                  |L36.18|
000012  6008              STR      r0,[r1,#0]            ;1174
;;;1180     }
;;;1181   }
000014  4770              BX       lr
;;;1182   
                          ENDP

000016  0000              DCW      0x0000
                  |L36.24|
                          DCD      0x40012408
