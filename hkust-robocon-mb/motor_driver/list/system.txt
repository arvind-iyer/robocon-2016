; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\system.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\system.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\FWlib\inc -I.\user -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=516 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\system.crf user\system.c]
                          THUMB

                          AREA ||i.NVIC_Configuration||, CODE, READONLY, ALIGN=1

                  NVIC_Configuration PROC
;;;38     
;;;39     void NVIC_Configuration(void){ 
000000  b508              PUSH     {r3,lr}
;;;40     	NVIC_InitTypeDef NVIC_InitStructure;
;;;41     
;;;42     #ifdef  VECT_TAB_RAM  
;;;43       /* Set the Vector Table base location at 0x20000000 */ 
;;;44       NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0); 
;;;45     #else  /* VECT_TAB_FLASH  */
;;;46       /* Set the Vector Table base location at 0x08000000 */ 
;;;47       NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
000002  2100              MOVS     r1,#0
000004  f04f6000          MOV      r0,#0x8000000
000008  f7fffffe          BL       NVIC_SetVectorTable
;;;48     #endif
;;;49     
;;;50       /* Configure the NVIC Preemption Priority Bits */  
;;;51       NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
00000c  f44f60e0          MOV      r0,#0x700
000010  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;52     
;;;53        NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000014  2027              MOVS     r0,#0x27
000016  f88d0000          STRB     r0,[sp,#0]
;;;54        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
00001a  2000              MOVS     r0,#0
00001c  f88d0001          STRB     r0,[sp,#1]
;;;55        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000020  f88d0002          STRB     r0,[sp,#2]
;;;56        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000024  2001              MOVS     r0,#1
000026  f88d0003          STRB     r0,[sp,#3]
;;;57        NVIC_Init(&NVIC_InitStructure);
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       NVIC_Init
;;;58     }
000030  bd08              POP      {r3,pc}
;;;59     
                          ENDP


                          AREA ||i.SetupClock||, CODE, READONLY, ALIGN=1

                  SetupClock PROC
;;;16     
;;;17     void SetupClock (void){
000000  b510              PUSH     {r4,lr}
;;;18     	ErrorStatus HSEStartUpStatus;	/* RCC system reset(for debug purpose) */
;;;19     	RCC_DeInit();									/* Enable HSE */
000002  f7fffffe          BL       RCC_DeInit
;;;20     	RCC_HSEConfig(RCC_HSE_ON); 		/* Wait till HSE is ready */
000006  f44f3480          MOV      r4,#0x10000
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       RCC_HSEConfig
;;;21     	HSEStartUpStatus = RCC_WaitForHSEStartUp();
000010  f7fffffe          BL       RCC_WaitForHSEStartUp
;;;22     
;;;23     	if (HSEStartUpStatus == SUCCESS) {
000014  2801              CMP      r0,#1
000016  d125              BNE      |L2.100|
;;;24     	   FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);  			/* Enable Prefetch Buffer */
000018  2010              MOVS     r0,#0x10
00001a  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;25     	   FLASH_SetLatency(FLASH_Latency_2);		   											/* Flash 2 wait state */
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       FLASH_SetLatency
;;;26     	   RCC_HCLKConfig(RCC_SYSCLK_Div1);															/* HCLK = SYSCLK  */
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       RCC_HCLKConfig
;;;27     	   RCC_PCLK2Config(RCC_HCLK_Div1);															/* PCLK2 = HCLK , high speed AHB2=72MHz*/
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       RCC_PCLK2Config
;;;28     	   RCC_PCLK1Config(RCC_HCLK_Div2);															/* PCLK1 = HCLK/2  low speed AHB1=36MHz */
000030  11a0              ASRS     r0,r4,#6
000032  f7fffffe          BL       RCC_PCLK1Config
;;;29     	   RCC_ADCCLKConfig(RCC_PCLK2_Div6); 
000036  1060              ASRS     r0,r4,#1
000038  f7fffffe          BL       RCC_ADCCLKConfig
;;;30     	   RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9); 				//	  ((uint32_t)0x00010000)
00003c  f44f11e0          MOV      r1,#0x1c0000
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       RCC_PLLConfig
;;;31     																																	/* PLLCLK = 8MHz * 9 = 72 MHz */
;;;32     	   RCC_PLLCmd(ENABLE);																					/* Enable PLL */
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       RCC_PLLCmd
                  |L2.76|
;;;33     	   while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);					/* Wait till PLL is ready */
00004c  2039              MOVS     r0,#0x39
00004e  f7fffffe          BL       RCC_GetFlagStatus
000052  2800              CMP      r0,#0
000054  d0fa              BEQ      |L2.76|
;;;34     	   RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);										/* Select PLL as system clock source */
000056  2002              MOVS     r0,#2
000058  f7fffffe          BL       RCC_SYSCLKConfig
                  |L2.92|
;;;35     	   while (RCC_GetSYSCLKSource() != 0x08);												/* Wait till PLL is used as system clock source */
00005c  f7fffffe          BL       RCC_GetSYSCLKSource
000060  2808              CMP      r0,#8
000062  d1fb              BNE      |L2.92|
                  |L2.100|
;;;36     	}
;;;37     }
000064  bd10              POP      {r4,pc}
;;;38     
                          ENDP


                          AREA ||i.SysTick_Configuration||, CODE, READONLY, ALIGN=2

                  SysTick_Configuration PROC
;;;102    
;;;103    void SysTick_Configuration(u16 freq){
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;104    	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       SysTick_CLKSourceConfig
;;;105    	SysTick_Config(72000000 / freq);
00000a  480a              LDR      r0,|L3.52|
00000c  fbb0f0f4          UDIV     r0,r0,r4
000010  f1b07f80          CMP      r0,#0x1000000
000014  d20d              BCS      |L3.50|
000016  f020417f          BIC      r1,r0,#0xff000000
00001a  f04f20e0          MOV      r0,#0xe000e000
00001e  1e49              SUBS     r1,r1,#1
000020  6141              STR      r1,[r0,#0x14]
000022  4a05              LDR      r2,|L3.56|
000024  21f0              MOVS     r1,#0xf0
000026  f8821d14          STRB     r1,[r2,#0xd14]
00002a  2100              MOVS     r1,#0
00002c  6181              STR      r1,[r0,#0x18]
00002e  2107              MOVS     r1,#7
000030  6101              STR      r1,[r0,#0x10]
                  |L3.50|
;;;106    }
000032  bd10              POP      {r4,pc}
;;;107    
                          ENDP

                  |L3.52|
                          DCD      0x044aa200
                  |L3.56|
                          DCD      0xe000e00f

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;59     
;;;60     void USART3_Configuration(void){
000000  b530              PUSH     {r4,r5,lr}
000002  b087              SUB      sp,sp,#0x1c
;;;61     	USART_InitTypeDef USART_InitStructure;
;;;62     	USART_ClockInitTypeDef  USART_ClockInitStructure;
;;;63     	GPIO_InitTypeDef GPIO_InitStructure;
;;;64     
;;;65     	/* Configure USART2 Tx (PC_10) as alternate function push-pull */
;;;66     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000004  2001              MOVS     r0,#1
000006  f88d0012          STRB     r0,[sp,#0x12]
;;;67     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00000a  0280              LSLS     r0,r0,#10
00000c  f8ad0010          STRH     r0,[sp,#0x10]
;;;68     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000010  2018              MOVS     r0,#0x18
;;;69     	GPIO_Init(GPIOC, &GPIO_InitStructure);
000012  4c21              LDR      r4,|L4.152|
000014  f88d0013          STRB     r0,[sp,#0x13]         ;68
000018  a904              ADD      r1,sp,#0x10
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       GPIO_Init
;;;70     	
;;;71     	/* Configure USART2 Rx (PC_11) as input floating */
;;;72     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
000020  14e0              ASRS     r0,r4,#19
000022  f8ad0010          STRH     r0,[sp,#0x10]
;;;73     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000026  2004              MOVS     r0,#4
000028  f88d0013          STRB     r0,[sp,#0x13]
;;;74     	GPIO_Init(GPIOC, &GPIO_InitStructure);
00002c  a904              ADD      r1,sp,#0x10
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       GPIO_Init
;;;75     	
;;;76     	GPIO_PinRemapConfig(GPIO_PartialRemap_USART3,ENABLE);
000034  2101              MOVS     r1,#1
000036  4819              LDR      r0,|L4.156|
000038  f7fffffe          BL       GPIO_PinRemapConfig
;;;77     	
;;;78     	USART_ClockInitStructure.USART_Clock = USART_Clock_Disable;
00003c  2400              MOVS     r4,#0
;;;79     	USART_ClockInitStructure.USART_CPOL = USART_CPOL_Low;
;;;80     	USART_ClockInitStructure.USART_CPHA = USART_CPHA_2Edge;
00003e  f44f7000          MOV      r0,#0x200
000042  f8ad0018          STRH     r0,[sp,#0x18]
;;;81     	USART_ClockInitStructure.USART_LastBit = USART_LastBit_Disable;
;;;82     	/* Configure the USART3 synchronous paramters */
;;;83     	USART_ClockInit(USART3, &USART_ClockInitStructure);
000046  4d16              LDR      r5,|L4.160|
000048  f8ad4014          STRH     r4,[sp,#0x14]         ;78
00004c  f8ad4016          STRH     r4,[sp,#0x16]         ;79
000050  f8ad401a          STRH     r4,[sp,#0x1a]         ;81
000054  a905              ADD      r1,sp,#0x14
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       USART_ClockInit
;;;84     	
;;;85     	USART_InitStructure.USART_BaudRate = 115200;
00005c  f44f30e1          MOV      r0,#0x1c200
;;;86     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000060  9000              STR      r0,[sp,#0]
;;;87     	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;88     	USART_InitStructure.USART_Parity = USART_Parity_No ;
000062  f8ad4008          STRH     r4,[sp,#8]
;;;89     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;90     	
;;;91     	
;;;92     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000066  200c              MOVS     r0,#0xc
000068  f8ad4004          STRH     r4,[sp,#4]            ;86
00006c  f8ad000a          STRH     r0,[sp,#0xa]
000070  f8ad4006          STRH     r4,[sp,#6]            ;87
000074  f8ad400c          STRH     r4,[sp,#0xc]          ;89
;;;93     	/* Configure USART1 basic and asynchronous paramters */
;;;94     	USART_Init(USART3, &USART_InitStructure);
000078  4669              MOV      r1,sp
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USART_Init
;;;95     	
;;;96     	/* Enable USART1 Receive and Transmit interrupts */
;;;97     	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
000080  2201              MOVS     r2,#1
000082  f2405125          MOV      r1,#0x525
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       USART_ITConfig
;;;98     //	USART_ITConfig(USART3, USART_IT_TC, ENABLE);
;;;99     	/* Enable USART1 */
;;;100    	USART_Cmd(USART3, ENABLE);
00008c  2101              MOVS     r1,#1
00008e  4628              MOV      r0,r5
000090  f7fffffe          BL       USART_Cmd
;;;101    }
000094  b007              ADD      sp,sp,#0x1c
000096  bd30              POP      {r4,r5,pc}
;;;102    
                          ENDP

                  |L4.152|
                          DCD      0x40011000
                  |L4.156|
                          DCD      0x00140010
                  |L4.160|
                          DCD      0x40004800

                          AREA ||i.system_init||, CODE, READONLY, ALIGN=1

                  system_init PROC
;;;107    
;;;108    void system_init(u16 sysFreq) //in Hz
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4604              MOV      r4,r0
;;;110    	SetupClock();
000004  f7fffffe          BL       SetupClock
;;;111    	USART3_Configuration();
000008  f7fffffe          BL       USART3_Configuration
;;;112    	SysTick_Configuration(sysFreq);	
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SysTick_Configuration
;;;113    	NVIC_Configuration(); 
000012  e8bd4010          POP      {r4,lr}
000016  f7ffbffe          B.W      NVIC_Configuration
;;;114    }
                          ENDP

