; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\uart.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\FWlib\inc -I.\user -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=516 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\uart.crf user\uart.c]
                          THUMB

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;148      */
;;;149    PUTCHAR_PROTOTYPE
000000  b570              PUSH     {r4-r6,lr}
;;;150    {
;;;151    	if (printf_COMx == COM_NULL)
000002  4c0c              LDR      r4,|L1.52|
000004  4606              MOV      r6,r0                 ;150
000006  f9940000          LDRSB    r0,[r4,#0]  ; printf_COMx
00000a  1c40              ADDS     r0,r0,#1
00000c  d010              BEQ      |L1.48|
;;;152    		return ch;
;;;153    		
;;;154    	while (USART_GetFlagStatus(COM_USART[printf_COMx], USART_FLAG_TC) == RESET);
00000e  1d25              ADDS     r5,r4,#4
                  |L1.16|
000010  f9940000          LDRSB    r0,[r4,#0]  ; printf_COMx
000014  2140              MOVS     r1,#0x40
000016  f8550020          LDR      r0,[r5,r0,LSL #2]
00001a  f7fffffe          BL       USART_GetFlagStatus
00001e  2800              CMP      r0,#0
000020  d0f6              BEQ      |L1.16|
;;;155    	USART_SendData(COM_USART[printf_COMx], (uint8_t) ch);
000022  f9940000          LDRSB    r0,[r4,#0]  ; printf_COMx
000026  b2f1              UXTB     r1,r6
000028  f8550020          LDR      r0,[r5,r0,LSL #2]
00002c  f7fffffe          BL       USART_SendData
                  |L1.48|
000030  4630              MOV      r0,r6                 ;152
;;;156    	return ch;
;;;157    }
000032  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.52|
                          DCD      ||.data||

                          AREA ||i.uart_init||, CODE, READONLY, ALIGN=2

                  uart_init PROC
;;;28       */
;;;29     void uart_init(COM_TypeDef COM, u32 br)
000000  b530              PUSH     {r4,r5,lr}
;;;30     {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;31     	GPIO_InitTypeDef GPIO_InitStructure;
;;;32     	USART_InitTypeDef USART_InitStructure;
;;;33     
;;;34     	RCC_APB2PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM] | RCC_APB2Periph_AFIO, ENABLE);
000006  492d              LDR      r1,|L2.188|
000008  482c              LDR      r0,|L2.188|
00000a  3114              ADDS     r1,r1,#0x14
00000c  b085              SUB      sp,sp,#0x14           ;30
00000e  f8500024          LDR      r0,[r0,r4,LSL #2]
000012  f8511024          LDR      r1,[r1,r4,LSL #2]
000016  4308              ORRS     r0,r0,r1
000018  f0400001          ORR      r0,r0,#1
00001c  2101              MOVS     r1,#1
00001e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;35     
;;;36     	if (COM == COM1)
;;;37     	{
;;;38     		RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
000022  4826              LDR      r0,|L2.188|
000024  3814              SUBS     r0,r0,#0x14
000026  b3ec              CBZ      r4,|L2.164|
;;;39     	}
;;;40     	else
;;;41     	{
;;;42     		RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
000028  f8500024          LDR      r0,[r0,r4,LSL #2]
00002c  2101              MOVS     r1,#1
00002e  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L2.50|
;;;43     	}
;;;44     
;;;45     	/* Configure USART Tx as alternate function push-pull */
;;;46     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000032  2018              MOVS     r0,#0x18
000034  f88d0013          STRB     r0,[sp,#0x13]
;;;47     	GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
000038  4820              LDR      r0,|L2.188|
;;;48     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;49     	GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
00003a  a904              ADD      r1,sp,#0x10
00003c  3028              ADDS     r0,r0,#0x28           ;47
00003e  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;47
000042  f8ad0010          STRH     r0,[sp,#0x10]         ;47
000046  2003              MOVS     r0,#3                 ;48
000048  f88d0012          STRB     r0,[sp,#0x12]         ;48
00004c  481c              LDR      r0,|L2.192|
00004e  f8500024          LDR      r0,[r0,r4,LSL #2]
000052  f7fffffe          BL       GPIO_Init
;;;50     
;;;51     	/* Configure USART Rx as input floating */
;;;52     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000056  2004              MOVS     r0,#4
000058  f88d0013          STRB     r0,[sp,#0x13]
;;;53     	GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
00005c  4817              LDR      r0,|L2.188|
;;;54     	GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
00005e  a904              ADD      r1,sp,#0x10
000060  3032              ADDS     r0,r0,#0x32           ;53
000062  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;53
000066  f8ad0010          STRH     r0,[sp,#0x10]         ;53
00006a  4815              LDR      r0,|L2.192|
00006c  3014              ADDS     r0,r0,#0x14
00006e  f8500024          LDR      r0,[r0,r4,LSL #2]
000072  f7fffffe          BL       GPIO_Init
;;;55     
;;;56     	/* USART configuration */
;;;57     	USART_InitStructure.USART_BaudRate = br;
;;;58     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000076  2000              MOVS     r0,#0
000078  9500              STR      r5,[sp,#0]
00007a  f8ad0004          STRH     r0,[sp,#4]
;;;59     	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;60     	USART_InitStructure.USART_Parity = USART_Parity_No;
;;;61     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;62     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;63     
;;;64     	USART_Init(COM_USART[COM], &USART_InitStructure);
00007e  4d10              LDR      r5,|L2.192|
000080  f8ad0006          STRH     r0,[sp,#6]            ;59
000084  f8ad0008          STRH     r0,[sp,#8]            ;60
000088  f8ad000c          STRH     r0,[sp,#0xc]          ;61
00008c  200c              MOVS     r0,#0xc               ;62
00008e  3d14              SUBS     r5,r5,#0x14
000090  f8ad000a          STRH     r0,[sp,#0xa]          ;62
000094  f8550024          LDR      r0,[r5,r4,LSL #2]
000098  4669              MOV      r1,sp
00009a  f7fffffe          BL       USART_Init
;;;65     	USART_Cmd(COM_USART[COM], ENABLE);
00009e  f8550024          LDR      r0,[r5,r4,LSL #2]
0000a2  e000              B        |L2.166|
                  |L2.164|
0000a4  e004              B        |L2.176|
                  |L2.166|
0000a6  2101              MOVS     r1,#1
0000a8  f7fffffe          BL       USART_Cmd
;;;66     }
0000ac  b005              ADD      sp,sp,#0x14
0000ae  bd30              POP      {r4,r5,pc}
                  |L2.176|
0000b0  6800              LDR      r0,[r0,#0]            ;38
0000b2  2101              MOVS     r1,#1                 ;38
0000b4  f7fffffe          BL       RCC_APB2PeriphClockCmd
0000b8  e7bb              B        |L2.50|
;;;67     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L2.188|
                          DCD      ||.constdata||+0x14
                  |L2.192|
                          DCD      ||.data||+0x18

                          AREA ||i.uart_interrupt||, CODE, READONLY, ALIGN=2

                  uart_interrupt PROC
;;;72       */
;;;73     void uart_interrupt(COM_TypeDef COM)
000000  b538              PUSH     {r3-r5,lr}
;;;74     {
000002  4604              MOV      r4,r0
;;;75     	NVIC_InitTypeDef NVIC_InitStructure;
;;;76     
;;;77     	#ifdef VECT_TAB_RAM
;;;78     	NVIC_SetVectorTable(NVIC_VectTab_RAM,0x0);
;;;79     	#else
;;;80     	NVIC_SetVectorTable(NVIC_VectTab_FLASH,0x0);
000004  2100              MOVS     r1,#0
000006  f04f6000          MOV      r0,#0x8000000
00000a  f7fffffe          BL       NVIC_SetVectorTable
;;;81     	#endif
;;;82     
;;;83     	NVIC_InitStructure.NVIC_IRQChannel = COM_IRQ[COM];
00000e  480c              LDR      r0,|L3.64|
000010  f8100014          LDRB     r0,[r0,r4,LSL #1]
000014  f88d0000          STRB     r0,[sp,#0]
;;;84     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000018  2001              MOVS     r0,#1
00001a  f88d0001          STRB     r0,[sp,#1]
;;;85     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
00001e  f88d0002          STRB     r0,[sp,#2]
;;;86     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000022  f88d0003          STRB     r0,[sp,#3]
;;;87     	NVIC_Init(&NVIC_InitStructure);
000026  4668              MOV      r0,sp
000028  f7fffffe          BL       NVIC_Init
;;;88     	/* Enables the USART receive interrupt */
;;;89     	USART_ITConfig(COM_USART[COM],USART_IT_RXNE,ENABLE);
00002c  4805              LDR      r0,|L3.68|
00002e  2201              MOVS     r2,#1
000030  f2405125          MOV      r1,#0x525
000034  f8500024          LDR      r0,[r0,r4,LSL #2]
000038  f7fffffe          BL       USART_ITConfig
;;;90     }
00003c  bd38              POP      {r3-r5,pc}
;;;91     
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      ||.constdata||+0x50
                  |L3.68|
                          DCD      ||.data||+0x4

                          AREA ||i.uart_printf_disable||, CODE, READONLY, ALIGN=2

                  uart_printf_disable PROC
;;;106      */
;;;107    void uart_printf_disable(void)
000000  4901              LDR      r1,|L4.8|
;;;108    {
;;;109    	printf_COMx = COM_NULL;
000002  20ff              MOVS     r0,#0xff
000004  7008              STRB     r0,[r1,#0]
;;;110    }
000006  4770              BX       lr
;;;111    
                          ENDP

                  |L4.8|
                          DCD      ||.data||

                          AREA ||i.uart_printf_enable||, CODE, READONLY, ALIGN=2

                  uart_printf_enable PROC
;;;96       */
;;;97     void uart_printf_enable(COM_TypeDef COM)
000000  4901              LDR      r1,|L5.8|
;;;98     {
;;;99     	printf_COMx = COM;
000002  7008              STRB     r0,[r1,#0]
;;;100    }
000004  4770              BX       lr
;;;101    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.uart_tx||, CODE, READONLY, ALIGN=1

                  uart_tx PROC
;;;129      */
;;;130    void uart_tx(COM_TypeDef COM, uc8 * tx_buf, ...)
000000  b40f              PUSH     {r0-r3}
;;;131    {
000002  b530              PUSH     {r4,r5,lr}
000004  b08b              SUB      sp,sp,#0x2c
000006  4605              MOV      r5,r0
;;;132    	va_list arglist;
;;;133    	u8 buf[40], *fp;
;;;134    	
;;;135    	va_start(arglist, tx_buf);
000008  aa10              ADD      r2,sp,#0x40
;;;136    	vsprintf((char*)buf, (const char*)tx_buf, arglist);
00000a  4668              MOV      r0,sp
00000c  990f              LDR      r1,[sp,#0x3c]
00000e  f7fffffe          BL       vsprintf
;;;137    	va_end(arglist);
;;;138    	
;;;139    	fp = buf;
000012  466c              MOV      r4,sp
;;;140    	while (*fp)
000014  e003              B        |L6.30|
                  |L6.22|
;;;141    		uart_tx_byte(COM,*fp++);
000016  4628              MOV      r0,r5
000018  1c64              ADDS     r4,r4,#1
00001a  f7fffffe          BL       uart_tx_byte
                  |L6.30|
00001e  7821              LDRB     r1,[r4,#0]            ;140
000020  2900              CMP      r1,#0                 ;140
000022  d1f8              BNE      |L6.22|
;;;142    }
000024  b00b              ADD      sp,sp,#0x2c
000026  bc30              POP      {r4,r5}
000028  f85dfb14          LDR      pc,[sp],#0x14
;;;143    
                          ENDP


                          AREA ||i.uart_tx_byte||, CODE, READONLY, ALIGN=2

                  uart_tx_byte PROC
;;;117      */
;;;118    void uart_tx_byte(COM_TypeDef COM, uc8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
;;;120    	while (USART_GetFlagStatus(COM_USART[COM], USART_FLAG_TC) == RESET); 
000002  4d08              LDR      r5,|L7.36|
000004  460e              MOV      r6,r1                 ;119
000006  4604              MOV      r4,r0                 ;119
                  |L7.8|
000008  2140              MOVS     r1,#0x40
00000a  f8550024          LDR      r0,[r5,r4,LSL #2]
00000e  f7fffffe          BL       USART_GetFlagStatus
000012  2800              CMP      r0,#0
000014  d0f8              BEQ      |L7.8|
;;;121    	USART_SendData(COM_USART[COM],data);
000016  f8550024          LDR      r0,[r5,r4,LSL #2]
00001a  4631              MOV      r1,r6
00001c  e8bd4070          POP      {r4-r6,lr}
000020  f7ffbffe          B.W      USART_SendData
;;;122    }
;;;123    
                          ENDP

                  |L7.36|
                          DCD      ||.data||+0x4

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  COM_USART_CLK
                          DCD      0x00004000
                          DCD      0x00020000
                          DCD      0x00040000
                          %        8
                  COM_TX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000008
                          %        8
                  COM_RX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000008
                          %        8
                  COM_TX_PIN
00003c  02000004          DCW      0x0200,0x0004
000040  0400              DCW      0x0400
000042  0000              DCB      0x00,0x00
000044  0000              DCB      0x00,0x00
                  COM_RX_PIN
000046  0400              DCW      0x0400
000048  00080800          DCW      0x0008,0x0800
                          DCD      0x00000000
                  COM_IRQ
000050  00250026          DCW      0x0025,0x0026
000054  0027              DCW      0x0027
000056  0000              DCB      0x00,0x00
000058  0000              DCB      0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  printf_COMx
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  COM_USART
                          DCD      0x40013800
                          DCD      0x40004400
                          DCD      0x40004800
                          %        8
                  COM_TX_PORT
                          DCD      0x40010800
                          DCD      0x40010800
                          DCD      0x40010c00
                          %        8
                  COM_RX_PORT
                          DCD      0x40010800
                          DCD      0x40010800
                          DCD      0x40010c00
                          %        8
