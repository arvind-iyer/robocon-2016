; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_flash.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_flash.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\FWlib\inc -I.\user -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=516 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_flash.crf FWlib\SRC\stm32f10x_flash.c]
                          THUMB

                          AREA ||i.FLASH_ClearFlag||, CODE, READONLY, ALIGN=2

                  FLASH_ClearFlag PROC
;;;1442     */
;;;1443   void FLASH_ClearFlag(uint32_t FLASH_FLAG)
000000  4901              LDR      r1,|L1.8|
;;;1444   {
;;;1445   #ifdef STM32F10X_XL
;;;1446     /* Check the parameters */
;;;1447     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
;;;1448   
;;;1449     if((FLASH_FLAG & 0x80000000) != 0x0)
;;;1450     {
;;;1451       /* Clear the flags */
;;;1452       FLASH->SR2 = FLASH_FLAG;
;;;1453     }
;;;1454     else
;;;1455     {
;;;1456       /* Clear the flags */
;;;1457       FLASH->SR = FLASH_FLAG;
;;;1458     }  
;;;1459   
;;;1460   #else
;;;1461     /* Check the parameters */
;;;1462     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
;;;1463     
;;;1464     /* Clear the flags */
;;;1465     FLASH->SR = FLASH_FLAG;
000002  60c8              STR      r0,[r1,#0xc]
;;;1466   #endif /* STM32F10X_XL */
;;;1467   }
000004  4770              BX       lr
;;;1468   
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_EnableWriteProtection||, CODE, READONLY, ALIGN=2

                  FLASH_EnableWriteProtection PROC
;;;974      */
;;;975    FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;976    {
;;;977      uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
;;;978      
;;;979      FLASH_Status status = FLASH_COMPLETE;
;;;980      
;;;981      /* Check the parameters */
;;;982      assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
;;;983      
;;;984      FLASH_Pages = (uint32_t)(~FLASH_Pages);
000004  43c0              MVNS     r0,r0
;;;985      WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
000006  b2c7              UXTB     r7,r0
;;;986      WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
000008  f3c02607          UBFX     r6,r0,#8,#8
;;;987      WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
00000c  f3c04507          UBFX     r5,r0,#16,#8
;;;988      WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
000010  0e04              LSRS     r4,r0,#24
;;;989      
;;;990      /* Wait for last operation to be completed */
;;;991      status = FLASH_WaitForLastOperation(ProgramTimeout);
000012  f44f5900          MOV      r9,#0x2000
000016  4648              MOV      r0,r9
000018  f7fffffe          BL       FLASH_WaitForLastOperation
;;;992      
;;;993      if(status == FLASH_COMPLETE)
00001c  2804              CMP      r0,#4
00001e  d13b              BNE      |L2.152|
;;;994      {
;;;995        /* Authorizes the small information block programming */
;;;996        FLASH->OPTKEYR = FLASH_KEY1;
000020  f8df807c          LDR      r8,|L2.160|
000024  4a1d              LDR      r2,|L2.156|
000026  f8c82008          STR      r2,[r8,#8]
;;;997        FLASH->OPTKEYR = FLASH_KEY2;
00002a  4a1e              LDR      r2,|L2.164|
00002c  f8c82008          STR      r2,[r8,#8]
;;;998        FLASH->CR |= CR_OPTPG_Set;
000030  f8d82010          LDR      r2,[r8,#0x10]
000034  f0420210          ORR      r2,r2,#0x10
000038  f8c82010          STR      r2,[r8,#0x10]
;;;999        if(WRP0_Data != 0xFF)
00003c  2fff              CMP      r7,#0xff
00003e  d006              BEQ      |L2.78|
;;;1000       {
;;;1001         OB->WRP0 = WRP0_Data;
000040  4819              LDR      r0,|L2.168|
000042  8007              STRH     r7,[r0,#0]
;;;1002         
;;;1003         /* Wait for last operation to be completed */
;;;1004         status = FLASH_WaitForLastOperation(ProgramTimeout);
000044  4648              MOV      r0,r9
000046  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1005       }
;;;1006       if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
00004a  2804              CMP      r0,#4
00004c  d11b              BNE      |L2.134|
                  |L2.78|
00004e  2eff              CMP      r6,#0xff
000050  d007              BEQ      |L2.98|
;;;1007       {
;;;1008         OB->WRP1 = WRP1_Data;
000052  4815              LDR      r0,|L2.168|
000054  1c80              ADDS     r0,r0,#2
000056  8006              STRH     r6,[r0,#0]
;;;1009         
;;;1010         /* Wait for last operation to be completed */
;;;1011         status = FLASH_WaitForLastOperation(ProgramTimeout);
000058  4648              MOV      r0,r9
00005a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1012       }
;;;1013       if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
00005e  2804              CMP      r0,#4
000060  d111              BNE      |L2.134|
                  |L2.98|
000062  2dff              CMP      r5,#0xff
000064  d007              BEQ      |L2.118|
;;;1014       {
;;;1015         OB->WRP2 = WRP2_Data;
000066  4810              LDR      r0,|L2.168|
000068  1d00              ADDS     r0,r0,#4
00006a  8005              STRH     r5,[r0,#0]
;;;1016         
;;;1017         /* Wait for last operation to be completed */
;;;1018         status = FLASH_WaitForLastOperation(ProgramTimeout);
00006c  4648              MOV      r0,r9
00006e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1019       }
;;;1020       
;;;1021       if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
000072  2804              CMP      r0,#4
000074  d107              BNE      |L2.134|
                  |L2.118|
000076  2cff              CMP      r4,#0xff
000078  d007              BEQ      |L2.138|
;;;1022       {
;;;1023         OB->WRP3 = WRP3_Data;
00007a  480b              LDR      r0,|L2.168|
00007c  1d80              ADDS     r0,r0,#6
00007e  8004              STRH     r4,[r0,#0]
;;;1024        
;;;1025         /* Wait for last operation to be completed */
;;;1026         status = FLASH_WaitForLastOperation(ProgramTimeout);
000080  4648              MOV      r0,r9
000082  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L2.134|
;;;1027       }
;;;1028             
;;;1029       if(status != FLASH_TIMEOUT)
000086  2805              CMP      r0,#5
000088  d006              BEQ      |L2.152|
                  |L2.138|
;;;1030       {
;;;1031         /* if the program operation is completed, disable the OPTPG Bit */
;;;1032         FLASH->CR &= CR_OPTPG_Reset;
00008a  f8d82010          LDR      r2,[r8,#0x10]
00008e  f64173ef          MOV      r3,#0x1fef
000092  401a              ANDS     r2,r2,r3
000094  f8c82010          STR      r2,[r8,#0x10]
                  |L2.152|
;;;1033       }
;;;1034     } 
;;;1035     /* Return the write protection operation Status */
;;;1036     return status;       
;;;1037   }
000098  e8bd83f0          POP      {r4-r9,pc}
;;;1038   
                          ENDP

                  |L2.156|
                          DCD      0x45670123
                  |L2.160|
                          DCD      0x40022000
                  |L2.164|
                          DCD      0xcdef89ab
                  |L2.168|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_EraseAllBank1Pages||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllBank1Pages PROC
;;;554      */
;;;555    FLASH_Status FLASH_EraseAllBank1Pages(void)
000000  b530              PUSH     {r4,r5,lr}
;;;556    {
;;;557      FLASH_Status status = FLASH_COMPLETE;
;;;558      /* Wait for last operation to be completed */
;;;559      status = FLASH_WaitForLastBank1Operation(EraseTimeout);
000002  f44f2530          MOV      r5,#0xb0000
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       FLASH_WaitForLastBank1Operation
;;;560      
;;;561      if(status == FLASH_COMPLETE)
00000c  2804              CMP      r0,#4
00000e  d110              BNE      |L3.50|
;;;562      {
;;;563        /* if the previous operation is completed, proceed to erase all pages */
;;;564         FLASH->CR |= CR_MER_Set;
000010  4c08              LDR      r4,|L3.52|
000012  6920              LDR      r0,[r4,#0x10]
000014  f0400004          ORR      r0,r0,#4
000018  6120              STR      r0,[r4,#0x10]
;;;565         FLASH->CR |= CR_STRT_Set;
00001a  6920              LDR      r0,[r4,#0x10]
00001c  f0400040          ORR      r0,r0,#0x40
000020  6120              STR      r0,[r4,#0x10]
;;;566        
;;;567        /* Wait for last operation to be completed */
;;;568        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       FLASH_WaitForLastBank1Operation
;;;569        
;;;570        /* Disable the MER Bit */
;;;571        FLASH->CR &= CR_MER_Reset;
000028  6921              LDR      r1,[r4,#0x10]
00002a  f64172fb          MOV      r2,#0x1ffb
00002e  4011              ANDS     r1,r1,r2
000030  6121              STR      r1,[r4,#0x10]
                  |L3.50|
;;;572      }    
;;;573      /* Return the Erase Status */
;;;574      return status;
;;;575    }
000032  bd30              POP      {r4,r5,pc}
;;;576    
                          ENDP

                  |L3.52|
                          DCD      0x40022000

                          AREA ||i.FLASH_EraseAllPages||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllPages PROC
;;;491      */
;;;492    FLASH_Status FLASH_EraseAllPages(void)
000000  b530              PUSH     {r4,r5,lr}
;;;493    {
;;;494      FLASH_Status status = FLASH_COMPLETE;
;;;495    
;;;496    #ifdef STM32F10X_XL
;;;497      /* Wait for last operation to be completed */
;;;498      status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;499      
;;;500      if(status == FLASH_COMPLETE)
;;;501      {
;;;502        /* if the previous operation is completed, proceed to erase all pages */
;;;503         FLASH->CR |= CR_MER_Set;
;;;504         FLASH->CR |= CR_STRT_Set;
;;;505        
;;;506        /* Wait for last operation to be completed */
;;;507        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;508        
;;;509        /* Disable the MER Bit */
;;;510        FLASH->CR &= CR_MER_Reset;
;;;511      }    
;;;512      if(status == FLASH_COMPLETE)
;;;513      {
;;;514        /* if the previous operation is completed, proceed to erase all pages */
;;;515         FLASH->CR2 |= CR_MER_Set;
;;;516         FLASH->CR2 |= CR_STRT_Set;
;;;517        
;;;518        /* Wait for last operation to be completed */
;;;519        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;520        
;;;521        /* Disable the MER Bit */
;;;522        FLASH->CR2 &= CR_MER_Reset;
;;;523      }
;;;524    #else
;;;525      /* Wait for last operation to be completed */
;;;526      status = FLASH_WaitForLastOperation(EraseTimeout);
000002  f44f2530          MOV      r5,#0xb0000
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       FLASH_WaitForLastOperation
;;;527      if(status == FLASH_COMPLETE)
00000c  2804              CMP      r0,#4
00000e  d110              BNE      |L4.50|
;;;528      {
;;;529        /* if the previous operation is completed, proceed to erase all pages */
;;;530         FLASH->CR |= CR_MER_Set;
000010  4c08              LDR      r4,|L4.52|
000012  6920              LDR      r0,[r4,#0x10]
000014  f0400004          ORR      r0,r0,#4
000018  6120              STR      r0,[r4,#0x10]
;;;531         FLASH->CR |= CR_STRT_Set;
00001a  6920              LDR      r0,[r4,#0x10]
00001c  f0400040          ORR      r0,r0,#0x40
000020  6120              STR      r0,[r4,#0x10]
;;;532        
;;;533        /* Wait for last operation to be completed */
;;;534        status = FLASH_WaitForLastOperation(EraseTimeout);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       FLASH_WaitForLastOperation
;;;535    
;;;536        /* Disable the MER Bit */
;;;537        FLASH->CR &= CR_MER_Reset;
000028  6921              LDR      r1,[r4,#0x10]
00002a  f64172fb          MOV      r2,#0x1ffb
00002e  4011              ANDS     r1,r1,r2
000030  6121              STR      r1,[r4,#0x10]
                  |L4.50|
;;;538      }
;;;539    #endif /* STM32F10X_XL */
;;;540    
;;;541      /* Return the Erase Status */
;;;542      return status;
;;;543    }
000032  bd30              POP      {r4,r5,pc}
;;;544    
                          ENDP

                  |L4.52|
                          DCD      0x40022000

                          AREA ||i.FLASH_EraseOptionBytes||, CODE, READONLY, ALIGN=2

                  FLASH_EraseOptionBytes PROC
;;;615      */
;;;616    FLASH_Status FLASH_EraseOptionBytes(void)
000000  b570              PUSH     {r4-r6,lr}
;;;617    {
;;;618      uint16_t rdptmp = RDP_Key;
000002  25a5              MOVS     r5,#0xa5
;;;619    
;;;620      FLASH_Status status = FLASH_COMPLETE;
;;;621    
;;;622      /* Get the actual read protection Option Byte value */ 
;;;623      if(FLASH_GetReadOutProtectionStatus() != RESET)
000004  f7fffffe          BL       FLASH_GetReadOutProtectionStatus
000008  b100              CBZ      r0,|L5.12|
;;;624      {
;;;625        rdptmp = 0x00;  
00000a  2500              MOVS     r5,#0
                  |L5.12|
;;;626      }
;;;627    
;;;628      /* Wait for last operation to be completed */
;;;629      status = FLASH_WaitForLastOperation(EraseTimeout);
00000c  f44f2630          MOV      r6,#0xb0000
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       FLASH_WaitForLastOperation
;;;630      if(status == FLASH_COMPLETE)
000016  2804              CMP      r0,#4
000018  d127              BNE      |L5.106|
;;;631      {
;;;632        /* Authorize the small information block programming */
;;;633        FLASH->OPTKEYR = FLASH_KEY1;
00001a  4c15              LDR      r4,|L5.112|
00001c  4813              LDR      r0,|L5.108|
00001e  60a0              STR      r0,[r4,#8]
;;;634        FLASH->OPTKEYR = FLASH_KEY2;
000020  4814              LDR      r0,|L5.116|
000022  60a0              STR      r0,[r4,#8]
;;;635        
;;;636        /* if the previous operation is completed, proceed to erase the option bytes */
;;;637        FLASH->CR |= CR_OPTER_Set;
000024  6920              LDR      r0,[r4,#0x10]
000026  f0400020          ORR      r0,r0,#0x20
00002a  6120              STR      r0,[r4,#0x10]
;;;638        FLASH->CR |= CR_STRT_Set;
00002c  6920              LDR      r0,[r4,#0x10]
00002e  f0400040          ORR      r0,r0,#0x40
000032  6120              STR      r0,[r4,#0x10]
;;;639        /* Wait for last operation to be completed */
;;;640        status = FLASH_WaitForLastOperation(EraseTimeout);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       FLASH_WaitForLastOperation
;;;641        
;;;642        if(status == FLASH_COMPLETE)
;;;643        {
;;;644          /* if the erase operation is completed, disable the OPTER Bit */
;;;645          FLASH->CR &= CR_OPTER_Reset;
;;;646           
;;;647          /* Enable the Option Bytes Programming operation */
;;;648          FLASH->CR |= CR_OPTPG_Set;
;;;649          /* Restore the last read protection Option Byte value */
;;;650          OB->RDP = (uint16_t)rdptmp; 
;;;651          /* Wait for last operation to be completed */
;;;652          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;653     
;;;654          if(status != FLASH_TIMEOUT)
;;;655          {
;;;656            /* if the program operation is completed, disable the OPTPG Bit */
;;;657            FLASH->CR &= CR_OPTPG_Reset;
00003a  f64176ef          MOV      r6,#0x1fef
00003e  2804              CMP      r0,#4                 ;642
000040  d10e              BNE      |L5.96|
000042  6920              LDR      r0,[r4,#0x10]         ;645
000044  f64171df          MOV      r1,#0x1fdf            ;645
000048  4008              ANDS     r0,r0,r1              ;645
00004a  6120              STR      r0,[r4,#0x10]         ;645
00004c  6920              LDR      r0,[r4,#0x10]         ;648
00004e  f0400010          ORR      r0,r0,#0x10           ;648
000052  6120              STR      r0,[r4,#0x10]         ;648
000054  4808              LDR      r0,|L5.120|
000056  8005              STRH     r5,[r0,#0]            ;650
000058  f44f5000          MOV      r0,#0x2000            ;652
00005c  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L5.96|
;;;658          }
;;;659        }
;;;660        else
;;;661        {
;;;662          if (status != FLASH_TIMEOUT)
000060  2805              CMP      r0,#5
000062  d002              BEQ      |L5.106|
000064  6921              LDR      r1,[r4,#0x10]         ;657
000066  4031              ANDS     r1,r1,r6              ;657
000068  6121              STR      r1,[r4,#0x10]         ;657
                  |L5.106|
;;;663          {
;;;664            /* Disable the OPTPG Bit */
;;;665            FLASH->CR &= CR_OPTPG_Reset;
;;;666          }
;;;667        }  
;;;668      }
;;;669      /* Return the erase status */
;;;670      return status;
;;;671    }
00006a  bd70              POP      {r4-r6,pc}
;;;672    
                          ENDP

                  |L5.108|
                          DCD      0x45670123
                  |L5.112|
                          DCD      0x40022000
                  |L5.116|
                          DCD      0xcdef89ab
                  |L5.120|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_ErasePage||, CODE, READONLY, ALIGN=2

                  FLASH_ErasePage PROC
;;;418      */
;;;419    FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
000000  b570              PUSH     {r4-r6,lr}
;;;420    {
000002  4605              MOV      r5,r0
;;;421      FLASH_Status status = FLASH_COMPLETE;
;;;422      /* Check the parameters */
;;;423      assert_param(IS_FLASH_ADDRESS(Page_Address));
;;;424    
;;;425    #ifdef STM32F10X_XL
;;;426      if(Page_Address < FLASH_BANK1_END_ADDRESS)  
;;;427      {
;;;428        /* Wait for last operation to be completed */
;;;429        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;430        if(status == FLASH_COMPLETE)
;;;431        { 
;;;432          /* if the previous operation is completed, proceed to erase the page */
;;;433          FLASH->CR|= CR_PER_Set;
;;;434          FLASH->AR = Page_Address; 
;;;435          FLASH->CR|= CR_STRT_Set;
;;;436        
;;;437          /* Wait for last operation to be completed */
;;;438          status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;439    
;;;440          /* Disable the PER Bit */
;;;441          FLASH->CR &= CR_PER_Reset;
;;;442        }
;;;443      }
;;;444      else
;;;445      {
;;;446        /* Wait for last operation to be completed */
;;;447        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;448        if(status == FLASH_COMPLETE)
;;;449        { 
;;;450          /* if the previous operation is completed, proceed to erase the page */
;;;451          FLASH->CR2|= CR_PER_Set;
;;;452          FLASH->AR2 = Page_Address; 
;;;453          FLASH->CR2|= CR_STRT_Set;
;;;454        
;;;455          /* Wait for last operation to be completed */
;;;456          status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;457          
;;;458          /* Disable the PER Bit */
;;;459          FLASH->CR2 &= CR_PER_Reset;
;;;460        }
;;;461      }
;;;462    #else
;;;463      /* Wait for last operation to be completed */
;;;464      status = FLASH_WaitForLastOperation(EraseTimeout);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;465      
;;;466      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d111              BNE      |L6.54|
;;;467      { 
;;;468        /* if the previous operation is completed, proceed to erase the page */
;;;469        FLASH->CR|= CR_PER_Set;
000012  4c09              LDR      r4,|L6.56|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400002          ORR      r0,r0,#2
00001a  6120              STR      r0,[r4,#0x10]
;;;470        FLASH->AR = Page_Address; 
00001c  6165              STR      r5,[r4,#0x14]
;;;471        FLASH->CR|= CR_STRT_Set;
00001e  6920              LDR      r0,[r4,#0x10]
000020  f0400040          ORR      r0,r0,#0x40
000024  6120              STR      r0,[r4,#0x10]
;;;472        
;;;473        /* Wait for last operation to be completed */
;;;474        status = FLASH_WaitForLastOperation(EraseTimeout);
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       FLASH_WaitForLastOperation
;;;475        
;;;476        /* Disable the PER Bit */
;;;477        FLASH->CR &= CR_PER_Reset;
00002c  6921              LDR      r1,[r4,#0x10]
00002e  f64172fd          MOV      r2,#0x1ffd
000032  4011              ANDS     r1,r1,r2
000034  6121              STR      r1,[r4,#0x10]
                  |L6.54|
;;;478      }
;;;479    #endif /* STM32F10X_XL */
;;;480    
;;;481      /* Return the Erase Status */
;;;482      return status;
;;;483    }
000036  bd70              POP      {r4-r6,pc}
;;;484    
                          ENDP

                  |L6.56|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetBank1Status||, CODE, READONLY, ALIGN=2

                  FLASH_GetBank1Status PROC
;;;1514     */
;;;1515   FLASH_Status FLASH_GetBank1Status(void)
000000  4908              LDR      r1,|L7.36|
;;;1516   {
;;;1517     FLASH_Status flashstatus = FLASH_COMPLETE;
000002  2004              MOVS     r0,#4
;;;1518     
;;;1519     if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
000004  68ca              LDR      r2,[r1,#0xc]
000006  07d2              LSLS     r2,r2,#31
000008  d001              BEQ      |L7.14|
;;;1520     {
;;;1521       flashstatus = FLASH_BUSY;
00000a  2001              MOVS     r0,#1
;;;1522     }
;;;1523     else 
;;;1524     {  
;;;1525       if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
;;;1526       { 
;;;1527         flashstatus = FLASH_ERROR_PG;
;;;1528       }
;;;1529       else 
;;;1530       {
;;;1531         if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
;;;1532         {
;;;1533           flashstatus = FLASH_ERROR_WRP;
;;;1534         }
;;;1535         else
;;;1536         {
;;;1537           flashstatus = FLASH_COMPLETE;
;;;1538         }
;;;1539       }
;;;1540     }
;;;1541     /* Return the Flash Status */
;;;1542     return flashstatus;
;;;1543   }
00000c  4770              BX       lr
                  |L7.14|
00000e  68ca              LDR      r2,[r1,#0xc]          ;1525
000010  0752              LSLS     r2,r2,#29             ;1525
000012  d501              BPL      |L7.24|
000014  2002              MOVS     r0,#2                 ;1527
                  |L7.22|
000016  4770              BX       lr
                  |L7.24|
000018  68c9              LDR      r1,[r1,#0xc]          ;1531
00001a  06c9              LSLS     r1,r1,#27             ;1531
00001c  d5fb              BPL      |L7.22|
00001e  2003              MOVS     r0,#3                 ;1533
000020  4770              BX       lr
;;;1544   
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetFlagStatus PROC
;;;1356     */
;;;1357   FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000000  4601              MOV      r1,r0
;;;1358   {
;;;1359     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1360   
;;;1361   #ifdef STM32F10X_XL
;;;1362     /* Check the parameters */
;;;1363     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
;;;1364     if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
;;;1365     {
;;;1366       if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
;;;1367       {
;;;1368         bitstatus = SET;
;;;1369       }
;;;1370       else
;;;1371       {
;;;1372         bitstatus = RESET;
;;;1373       }
;;;1374     }
;;;1375     else
;;;1376     {
;;;1377       if((FLASH_FLAG & 0x80000000) != 0x0)
;;;1378       {
;;;1379         if((FLASH->SR2 & FLASH_FLAG) != (uint32_t)RESET)
;;;1380         {
;;;1381           bitstatus = SET;
;;;1382         }
;;;1383         else
;;;1384         {
;;;1385           bitstatus = RESET;
;;;1386         }
;;;1387       }
;;;1388       else
;;;1389       {
;;;1390         if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
;;;1391         {
;;;1392           bitstatus = SET;
;;;1393         }
;;;1394         else
;;;1395         {
;;;1396           bitstatus = RESET;
;;;1397         }
;;;1398       }
;;;1399     }
;;;1400   #else
;;;1401     /* Check the parameters */
;;;1402     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
;;;1403     if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
;;;1404     {
;;;1405       if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
000004  4a05              LDR      r2,|L8.28|
000006  2901              CMP      r1,#1                 ;1403
000008  d003              BEQ      |L8.18|
;;;1406       {
;;;1407         bitstatus = SET;
;;;1408       }
;;;1409       else
;;;1410       {
;;;1411         bitstatus = RESET;
;;;1412       }
;;;1413     }
;;;1414     else
;;;1415     {
;;;1416      if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
00000a  68d2              LDR      r2,[r2,#0xc]
00000c  420a              TST      r2,r1
00000e  d103              BNE      |L8.24|
                  |L8.16|
;;;1417       {
;;;1418         bitstatus = SET;
;;;1419       }
;;;1420       else
;;;1421       {
;;;1422         bitstatus = RESET;
;;;1423       }
;;;1424     }
;;;1425   #endif /* STM32F10X_XL */
;;;1426   
;;;1427     /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;1428     return bitstatus;
;;;1429   }
000010  4770              BX       lr
                  |L8.18|
000012  69d1              LDR      r1,[r2,#0x1c]         ;1405
000014  07c9              LSLS     r1,r1,#31             ;1405
000016  d0fb              BEQ      |L8.16|
                  |L8.24|
000018  2001              MOVS     r0,#1                 ;1407
00001a  4770              BX       lr
;;;1430   
                          ENDP

                  |L8.28|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetPrefetchBufferStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetPrefetchBufferStatus PROC
;;;1259     */
;;;1260   FlagStatus FLASH_GetPrefetchBufferStatus(void)
000000  4903              LDR      r1,|L9.16|
;;;1261   {
;;;1262     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1263     
;;;1264     if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
000004  6809              LDR      r1,[r1,#0]
000006  0689              LSLS     r1,r1,#26
000008  d500              BPL      |L9.12|
;;;1265     {
;;;1266       bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L9.12|
;;;1267     }
;;;1268     else
;;;1269     {
;;;1270       bitstatus = RESET;
;;;1271     }
;;;1272     /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
;;;1273     return bitstatus; 
;;;1274   }
00000c  4770              BX       lr
;;;1275   
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetReadOutProtectionStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetReadOutProtectionStatus PROC
;;;1239     */
;;;1240   FlagStatus FLASH_GetReadOutProtectionStatus(void)
000000  4903              LDR      r1,|L10.16|
;;;1241   {
;;;1242     FlagStatus readoutstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1243     if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
000004  69c9              LDR      r1,[r1,#0x1c]
000006  0789              LSLS     r1,r1,#30
000008  d500              BPL      |L10.12|
;;;1244     {
;;;1245       readoutstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L10.12|
;;;1246     }
;;;1247     else
;;;1248     {
;;;1249       readoutstatus = RESET;
;;;1250     }
;;;1251     return readoutstatus;
;;;1252   }
00000c  4770              BX       lr
;;;1253   
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetStatus PROC
;;;1476     */
;;;1477   FLASH_Status FLASH_GetStatus(void)
000000  4908              LDR      r1,|L11.36|
;;;1478   {
;;;1479     FLASH_Status flashstatus = FLASH_COMPLETE;
000002  2004              MOVS     r0,#4
;;;1480     
;;;1481     if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
000004  68ca              LDR      r2,[r1,#0xc]
000006  07d2              LSLS     r2,r2,#31
000008  d001              BEQ      |L11.14|
;;;1482     {
;;;1483       flashstatus = FLASH_BUSY;
00000a  2001              MOVS     r0,#1
;;;1484     }
;;;1485     else 
;;;1486     {  
;;;1487       if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
;;;1488       { 
;;;1489         flashstatus = FLASH_ERROR_PG;
;;;1490       }
;;;1491       else 
;;;1492       {
;;;1493         if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
;;;1494         {
;;;1495           flashstatus = FLASH_ERROR_WRP;
;;;1496         }
;;;1497         else
;;;1498         {
;;;1499           flashstatus = FLASH_COMPLETE;
;;;1500         }
;;;1501       }
;;;1502     }
;;;1503     /* Return the Flash Status */
;;;1504     return flashstatus;
;;;1505   }
00000c  4770              BX       lr
                  |L11.14|
00000e  68ca              LDR      r2,[r1,#0xc]          ;1487
000010  0752              LSLS     r2,r2,#29             ;1487
000012  d501              BPL      |L11.24|
000014  2002              MOVS     r0,#2                 ;1489
                  |L11.22|
000016  4770              BX       lr
                  |L11.24|
000018  68c9              LDR      r1,[r1,#0xc]          ;1493
00001a  06c9              LSLS     r1,r1,#27             ;1493
00001c  d5fb              BPL      |L11.22|
00001e  2003              MOVS     r0,#3                 ;1495
000020  4770              BX       lr
;;;1506   
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetUserOptionByte||, CODE, READONLY, ALIGN=2

                  FLASH_GetUserOptionByte PROC
;;;1215     */
;;;1216   uint32_t FLASH_GetUserOptionByte(void)
000000  4801              LDR      r0,|L12.8|
;;;1217   {
;;;1218     /* Return the User Option Byte */
;;;1219     return (uint32_t)(FLASH->OBR >> 2);
000002  69c0              LDR      r0,[r0,#0x1c]
000004  0880              LSRS     r0,r0,#2
;;;1220   }
000006  4770              BX       lr
;;;1221   
                          ENDP

                  |L12.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetWriteProtectionOptionByte||, CODE, READONLY, ALIGN=2

                  FLASH_GetWriteProtectionOptionByte PROC
;;;1227     */
;;;1228   uint32_t FLASH_GetWriteProtectionOptionByte(void)
000000  4801              LDR      r0,|L13.8|
;;;1229   {
;;;1230     /* Return the Flash write protection Register value */
;;;1231     return (uint32_t)(FLASH->WRPR);
000002  6a00              LDR      r0,[r0,#0x20]
;;;1232   }
000004  4770              BX       lr
;;;1233   
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_HalfCycleAccessCmd||, CODE, READONLY, ALIGN=2

                  FLASH_HalfCycleAccessCmd PROC
;;;280      */
;;;281    void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess)
000000  4904              LDR      r1,|L14.20|
;;;282    {
;;;283      /* Check the parameters */
;;;284      assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
;;;285      
;;;286      /* Enable or disable the Half cycle access */
;;;287      FLASH->ACR &= ACR_HLFCYA_Mask;
000002  680a              LDR      r2,[r1,#0]
000004  f0220208          BIC      r2,r2,#8
000008  600a              STR      r2,[r1,#0]
;;;288      FLASH->ACR |= FLASH_HalfCycleAccess;
00000a  680a              LDR      r2,[r1,#0]
00000c  4302              ORRS     r2,r2,r0
00000e  600a              STR      r2,[r1,#0]
;;;289    }
000010  4770              BX       lr
;;;290    
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x40022000

                          AREA ||i.FLASH_ITConfig||, CODE, READONLY, ALIGN=2

                  FLASH_ITConfig PROC
;;;1289     */
;;;1290   void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L15.20|
;;;1291   {
;;;1292   #ifdef STM32F10X_XL
;;;1293     /* Check the parameters */
;;;1294     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1295     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1296   
;;;1297     if((FLASH_IT & 0x80000000) != 0x0)
;;;1298     {
;;;1299       if(NewState != DISABLE)
;;;1300       {
;;;1301         /* Enable the interrupt sources */
;;;1302         FLASH->CR2 |= (FLASH_IT & 0x7FFFFFFF);
;;;1303       }
;;;1304       else
;;;1305       {
;;;1306         /* Disable the interrupt sources */
;;;1307         FLASH->CR2 &= ~(uint32_t)(FLASH_IT & 0x7FFFFFFF);
;;;1308       }
;;;1309     }
;;;1310     else
;;;1311     {
;;;1312       if(NewState != DISABLE)
;;;1313       {
;;;1314         /* Enable the interrupt sources */
;;;1315         FLASH->CR |= FLASH_IT;
;;;1316       }
;;;1317       else
;;;1318       {
;;;1319         /* Disable the interrupt sources */
;;;1320         FLASH->CR &= ~(uint32_t)FLASH_IT;
;;;1321       }
;;;1322     }
;;;1323   #else
;;;1324     /* Check the parameters */
;;;1325     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1326     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1327   
;;;1328     if(NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1329     {
;;;1330       /* Enable the interrupt sources */
;;;1331       FLASH->CR |= FLASH_IT;
;;;1332     }
;;;1333     else
;;;1334     {
;;;1335       /* Disable the interrupt sources */
;;;1336       FLASH->CR &= ~(uint32_t)FLASH_IT;
000004  6911              LDR      r1,[r2,#0x10]
000006  d001              BEQ      |L15.12|
000008  4301              ORRS     r1,r1,r0              ;1331
00000a  e000              B        |L15.14|
                  |L15.12|
00000c  4381              BICS     r1,r1,r0
                  |L15.14|
00000e  6111              STR      r1,[r2,#0x10]         ;1331
;;;1337     }
;;;1338   #endif /* STM32F10X_XL */
;;;1339   }
000010  4770              BX       lr
;;;1340   
                          ENDP

000012  0000              DCW      0x0000
                  |L15.20|
                          DCD      0x40022000

                          AREA ||i.FLASH_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_Lock PROC
;;;371      */
;;;372    void FLASH_Lock(void)
000000  4802              LDR      r0,|L16.12|
;;;373    {
;;;374      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
;;;375      FLASH->CR |= CR_LOCK_Set;
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410180          ORR      r1,r1,#0x80
000008  6101              STR      r1,[r0,#0x10]
;;;376    
;;;377    #ifdef STM32F10X_XL
;;;378      /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
;;;379      FLASH->CR2 |= CR_LOCK_Set;
;;;380    #endif /* STM32F10X_XL */
;;;381    }
00000a  4770              BX       lr
;;;382    
                          ENDP

                  |L16.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_LockBank1||, CODE, READONLY, ALIGN=2

                  FLASH_LockBank1 PROC
;;;391      */
;;;392    void FLASH_LockBank1(void)
000000  4802              LDR      r0,|L17.12|
;;;393    {
;;;394      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
;;;395      FLASH->CR |= CR_LOCK_Set;
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410180          ORR      r1,r1,#0x80
000008  6101              STR      r1,[r0,#0x10]
;;;396    }
00000a  4770              BX       lr
;;;397    
                          ENDP

                  |L17.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_PrefetchBufferCmd||, CODE, READONLY, ALIGN=2

                  FLASH_PrefetchBufferCmd PROC
;;;299      */
;;;300    void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
000000  4904              LDR      r1,|L18.20|
;;;301    {
;;;302      /* Check the parameters */
;;;303      assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
;;;304      
;;;305      /* Enable or disable the Prefetch Buffer */
;;;306      FLASH->ACR &= ACR_PRFTBE_Mask;
000002  680a              LDR      r2,[r1,#0]
000004  f0220210          BIC      r2,r2,#0x10
000008  600a              STR      r2,[r1,#0]
;;;307      FLASH->ACR |= FLASH_PrefetchBuffer;
00000a  680a              LDR      r2,[r1,#0]
00000c  4302              ORRS     r2,r2,r0
00000e  600a              STR      r2,[r1,#0]
;;;308    }
000010  4770              BX       lr
;;;309    
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      0x40022000

                          AREA ||i.FLASH_ProgramHalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramHalfWord PROC
;;;857      */
;;;858    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;859    {
000002  4606              MOV      r6,r0
;;;860      FLASH_Status status = FLASH_COMPLETE;
;;;861      /* Check the parameters */
;;;862      assert_param(IS_FLASH_ADDRESS(Address));
;;;863    
;;;864    #ifdef STM32F10X_XL
;;;865      /* Wait for last operation to be completed */
;;;866      status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;867      
;;;868      if(Address < FLASH_BANK1_END_ADDRESS)
;;;869      {
;;;870        if(status == FLASH_COMPLETE)
;;;871        {
;;;872          /* if the previous operation is completed, proceed to program the new data */
;;;873          FLASH->CR |= CR_PG_Set;
;;;874      
;;;875          *(__IO uint16_t*)Address = Data;
;;;876          /* Wait for last operation to be completed */
;;;877          status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;878    
;;;879          /* Disable the PG Bit */
;;;880          FLASH->CR &= CR_PG_Reset;
;;;881        }
;;;882      }
;;;883      else
;;;884      {
;;;885        if(status == FLASH_COMPLETE)
;;;886        {
;;;887          /* if the previous operation is completed, proceed to program the new data */
;;;888          FLASH->CR2 |= CR_PG_Set;
;;;889      
;;;890          *(__IO uint16_t*)Address = Data;
;;;891          /* Wait for last operation to be completed */
;;;892          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;893    
;;;894          /* Disable the PG Bit */
;;;895          FLASH->CR2 &= CR_PG_Reset;
;;;896        }
;;;897      }
;;;898    #else
;;;899      /* Wait for last operation to be completed */
;;;900      status = FLASH_WaitForLastOperation(ProgramTimeout);
000004  f44f5700          MOV      r7,#0x2000
000008  460d              MOV      r5,r1                 ;859
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;901      
;;;902      if(status == FLASH_COMPLETE)
000010  2804              CMP      r0,#4
000012  d10c              BNE      |L19.46|
;;;903      {
;;;904        /* if the previous operation is completed, proceed to program the new data */
;;;905        FLASH->CR |= CR_PG_Set;
000014  4c06              LDR      r4,|L19.48|
000016  6920              LDR      r0,[r4,#0x10]
000018  f0400001          ORR      r0,r0,#1
00001c  6120              STR      r0,[r4,#0x10]
;;;906      
;;;907        *(__IO uint16_t*)Address = Data;
00001e  8035              STRH     r5,[r6,#0]
;;;908        /* Wait for last operation to be completed */
;;;909        status = FLASH_WaitForLastOperation(ProgramTimeout);
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       FLASH_WaitForLastOperation
;;;910        
;;;911        /* Disable the PG Bit */
;;;912        FLASH->CR &= CR_PG_Reset;
000026  6921              LDR      r1,[r4,#0x10]
000028  1eba              SUBS     r2,r7,#2
00002a  4011              ANDS     r1,r1,r2
00002c  6121              STR      r1,[r4,#0x10]
                  |L19.46|
;;;913      } 
;;;914    #endif  /* STM32F10X_XL */
;;;915      
;;;916      /* Return the Program Status */
;;;917      return status;
;;;918    }
00002e  bdf0              POP      {r4-r7,pc}
;;;919    
                          ENDP

                  |L19.48|
                          DCD      0x40022000

                          AREA ||i.FLASH_ProgramOptionByteData||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramOptionByteData PROC
;;;928      */
;;;929    FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;930    {
000002  4606              MOV      r6,r0
;;;931      FLASH_Status status = FLASH_COMPLETE;
;;;932      /* Check the parameters */
;;;933      assert_param(IS_OB_DATA_ADDRESS(Address));
;;;934      status = FLASH_WaitForLastOperation(ProgramTimeout);
000004  f44f5700          MOV      r7,#0x2000
000008  460d              MOV      r5,r1                 ;930
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;935    
;;;936      if(status == FLASH_COMPLETE)
000010  2804              CMP      r0,#4
000012  d113              BNE      |L20.60|
;;;937      {
;;;938        /* Authorize the small information block programming */
;;;939        FLASH->OPTKEYR = FLASH_KEY1;
000014  4c0b              LDR      r4,|L20.68|
000016  480a              LDR      r0,|L20.64|
000018  60a0              STR      r0,[r4,#8]
;;;940        FLASH->OPTKEYR = FLASH_KEY2;
00001a  480b              LDR      r0,|L20.72|
00001c  60a0              STR      r0,[r4,#8]
;;;941        /* Enables the Option Bytes Programming operation */
;;;942        FLASH->CR |= CR_OPTPG_Set; 
00001e  6920              LDR      r0,[r4,#0x10]
000020  f0400010          ORR      r0,r0,#0x10
000024  6120              STR      r0,[r4,#0x10]
;;;943        *(__IO uint16_t*)Address = Data;
000026  8035              STRH     r5,[r6,#0]
;;;944        
;;;945        /* Wait for last operation to be completed */
;;;946        status = FLASH_WaitForLastOperation(ProgramTimeout);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;947        if(status != FLASH_TIMEOUT)
00002e  2805              CMP      r0,#5
000030  d004              BEQ      |L20.60|
;;;948        {
;;;949          /* if the program operation is completed, disable the OPTPG Bit */
;;;950          FLASH->CR &= CR_OPTPG_Reset;
000032  6921              LDR      r1,[r4,#0x10]
000034  f64172ef          MOV      r2,#0x1fef
000038  4011              ANDS     r1,r1,r2
00003a  6121              STR      r1,[r4,#0x10]
                  |L20.60|
;;;951        }
;;;952      }
;;;953      /* Return the Option Byte Data Program Status */
;;;954      return status;
;;;955    }
00003c  bdf0              POP      {r4-r7,pc}
;;;956    
                          ENDP

00003e  0000              DCW      0x0000
                  |L20.64|
                          DCD      0x45670123
                  |L20.68|
                          DCD      0x40022000
                  |L20.72|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_ProgramWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramWord PROC
;;;680      */
;;;681    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
000000  e92d41f8          PUSH     {r3-r8,lr}
;;;682    {
000004  4606              MOV      r6,r0
;;;683      FLASH_Status status = FLASH_COMPLETE;
;;;684      __IO uint32_t tmp = 0;
000006  2000              MOVS     r0,#0
;;;685    
;;;686      /* Check the parameters */
;;;687      assert_param(IS_FLASH_ADDRESS(Address));
;;;688    
;;;689    #ifdef STM32F10X_XL
;;;690      if(Address < FLASH_BANK1_END_ADDRESS - 2)
;;;691      { 
;;;692        /* Wait for last operation to be completed */
;;;693        status = FLASH_WaitForLastBank1Operation(ProgramTimeout); 
;;;694        if(status == FLASH_COMPLETE)
;;;695        {
;;;696          /* if the previous operation is completed, proceed to program the new first 
;;;697            half word */
;;;698          FLASH->CR |= CR_PG_Set;
;;;699      
;;;700          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;701          /* Wait for last operation to be completed */
;;;702          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;703     
;;;704          if(status == FLASH_COMPLETE)
;;;705          {
;;;706            /* if the previous operation is completed, proceed to program the new second 
;;;707            half word */
;;;708            tmp = Address + 2;
;;;709    
;;;710            *(__IO uint16_t*) tmp = Data >> 16;
;;;711        
;;;712            /* Wait for last operation to be completed */
;;;713            status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;714            
;;;715            /* Disable the PG Bit */
;;;716            FLASH->CR &= CR_PG_Reset;
;;;717          }
;;;718          else
;;;719          {
;;;720            /* Disable the PG Bit */
;;;721            FLASH->CR &= CR_PG_Reset;
;;;722           }
;;;723        }
;;;724      }
;;;725      else if(Address == (FLASH_BANK1_END_ADDRESS - 1))
;;;726      {
;;;727        /* Wait for last operation to be completed */
;;;728        status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;729    
;;;730        if(status == FLASH_COMPLETE)
;;;731        {
;;;732          /* if the previous operation is completed, proceed to program the new first 
;;;733            half word */
;;;734          FLASH->CR |= CR_PG_Set;
;;;735      
;;;736          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;737    
;;;738          /* Wait for last operation to be completed */
;;;739          status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;740          
;;;741    	  /* Disable the PG Bit */
;;;742          FLASH->CR &= CR_PG_Reset;
;;;743        }
;;;744        else
;;;745        {
;;;746          /* Disable the PG Bit */
;;;747          FLASH->CR &= CR_PG_Reset;
;;;748        }
;;;749    
;;;750        /* Wait for last operation to be completed */
;;;751        status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;752    
;;;753        if(status == FLASH_COMPLETE)
;;;754        {
;;;755          /* if the previous operation is completed, proceed to program the new second 
;;;756          half word */
;;;757          FLASH->CR2 |= CR_PG_Set;
;;;758          tmp = Address + 2;
;;;759    
;;;760          *(__IO uint16_t*) tmp = Data >> 16;
;;;761        
;;;762          /* Wait for last operation to be completed */
;;;763          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;764            
;;;765          /* Disable the PG Bit */
;;;766          FLASH->CR2 &= CR_PG_Reset;
;;;767        }
;;;768        else
;;;769        {
;;;770          /* Disable the PG Bit */
;;;771          FLASH->CR2 &= CR_PG_Reset;
;;;772        }
;;;773      }
;;;774      else
;;;775      {
;;;776        /* Wait for last operation to be completed */
;;;777        status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;778    
;;;779        if(status == FLASH_COMPLETE)
;;;780        {
;;;781          /* if the previous operation is completed, proceed to program the new first 
;;;782            half word */
;;;783          FLASH->CR2 |= CR_PG_Set;
;;;784      
;;;785          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;786          /* Wait for last operation to be completed */
;;;787          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;788     
;;;789          if(status == FLASH_COMPLETE)
;;;790          {
;;;791            /* if the previous operation is completed, proceed to program the new second 
;;;792            half word */
;;;793            tmp = Address + 2;
;;;794    
;;;795            *(__IO uint16_t*) tmp = Data >> 16;
;;;796        
;;;797            /* Wait for last operation to be completed */
;;;798            status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;799            
;;;800            /* Disable the PG Bit */
;;;801            FLASH->CR2 &= CR_PG_Reset;
;;;802          }
;;;803          else
;;;804          {
;;;805            /* Disable the PG Bit */
;;;806            FLASH->CR2 &= CR_PG_Reset;
;;;807          }
;;;808        }
;;;809      }
;;;810    #else
;;;811      /* Wait for last operation to be completed */
;;;812      status = FLASH_WaitForLastOperation(ProgramTimeout);
000008  f44f5700          MOV      r7,#0x2000
00000c  9000              STR      r0,[sp,#0]
00000e  460d              MOV      r5,r1                 ;682
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       FLASH_WaitForLastOperation
;;;813      
;;;814      if(status == FLASH_COMPLETE)
000016  2804              CMP      r0,#4
000018  d116              BNE      |L21.72|
;;;815      {
;;;816        /* if the previous operation is completed, proceed to program the new first 
;;;817        half word */
;;;818        FLASH->CR |= CR_PG_Set;
00001a  4c0c              LDR      r4,|L21.76|
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400001          ORR      r0,r0,#1
000022  6120              STR      r0,[r4,#0x10]
;;;819      
;;;820        *(__IO uint16_t*)Address = (uint16_t)Data;
000024  8035              STRH     r5,[r6,#0]
;;;821        /* Wait for last operation to be completed */
;;;822        status = FLASH_WaitForLastOperation(ProgramTimeout);
000026  46b8              MOV      r8,r7
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;823     
;;;824        if(status == FLASH_COMPLETE)
;;;825        {
;;;826          /* if the previous operation is completed, proceed to program the new second 
;;;827          half word */
;;;828          tmp = Address + 2;
;;;829    
;;;830          *(__IO uint16_t*) tmp = Data >> 16;
;;;831        
;;;832          /* Wait for last operation to be completed */
;;;833          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;834            
;;;835          /* Disable the PG Bit */
;;;836          FLASH->CR &= CR_PG_Reset;
00002e  1ebf              SUBS     r7,r7,#2
000030  2804              CMP      r0,#4                 ;824
000032  d106              BNE      |L21.66|
000034  1cb6              ADDS     r6,r6,#2              ;824
000036  0c28              LSRS     r0,r5,#16             ;830
000038  9600              STR      r6,[sp,#0]            ;830
00003a  8030              STRH     r0,[r6,#0]            ;830
00003c  4640              MOV      r0,r8                 ;833
00003e  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L21.66|
;;;837        }
;;;838        else
;;;839        {
;;;840          /* Disable the PG Bit */
;;;841          FLASH->CR &= CR_PG_Reset;
000042  6921              LDR      r1,[r4,#0x10]
000044  4039              ANDS     r1,r1,r7
000046  6121              STR      r1,[r4,#0x10]
                  |L21.72|
;;;842        }
;;;843      }         
;;;844    #endif /* STM32F10X_XL */
;;;845       
;;;846      /* Return the Program Status */
;;;847      return status;
;;;848    }
000048  e8bd81f8          POP      {r3-r8,pc}
;;;849    
                          ENDP

                  |L21.76|
                          DCD      0x40022000

                          AREA ||i.FLASH_ReadOutProtection||, CODE, READONLY, ALIGN=2

                  FLASH_ReadOutProtection PROC
;;;1048     */
;;;1049   FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1050   {
000002  4606              MOV      r6,r0
;;;1051     FLASH_Status status = FLASH_COMPLETE;
;;;1052     /* Check the parameters */
;;;1053     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1054     status = FLASH_WaitForLastOperation(EraseTimeout);
000004  f44f2530          MOV      r5,#0xb0000
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1055     if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d118              BNE      |L22.68|
;;;1056     {
;;;1057       /* Authorizes the small information block programming */
;;;1058       FLASH->OPTKEYR = FLASH_KEY1;
000012  4c1a              LDR      r4,|L22.124|
000014  4818              LDR      r0,|L22.120|
000016  60a0              STR      r0,[r4,#8]
;;;1059       FLASH->OPTKEYR = FLASH_KEY2;
000018  4819              LDR      r0,|L22.128|
00001a  60a0              STR      r0,[r4,#8]
;;;1060       FLASH->CR |= CR_OPTER_Set;
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400020          ORR      r0,r0,#0x20
000022  6120              STR      r0,[r4,#0x10]
;;;1061       FLASH->CR |= CR_STRT_Set;
000024  6920              LDR      r0,[r4,#0x10]
000026  f0400040          ORR      r0,r0,#0x40
00002a  6120              STR      r0,[r4,#0x10]
;;;1062       /* Wait for last operation to be completed */
;;;1063       status = FLASH_WaitForLastOperation(EraseTimeout);
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1064       if(status == FLASH_COMPLETE)
;;;1065       {
;;;1066         /* if the erase operation is completed, disable the OPTER Bit */
;;;1067         FLASH->CR &= CR_OPTER_Reset;
000032  f64171df          MOV      r1,#0x1fdf
000036  2804              CMP      r0,#4                 ;1064
000038  d005              BEQ      |L22.70|
;;;1068         /* Enable the Option Bytes Programming operation */
;;;1069         FLASH->CR |= CR_OPTPG_Set; 
;;;1070         if(NewState != DISABLE)
;;;1071         {
;;;1072           OB->RDP = 0x00;
;;;1073         }
;;;1074         else
;;;1075         {
;;;1076           OB->RDP = RDP_Key;  
;;;1077         }
;;;1078         /* Wait for last operation to be completed */
;;;1079         status = FLASH_WaitForLastOperation(EraseTimeout); 
;;;1080       
;;;1081         if(status != FLASH_TIMEOUT)
;;;1082         {
;;;1083           /* if the program operation is completed, disable the OPTPG Bit */
;;;1084           FLASH->CR &= CR_OPTPG_Reset;
;;;1085         }
;;;1086       }
;;;1087       else 
;;;1088       {
;;;1089         if(status != FLASH_TIMEOUT)
00003a  2805              CMP      r0,#5
00003c  d002              BEQ      |L22.68|
;;;1090         {
;;;1091           /* Disable the OPTER Bit */
;;;1092           FLASH->CR &= CR_OPTER_Reset;
00003e  6922              LDR      r2,[r4,#0x10]
000040  400a              ANDS     r2,r2,r1
000042  6122              STR      r2,[r4,#0x10]
                  |L22.68|
;;;1093         }
;;;1094       }
;;;1095     }
;;;1096     /* Return the protection operation Status */
;;;1097     return status;       
;;;1098   }
000044  bd70              POP      {r4-r6,pc}
                  |L22.70|
000046  6920              LDR      r0,[r4,#0x10]         ;1067
000048  4008              ANDS     r0,r0,r1              ;1067
00004a  6120              STR      r0,[r4,#0x10]         ;1067
00004c  6920              LDR      r0,[r4,#0x10]         ;1069
00004e  f0400010          ORR      r0,r0,#0x10           ;1069
000052  6120              STR      r0,[r4,#0x10]         ;1069
000054  480b              LDR      r0,|L22.132|
000056  b10e              CBZ      r6,|L22.92|
000058  2100              MOVS     r1,#0                 ;1072
00005a  e000              B        |L22.94|
                  |L22.92|
00005c  21a5              MOVS     r1,#0xa5              ;1076
                  |L22.94|
00005e  8001              STRH     r1,[r0,#0]            ;1076
000060  4628              MOV      r0,r5                 ;1079
000062  f7fffffe          BL       FLASH_WaitForLastOperation
000066  2805              CMP      r0,#5                 ;1081
000068  d0ec              BEQ      |L22.68|
00006a  6921              LDR      r1,[r4,#0x10]         ;1084
00006c  f64172ef          MOV      r2,#0x1fef            ;1084
000070  4011              ANDS     r1,r1,r2              ;1084
000072  6121              STR      r1,[r4,#0x10]         ;1084
000074  bd70              POP      {r4-r6,pc}
;;;1099   
                          ENDP

000076  0000              DCW      0x0000
                  |L22.120|
                          DCD      0x45670123
                  |L22.124|
                          DCD      0x40022000
                  |L22.128|
                          DCD      0xcdef89ab
                  |L22.132|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_SetLatency||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;253      */
;;;254    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4a03              LDR      r2,|L23.16|
;;;255    {
;;;256      uint32_t tmpreg = 0;
;;;257      
;;;258      /* Check the parameters */
;;;259      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;260      
;;;261      /* Read the ACR register */
;;;262      tmpreg = FLASH->ACR;  
000002  6811              LDR      r1,[r2,#0]
;;;263      
;;;264      /* Sets the Latency value */
;;;265      tmpreg &= ACR_LATENCY_Mask;
000004  f0010138          AND      r1,r1,#0x38
;;;266      tmpreg |= FLASH_Latency;
000008  4301              ORRS     r1,r1,r0
;;;267      
;;;268      /* Write the ACR register */
;;;269      FLASH->ACR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;270    }
00000c  4770              BX       lr
;;;271    
                          ENDP

00000e  0000              DCW      0x0000
                  |L23.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_Unlock PROC
;;;318      */
;;;319    void FLASH_Unlock(void)
000000  4803              LDR      r0,|L24.16|
;;;320    {
;;;321      /* Authorize the FPEC of Bank1 Access */
;;;322      FLASH->KEYR = FLASH_KEY1;
000002  4902              LDR      r1,|L24.12|
000004  6041              STR      r1,[r0,#4]
;;;323      FLASH->KEYR = FLASH_KEY2;
000006  4903              LDR      r1,|L24.20|
000008  6041              STR      r1,[r0,#4]
;;;324    
;;;325    #ifdef STM32F10X_XL
;;;326      /* Authorize the FPEC of Bank2 Access */
;;;327      FLASH->KEYR2 = FLASH_KEY1;
;;;328      FLASH->KEYR2 = FLASH_KEY2;
;;;329    #endif /* STM32F10X_XL */
;;;330    }
00000a  4770              BX       lr
;;;331    /**
                          ENDP

                  |L24.12|
                          DCD      0x45670123
                  |L24.16|
                          DCD      0x40022000
                  |L24.20|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_UnlockBank1||, CODE, READONLY, ALIGN=2

                  FLASH_UnlockBank1 PROC
;;;339      */
;;;340    void FLASH_UnlockBank1(void)
000000  4803              LDR      r0,|L25.16|
;;;341    {
;;;342      /* Authorize the FPEC of Bank1 Access */
;;;343      FLASH->KEYR = FLASH_KEY1;
000002  4902              LDR      r1,|L25.12|
000004  6041              STR      r1,[r0,#4]
;;;344      FLASH->KEYR = FLASH_KEY2;
000006  4903              LDR      r1,|L25.20|
000008  6041              STR      r1,[r0,#4]
;;;345    }
00000a  4770              BX       lr
;;;346    
                          ENDP

                  |L25.12|
                          DCD      0x45670123
                  |L25.16|
                          DCD      0x40022000
                  |L25.20|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_UserOptionByteConfig||, CODE, READONLY, ALIGN=2

                  FLASH_UserOptionByteConfig PROC
;;;1117     */
;;;1118   FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1119   {
;;;1120     FLASH_Status status = FLASH_COMPLETE; 
;;;1121   
;;;1122     /* Check the parameters */
;;;1123     assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;1124     assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;1125     assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;1126   
;;;1127     /* Authorize the small information block programming */
;;;1128     FLASH->OPTKEYR = FLASH_KEY1;
000004  4c13              LDR      r4,|L26.84|
000006  4607              MOV      r7,r0                 ;1119
000008  4811              LDR      r0,|L26.80|
00000a  4616              MOV      r6,r2                 ;1119
00000c  460d              MOV      r5,r1                 ;1119
00000e  60a0              STR      r0,[r4,#8]
;;;1129     FLASH->OPTKEYR = FLASH_KEY2;
000010  4811              LDR      r0,|L26.88|
000012  60a0              STR      r0,[r4,#8]
;;;1130     
;;;1131     /* Wait for last operation to be completed */
;;;1132     status = FLASH_WaitForLastOperation(ProgramTimeout);
000014  f44f5800          MOV      r8,#0x2000
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1133     
;;;1134     if(status == FLASH_COMPLETE)
00001e  2804              CMP      r0,#4
000020  d113              BNE      |L26.74|
;;;1135     {  
;;;1136       /* Enable the Option Bytes Programming operation */
;;;1137       FLASH->CR |= CR_OPTPG_Set; 
000022  6920              LDR      r0,[r4,#0x10]
000024  f0400010          ORR      r0,r0,#0x10
000028  6120              STR      r0,[r4,#0x10]
;;;1138              
;;;1139       OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
00002a  4335              ORRS     r5,r5,r6
00002c  490b              LDR      r1,|L26.92|
00002e  433d              ORRS     r5,r5,r7
000030  f04500f8          ORR      r0,r5,#0xf8
000034  8008              STRH     r0,[r1,#0]
;;;1140     
;;;1141       /* Wait for last operation to be completed */
;;;1142       status = FLASH_WaitForLastOperation(ProgramTimeout);
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1143       if(status != FLASH_TIMEOUT)
00003c  2805              CMP      r0,#5
00003e  d004              BEQ      |L26.74|
;;;1144       {
;;;1145         /* if the program operation is completed, disable the OPTPG Bit */
;;;1146         FLASH->CR &= CR_OPTPG_Reset;
000040  6921              LDR      r1,[r4,#0x10]
000042  f64172ef          MOV      r2,#0x1fef
000046  4011              ANDS     r1,r1,r2
000048  6121              STR      r1,[r4,#0x10]
                  |L26.74|
;;;1147       }
;;;1148     }    
;;;1149     /* Return the Option Byte program Status */
;;;1150     return status;
;;;1151   }
00004a  e8bd81f0          POP      {r4-r8,pc}
;;;1152   
                          ENDP

00004e  0000              DCW      0x0000
                  |L26.80|
                          DCD      0x45670123
                  |L26.84|
                          DCD      0x40022000
                  |L26.88|
                          DCD      0xcdef89ab
                  |L26.92|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_WaitForLastBank1Operation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastBank1Operation PROC
;;;1622     */
;;;1623   FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
000000  b500              PUSH     {lr}
;;;1624   { 
000002  4603              MOV      r3,r0
;;;1625     FLASH_Status status = FLASH_COMPLETE;
;;;1626      
;;;1627     /* Check for the Flash Status */
;;;1628     status = FLASH_GetBank1Status();
000004  f7fffffe          BL       FLASH_GetBank1Status
;;;1629     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1630     while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
000008  e003              B        |L27.18|
;;;1631     {
;;;1632       status = FLASH_GetBank1Status();
00000a  bf00              NOP      
                  |L27.12|
00000c  f7fffffe          BL       FLASH_GetBank1Status
000010  1e5b              SUBS     r3,r3,#1
                  |L27.18|
000012  2801              CMP      r0,#1                 ;1630
000014  d003              BEQ      |L27.30|
;;;1633       Timeout--;
;;;1634     }
;;;1635     if(Timeout == 0x00 )
000016  2b00              CMP      r3,#0
000018  d100              BNE      |L27.28|
                  |L27.26|
;;;1636     {
;;;1637       status = FLASH_TIMEOUT;
00001a  2005              MOVS     r0,#5
                  |L27.28|
;;;1638     }
;;;1639     /* Return the operation status */
;;;1640     return status;
;;;1641   }
00001c  bd00              POP      {pc}
                  |L27.30|
00001e  2b00              CMP      r3,#0                 ;1630
000020  d1f4              BNE      |L27.12|
000022  e7fa              B        |L27.26|
;;;1642   
                          ENDP


                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;1594     */
;;;1595   FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b500              PUSH     {lr}
;;;1596   { 
000002  4603              MOV      r3,r0
;;;1597     FLASH_Status status = FLASH_COMPLETE;
;;;1598      
;;;1599     /* Check for the Flash Status */
;;;1600     status = FLASH_GetBank1Status();
000004  f7fffffe          BL       FLASH_GetBank1Status
;;;1601     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1602     while((status == FLASH_BUSY) && (Timeout != 0x00))
000008  e003              B        |L28.18|
;;;1603     {
;;;1604       status = FLASH_GetBank1Status();
00000a  bf00              NOP      
                  |L28.12|
00000c  f7fffffe          BL       FLASH_GetBank1Status
000010  1e5b              SUBS     r3,r3,#1
                  |L28.18|
000012  2801              CMP      r0,#1                 ;1602
000014  d003              BEQ      |L28.30|
;;;1605       Timeout--;
;;;1606     }
;;;1607     if(Timeout == 0x00 )
000016  2b00              CMP      r3,#0
000018  d100              BNE      |L28.28|
                  |L28.26|
;;;1608     {
;;;1609       status = FLASH_TIMEOUT;
00001a  2005              MOVS     r0,#5
                  |L28.28|
;;;1610     }
;;;1611     /* Return the operation status */
;;;1612     return status;
;;;1613   }
00001c  bd00              POP      {pc}
                  |L28.30|
00001e  2b00              CMP      r3,#0                 ;1602
000020  d1f4              BNE      |L28.12|
000022  e7fa              B        |L28.26|
;;;1614   
                          ENDP

