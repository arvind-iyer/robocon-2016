; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_dma.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\FWlib\inc -I.\user -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=516 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_dma.crf FWlib\SRC\stm32f10x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;522      */
;;;523    void DMA_ClearFlag(uint32_t DMAy_FLAG)
000000  00c1              LSLS     r1,r0,#3
;;;524    {
000002  d502              BPL      |L1.10|
;;;525      /* Check the parameters */
;;;526      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
;;;527    
;;;528      /* Calculate the used DMAy */
;;;529      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
;;;530      {
;;;531        /* Clear the selected DMAy flags */
;;;532        DMA2->IFCR = DMAy_FLAG;
000004  4902              LDR      r1,|L1.16|
000006  6008              STR      r0,[r1,#0]
;;;533      }
;;;534      else
;;;535      {
;;;536        /* Clear the selected DMAy flags */
;;;537        DMA1->IFCR = DMAy_FLAG;
;;;538      }
;;;539    }
000008  4770              BX       lr
                  |L1.10|
00000a  4902              LDR      r1,|L1.20|
00000c  6048              STR      r0,[r1,#4]            ;537
00000e  4770              BX       lr
;;;540    
                          ENDP

                  |L1.16|
                          DCD      0x40020404
                  |L1.20|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;683      */
;;;684    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
000000  00c1              LSLS     r1,r0,#3
;;;685    {
000002  d502              BPL      |L2.10|
;;;686      /* Check the parameters */
;;;687      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
;;;688    
;;;689      /* Calculate the used DMAy */
;;;690      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
;;;691      {
;;;692        /* Clear the selected DMAy interrupt pending bits */
;;;693        DMA2->IFCR = DMAy_IT;
000004  4902              LDR      r1,|L2.16|
000006  6008              STR      r0,[r1,#0]
;;;694      }
;;;695      else
;;;696      {
;;;697        /* Clear the selected DMAy interrupt pending bits */
;;;698        DMA1->IFCR = DMAy_IT;
;;;699      }
;;;700    }
000008  4770              BX       lr
                  |L2.10|
00000a  4902              LDR      r1,|L2.20|
00000c  6048              STR      r0,[r1,#4]            ;698
00000e  4770              BX       lr
;;;701    
                          ENDP

                  |L2.16|
                          DCD      0x40020404
                  |L2.20|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;293      */
;;;294    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;295    {
;;;296      /* Check the parameters */
;;;297      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;298      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;299    
;;;300      if (NewState != DISABLE)
;;;301      {
;;;302        /* Enable the selected DMAy Channelx */
;;;303        DMAy_Channelx->CCR |= DMA_CCR1_EN;
;;;304      }
;;;305      else
;;;306      {
;;;307        /* Disable the selected DMAy Channelx */
;;;308        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410101          ORR      r1,r1,#1              ;303
00000a  e002              B        |L3.18|
                  |L3.12|
00000c  f64f72fe          MOV      r2,#0xfffe
000010  4011              ANDS     r1,r1,r2
                  |L3.18|
000012  6001              STR      r1,[r0,#0]            ;303
;;;309      }
;;;310    }
000014  4770              BX       lr
;;;311    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;107      */
;;;108    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;109    {
;;;110      /* Check the parameters */
;;;111      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;112      
;;;113      /* Disable the selected DMAy Channelx */
;;;114      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
000002  f64f72fe          MOV      r2,#0xfffe
000006  4011              ANDS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;115      
;;;116      /* Reset DMAy Channelx control register */
;;;117      DMAy_Channelx->CCR  = 0;
00000a  2100              MOVS     r1,#0
00000c  6001              STR      r1,[r0,#0]
;;;118      
;;;119      /* Reset DMAy Channelx remaining bytes register */
;;;120      DMAy_Channelx->CNDTR = 0;
00000e  6041              STR      r1,[r0,#4]
;;;121      
;;;122      /* Reset DMAy Channelx peripheral address register */
;;;123      DMAy_Channelx->CPAR  = 0;
000010  6081              STR      r1,[r0,#8]
;;;124      
;;;125      /* Reset DMAy Channelx memory address register */
;;;126      DMAy_Channelx->CMAR = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;127      
;;;128      if (DMAy_Channelx == DMA1_Channel1)
;;;129      {
;;;130        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;131        DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000014  4931              LDR      r1,|L4.220|
000016  4a31              LDR      r2,|L4.220|
000018  3908              SUBS     r1,r1,#8
00001a  4290              CMP      r0,r2                 ;128
00001c  d103              BNE      |L4.38|
00001e  6848              LDR      r0,[r1,#4]
000020  f040000f          ORR      r0,r0,#0xf
000024  e006              B        |L4.52|
                  |L4.38|
;;;132      }
;;;133      else if (DMAy_Channelx == DMA1_Channel2)
000026  4a2d              LDR      r2,|L4.220|
000028  3214              ADDS     r2,r2,#0x14
00002a  4290              CMP      r0,r2
00002c  d104              BNE      |L4.56|
;;;134      {
;;;135        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;136        DMA1->IFCR |= DMA1_Channel2_IT_Mask;
00002e  6848              LDR      r0,[r1,#4]
000030  f04000f0          ORR      r0,r0,#0xf0
                  |L4.52|
000034  6048              STR      r0,[r1,#4]            ;131
;;;137      }
;;;138      else if (DMAy_Channelx == DMA1_Channel3)
;;;139      {
;;;140        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;141        DMA1->IFCR |= DMA1_Channel3_IT_Mask;
;;;142      }
;;;143      else if (DMAy_Channelx == DMA1_Channel4)
;;;144      {
;;;145        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;146        DMA1->IFCR |= DMA1_Channel4_IT_Mask;
;;;147      }
;;;148      else if (DMAy_Channelx == DMA1_Channel5)
;;;149      {
;;;150        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;151        DMA1->IFCR |= DMA1_Channel5_IT_Mask;
;;;152      }
;;;153      else if (DMAy_Channelx == DMA1_Channel6)
;;;154      {
;;;155        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;156        DMA1->IFCR |= DMA1_Channel6_IT_Mask;
;;;157      }
;;;158      else if (DMAy_Channelx == DMA1_Channel7)
;;;159      {
;;;160        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;161        DMA1->IFCR |= DMA1_Channel7_IT_Mask;
;;;162      }
;;;163      else if (DMAy_Channelx == DMA2_Channel1)
;;;164      {
;;;165        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;166        DMA2->IFCR |= DMA2_Channel1_IT_Mask;
;;;167      }
;;;168      else if (DMAy_Channelx == DMA2_Channel2)
;;;169      {
;;;170        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;171        DMA2->IFCR |= DMA2_Channel2_IT_Mask;
;;;172      }
;;;173      else if (DMAy_Channelx == DMA2_Channel3)
;;;174      {
;;;175        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;176        DMA2->IFCR |= DMA2_Channel3_IT_Mask;
;;;177      }
;;;178      else if (DMAy_Channelx == DMA2_Channel4)
;;;179      {
;;;180        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;181        DMA2->IFCR |= DMA2_Channel4_IT_Mask;
;;;182      }
;;;183      else
;;;184      { 
;;;185        if (DMAy_Channelx == DMA2_Channel5)
;;;186        {
;;;187          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;188          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
;;;189        }
;;;190      }
;;;191    }
000036  4770              BX       lr
                  |L4.56|
000038  4a28              LDR      r2,|L4.220|
00003a  3228              ADDS     r2,r2,#0x28           ;138
00003c  4290              CMP      r0,r2                 ;138
00003e  d103              BNE      |L4.72|
000040  6848              LDR      r0,[r1,#4]            ;141
000042  f4406070          ORR      r0,r0,#0xf00          ;141
000046  e7f5              B        |L4.52|
                  |L4.72|
000048  4a24              LDR      r2,|L4.220|
00004a  323c              ADDS     r2,r2,#0x3c           ;143
00004c  4290              CMP      r0,r2                 ;143
00004e  d103              BNE      |L4.88|
000050  6848              LDR      r0,[r1,#4]            ;146
000052  f4404070          ORR      r0,r0,#0xf000         ;146
000056  e7ed              B        |L4.52|
                  |L4.88|
000058  4a20              LDR      r2,|L4.220|
00005a  3250              ADDS     r2,r2,#0x50           ;148
00005c  4290              CMP      r0,r2                 ;148
00005e  d103              BNE      |L4.104|
000060  6848              LDR      r0,[r1,#4]            ;151
000062  f4402070          ORR      r0,r0,#0xf0000        ;151
000066  e7e5              B        |L4.52|
                  |L4.104|
000068  4a1c              LDR      r2,|L4.220|
00006a  3264              ADDS     r2,r2,#0x64           ;153
00006c  4290              CMP      r0,r2                 ;153
00006e  d103              BNE      |L4.120|
000070  6848              LDR      r0,[r1,#4]            ;156
000072  f4400070          ORR      r0,r0,#0xf00000       ;156
000076  e7dd              B        |L4.52|
                  |L4.120|
000078  4a18              LDR      r2,|L4.220|
00007a  3278              ADDS     r2,r2,#0x78           ;158
00007c  4290              CMP      r0,r2                 ;158
00007e  d103              BNE      |L4.136|
000080  6848              LDR      r0,[r1,#4]            ;161
000082  f0406070          ORR      r0,r0,#0xf000000      ;161
000086  e7d5              B        |L4.52|
                  |L4.136|
000088  4a15              LDR      r2,|L4.224|
00008a  1f11              SUBS     r1,r2,#4              ;166
00008c  4290              CMP      r0,r2                 ;163
00008e  d103              BNE      |L4.152|
000090  6808              LDR      r0,[r1,#0]            ;166
000092  f040000f          ORR      r0,r0,#0xf            ;166
000096  e006              B        |L4.166|
                  |L4.152|
000098  4a11              LDR      r2,|L4.224|
00009a  3214              ADDS     r2,r2,#0x14           ;168
00009c  4290              CMP      r0,r2                 ;168
00009e  d104              BNE      |L4.170|
0000a0  6808              LDR      r0,[r1,#0]            ;171
0000a2  f04000f0          ORR      r0,r0,#0xf0           ;171
                  |L4.166|
0000a6  6008              STR      r0,[r1,#0]            ;166
                  |L4.168|
0000a8  4770              BX       lr
                  |L4.170|
0000aa  4a0d              LDR      r2,|L4.224|
0000ac  3228              ADDS     r2,r2,#0x28           ;173
0000ae  4290              CMP      r0,r2                 ;173
0000b0  d103              BNE      |L4.186|
0000b2  6808              LDR      r0,[r1,#0]            ;176
0000b4  f4406070          ORR      r0,r0,#0xf00          ;176
0000b8  e7f5              B        |L4.166|
                  |L4.186|
0000ba  4a09              LDR      r2,|L4.224|
0000bc  323c              ADDS     r2,r2,#0x3c           ;178
0000be  4290              CMP      r0,r2                 ;178
0000c0  d103              BNE      |L4.202|
0000c2  6808              LDR      r0,[r1,#0]            ;181
0000c4  f4404070          ORR      r0,r0,#0xf000         ;181
0000c8  e7ed              B        |L4.166|
                  |L4.202|
0000ca  4a05              LDR      r2,|L4.224|
0000cc  3250              ADDS     r2,r2,#0x50           ;185
0000ce  4290              CMP      r0,r2                 ;185
0000d0  d1ea              BNE      |L4.168|
0000d2  6808              LDR      r0,[r1,#0]            ;188
0000d4  f4402070          ORR      r0,r0,#0xf0000        ;188
0000d8  e7e5              B        |L4.166|
;;;192    
                          ENDP

0000da  0000              DCW      0x0000
                  |L4.220|
                          DCD      0x40020008
                  |L4.224|
                          DCD      0x40020408

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;370      */
;;;371    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6840              LDR      r0,[r0,#4]
;;;372    {
;;;373      /* Check the parameters */
;;;374      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;375      /* Return the number of remaining data units for DMAy Channelx */
;;;376      return ((uint16_t)(DMAy_Channelx->CNDTR));
000002  b280              UXTH     r0,r0
;;;377    }
000004  4770              BX       lr
;;;378    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;432      */
;;;433    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
000000  4601              MOV      r1,r0
;;;434    {
;;;435      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
000004  00ca              LSLS     r2,r1,#3
000006  d501              BPL      |L6.12|
;;;436      uint32_t tmpreg = 0;
;;;437      
;;;438      /* Check the parameters */
;;;439      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
;;;440    
;;;441      /* Calculate the used DMAy */
;;;442      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
;;;443      {
;;;444        /* Get DMA2 ISR register value */
;;;445        tmpreg = DMA2->ISR ;
000008  4a03              LDR      r2,|L6.24|
00000a  e000              B        |L6.14|
                  |L6.12|
;;;446      }
;;;447      else
;;;448      {
;;;449        /* Get DMA1 ISR register value */
;;;450        tmpreg = DMA1->ISR ;
00000c  4a03              LDR      r2,|L6.28|
                  |L6.14|
00000e  6812              LDR      r2,[r2,#0]
;;;451      }
;;;452    
;;;453      /* Check the status of the specified DMAy flag */
;;;454      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
000010  420a              TST      r2,r1
000012  d000              BEQ      |L6.22|
;;;455      {
;;;456        /* DMAy_FLAG is set */
;;;457        bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L6.22|
;;;458      }
;;;459      else
;;;460      {
;;;461        /* DMAy_FLAG is reset */
;;;462        bitstatus = RESET;
;;;463      }
;;;464      
;;;465      /* Return the DMAy_FLAG status */
;;;466      return  bitstatus;
;;;467    }
000016  4770              BX       lr
;;;468    
                          ENDP

                  |L6.24|
                          DCD      0x40020400
                  |L6.28|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;594      */
;;;595    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000000  4601              MOV      r1,r0
;;;596    {
;;;597      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
000004  00ca              LSLS     r2,r1,#3
000006  d501              BPL      |L7.12|
;;;598      uint32_t tmpreg = 0;
;;;599    
;;;600      /* Check the parameters */
;;;601      assert_param(IS_DMA_GET_IT(DMAy_IT));
;;;602    
;;;603      /* Calculate the used DMA */
;;;604      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
;;;605      {
;;;606        /* Get DMA2 ISR register value */
;;;607        tmpreg = DMA2->ISR;
000008  4a03              LDR      r2,|L7.24|
00000a  e000              B        |L7.14|
                  |L7.12|
;;;608      }
;;;609      else
;;;610      {
;;;611        /* Get DMA1 ISR register value */
;;;612        tmpreg = DMA1->ISR;
00000c  4a03              LDR      r2,|L7.28|
                  |L7.14|
00000e  6812              LDR      r2,[r2,#0]
;;;613      }
;;;614    
;;;615      /* Check the status of the specified DMAy interrupt */
;;;616      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
000010  420a              TST      r2,r1
000012  d000              BEQ      |L7.22|
;;;617      {
;;;618        /* DMAy_IT is set */
;;;619        bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L7.22|
;;;620      }
;;;621      else
;;;622      {
;;;623        /* DMAy_IT is reset */
;;;624        bitstatus = RESET;
;;;625      }
;;;626      /* Return the DMA_IT status */
;;;627      return  bitstatus;
;;;628    }
000016  4770              BX       lr
;;;629    
                          ENDP

                  |L7.24|
                          DCD      0x40020400
                  |L7.28|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;325      */
;;;326    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;327    {
;;;328      /* Check the parameters */
;;;329      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;330      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;331      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;332      if (NewState != DISABLE)
;;;333      {
;;;334        /* Enable the selected DMA interrupts */
;;;335        DMAy_Channelx->CCR |= DMA_IT;
;;;336      }
;;;337      else
;;;338      {
;;;339        /* Disable the selected DMA interrupts */
;;;340        DMAy_Channelx->CCR &= ~DMA_IT;
000002  6802              LDR      r2,[r0,#0]
000004  d001              BEQ      |L8.10|
000006  430a              ORRS     r2,r2,r1              ;335
000008  e000              B        |L8.12|
                  |L8.10|
00000a  438a              BICS     r2,r2,r1
                  |L8.12|
00000c  6002              STR      r2,[r0,#0]            ;335
;;;341      }
;;;342    }
00000e  4770              BX       lr
;;;343    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=1

                  DMA_Init PROC
;;;201      */
;;;202    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;203    {
;;;204      uint32_t tmpreg = 0;
;;;205    
;;;206      /* Check the parameters */
;;;207      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;208      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;209      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;210      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;211      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;212      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;213      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;214      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;215      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;216      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;217    
;;;218    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;219      /* Get the DMAy_Channelx CCR value */
;;;220      tmpreg = DMAy_Channelx->CCR;
000002  6803              LDR      r3,[r0,#0]
;;;221      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;222      tmpreg &= CCR_CLEAR_Mask;
000004  f64772f0          MOV      r2,#0x7ff0
000008  4393              BICS     r3,r3,r2
;;;223      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;224      /* Set DIR bit according to DMA_DIR value */
;;;225      /* Set CIRC bit according to DMA_Mode value */
;;;226      /* Set PINC bit according to DMA_PeripheralInc value */
;;;227      /* Set MINC bit according to DMA_MemoryInc value */
;;;228      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;229      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;230      /* Set PL bits according to DMA_Priority value */
;;;231      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;232      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00000a  6a0c              LDR      r4,[r1,#0x20]
00000c  688a              LDR      r2,[r1,#8]
00000e  4322              ORRS     r2,r2,r4
000010  e9d14504          LDRD     r4,r5,[r1,#0x10]
000014  432c              ORRS     r4,r4,r5
000016  4322              ORRS     r2,r2,r4
000018  698c              LDR      r4,[r1,#0x18]
00001a  4322              ORRS     r2,r2,r4
00001c  69cc              LDR      r4,[r1,#0x1c]
00001e  4322              ORRS     r2,r2,r4
000020  6a4c              LDR      r4,[r1,#0x24]
000022  4322              ORRS     r2,r2,r4
000024  6a8c              LDR      r4,[r1,#0x28]
000026  4322              ORRS     r2,r2,r4
000028  431a              ORRS     r2,r2,r3
;;;233                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;234                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;235                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;236    
;;;237      /* Write to DMAy Channelx CCR */
;;;238      DMAy_Channelx->CCR = tmpreg;
00002a  6002              STR      r2,[r0,#0]
;;;239    
;;;240    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;241      /* Write to DMAy Channelx CNDTR */
;;;242      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00002c  68ca              LDR      r2,[r1,#0xc]
00002e  6042              STR      r2,[r0,#4]
;;;243    
;;;244    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;245      /* Write to DMAy Channelx CPAR */
;;;246      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000030  680a              LDR      r2,[r1,#0]
000032  6082              STR      r2,[r0,#8]
;;;247    
;;;248    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;249      /* Write to DMAy Channelx CMAR */
;;;250      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000034  6849              LDR      r1,[r1,#4]
000036  60c1              STR      r1,[r0,#0xc]
;;;251    }
000038  bd30              POP      {r4,r5,pc}
;;;252    
                          ENDP


                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_SetCurrDataCounter PROC
;;;352      */
;;;353    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
000000  6041              STR      r1,[r0,#4]
;;;354    {
;;;355      /* Check the parameters */
;;;356      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;357      
;;;358    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;359      /* Write to DMAy Channelx CNDTR */
;;;360      DMAy_Channelx->CNDTR = DataNumber;  
;;;361    }
000002  4770              BX       lr
;;;362    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;258      */
;;;259    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;260    {
;;;261    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;262      /* Initialize the DMA_PeripheralBaseAddr member */
;;;263      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
;;;264      /* Initialize the DMA_MemoryBaseAddr member */
;;;265      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;266      /* Initialize the DMA_DIR member */
;;;267      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000004  6041              STR      r1,[r0,#4]
;;;268      /* Initialize the DMA_BufferSize member */
;;;269      DMA_InitStruct->DMA_BufferSize = 0;
000006  6081              STR      r1,[r0,#8]
;;;270      /* Initialize the DMA_PeripheralInc member */
;;;271      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000008  60c1              STR      r1,[r0,#0xc]
;;;272      /* Initialize the DMA_MemoryInc member */
;;;273      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;274      /* Initialize the DMA_PeripheralDataSize member */
;;;275      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000c  6141              STR      r1,[r0,#0x14]
;;;276      /* Initialize the DMA_MemoryDataSize member */
;;;277      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;278      /* Initialize the DMA_Mode member */
;;;279      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000010  61c1              STR      r1,[r0,#0x1c]
;;;280      /* Initialize the DMA_Priority member */
;;;281      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000012  6201              STR      r1,[r0,#0x20]
;;;282      /* Initialize the DMA_M2M member */
;;;283      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000014  6241              STR      r1,[r0,#0x24]
000016  6281              STR      r1,[r0,#0x28]
;;;284    }
000018  4770              BX       lr
;;;285    
                          ENDP

