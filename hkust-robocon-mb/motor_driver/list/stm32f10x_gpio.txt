; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_gpio.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\FWlib\inc -I.\user -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=516 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_gpio.crf FWlib\SRC\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;158      */
;;;159    void GPIO_AFIODeInit(void)
000000  b510              PUSH     {r4,lr}
;;;160    {
;;;161      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;162      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  e8bd4010          POP      {r4,lr}
000010  2001              MOVS     r0,#1
000012  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;163    }
;;;164    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;107      */
;;;108    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  4925              LDR      r1,|L2.152|
;;;109    {
000002  b510              PUSH     {r4,lr}
;;;110      /* Check the parameters */
;;;111      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;112      
;;;113      if (GPIOx == GPIOA)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L2.22|
;;;114      {
;;;115        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2004              MOVS     r0,#4
00000c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;116        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
000010  2100              MOVS     r1,#0
000012  2004              MOVS     r0,#4
000014  e03b              B        |L2.142|
                  |L2.22|
;;;117      }
;;;118      else if (GPIOx == GPIOB)
000016  4921              LDR      r1,|L2.156|
000018  4288              CMP      r0,r1
00001a  d106              BNE      |L2.42|
;;;119      {
;;;120        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  2008              MOVS     r0,#8
000020  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;121        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
000024  2100              MOVS     r1,#0
000026  2008              MOVS     r0,#8
000028  e031              B        |L2.142|
                  |L2.42|
;;;122      }
;;;123      else if (GPIOx == GPIOC)
00002a  491d              LDR      r1,|L2.160|
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L2.62|
;;;124      {
;;;125        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
000030  2101              MOVS     r1,#1
000032  2010              MOVS     r0,#0x10
000034  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;126        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000038  2100              MOVS     r1,#0
00003a  2010              MOVS     r0,#0x10
00003c  e027              B        |L2.142|
                  |L2.62|
;;;127      }
;;;128      else if (GPIOx == GPIOD)
00003e  4919              LDR      r1,|L2.164|
000040  4288              CMP      r0,r1
000042  d106              BNE      |L2.82|
;;;129      {
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
000044  2101              MOVS     r1,#1
000046  2020              MOVS     r0,#0x20
000048  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;131        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
00004c  2100              MOVS     r1,#0
00004e  2020              MOVS     r0,#0x20
000050  e01d              B        |L2.142|
                  |L2.82|
;;;132      }    
;;;133      else if (GPIOx == GPIOE)
000052  4915              LDR      r1,|L2.168|
000054  4288              CMP      r0,r1
000056  d106              BNE      |L2.102|
;;;134      {
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
000058  2101              MOVS     r1,#1
00005a  2040              MOVS     r0,#0x40
00005c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;136        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
000060  2100              MOVS     r1,#0
000062  2040              MOVS     r0,#0x40
000064  e013              B        |L2.142|
                  |L2.102|
;;;137      } 
;;;138      else if (GPIOx == GPIOF)
000066  4911              LDR      r1,|L2.172|
000068  4288              CMP      r0,r1
00006a  d106              BNE      |L2.122|
;;;139      {
;;;140        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2080              MOVS     r0,#0x80
000070  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;141        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
000074  2100              MOVS     r1,#0
000076  2080              MOVS     r0,#0x80
000078  e009              B        |L2.142|
                  |L2.122|
;;;142      }
;;;143      else
;;;144      {
;;;145        if (GPIOx == GPIOG)
00007a  490d              LDR      r1,|L2.176|
00007c  4288              CMP      r0,r1
00007e  d10a              BNE      |L2.150|
;;;146        {
;;;147          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
000080  1584              ASRS     r4,r0,#22
000082  2101              MOVS     r1,#1
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;148          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  4620              MOV      r0,r4
                  |L2.142|
00008e  e8bd4010          POP      {r4,lr}
000092  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L2.150|
;;;149        }
;;;150      }
;;;151    }
000096  bd10              POP      {r4,pc}
;;;152    
                          ENDP

                  |L2.152|
                          DCD      0x40010800
                  |L2.156|
                          DCD      0x40010c00
                  |L2.160|
                          DCD      0x40011000
                  |L2.164|
                          DCD      0x40011400
                  |L2.168|
                          DCD      0x40011800
                  |L2.172|
                          DCD      0x40011c00
                  |L2.176|
                          DCD      0x40012000

                          AREA ||i.GPIO_ETH_MediaInterfaceConfig||, CODE, READONLY, ALIGN=2

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;629      */
;;;630    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000000  4901              LDR      r1,|L3.8|
;;;631    { 
;;;632      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
;;;633    
;;;634      /* Configure MII_RMII selection bit */ 
;;;635      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
000002  f8c100dc          STR      r0,[r1,#0xdc]
;;;636    }
000006  4770              BX       lr
;;;637      
                          ENDP

                  |L3.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EXTILineConfig PROC
;;;608      */
;;;609    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  b510              PUSH     {r4,lr}
;;;610    {
;;;611      uint32_t tmp = 0x00;
;;;612      /* Check the parameters */
;;;613      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;614      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;615      
;;;616      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000002  078a              LSLS     r2,r1,#30
;;;617      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
000004  f0210403          BIC      r4,r1,#3
000008  4906              LDR      r1,|L4.36|
00000a  0f13              LSRS     r3,r2,#28             ;616
00000c  4421              ADD      r1,r1,r4
00000e  220f              MOVS     r2,#0xf               ;616
000010  688c              LDR      r4,[r1,#8]
000012  409a              LSLS     r2,r2,r3              ;616
000014  4394              BICS     r4,r4,r2
000016  608c              STR      r4,[r1,#8]
;;;618      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
000018  688a              LDR      r2,[r1,#8]
00001a  4098              LSLS     r0,r0,r3
00001c  4302              ORRS     r2,r2,r0
00001e  608a              STR      r2,[r1,#8]
;;;619    }
000020  bd10              POP      {r4,pc}
;;;620    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      0x40010000

                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;482      */
;;;483    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L5.8|
;;;484    {
;;;485      /* Check the parameters */
;;;486      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;487      
;;;488      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
000002  61c8              STR      r0,[r1,#0x1c]
;;;489    }
000004  4770              BX       lr
;;;490    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;461      */
;;;462    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  4b05              LDR      r3,|L6.24|
;;;463    {
000002  b510              PUSH     {r4,lr}
;;;464      uint32_t tmpreg = 0x00;
;;;465      /* Check the parameters */
;;;466      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;467      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;468        
;;;469      tmpreg = AFIO->EVCR;
000004  681a              LDR      r2,[r3,#0]
;;;470      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;471      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000006  f64f7480          MOV      r4,#0xff80
00000a  4022              ANDS     r2,r2,r4
;;;472      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
00000c  ea421000          ORR      r0,r2,r0,LSL #4
;;;473      tmpreg |= GPIO_PinSource;
000010  4308              ORRS     r0,r0,r1
;;;474      AFIO->EVCR = tmpreg;
000012  6018              STR      r0,[r3,#0]
;;;475    }
000014  bd10              POP      {r4,pc}
;;;476    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;172      */
;;;173    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;174    {
;;;175      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
;;;176      uint32_t tmpreg = 0x00, pinmask = 0x00;
;;;177      /* Check the parameters */
;;;178      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;179      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;180      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;181      
;;;182    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;183      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
000002  78ca              LDRB     r2,[r1,#3]
000004  2500              MOVS     r5,#0                 ;175
000006  f002030f          AND      r3,r2,#0xf
;;;184      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
00000a  06d2              LSLS     r2,r2,#27
00000c  d501              BPL      |L7.18|
;;;185      { 
;;;186        /* Check the parameters */
;;;187        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;188        /* Output mode */
;;;189        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
00000e  788a              LDRB     r2,[r1,#2]
000010  4313              ORRS     r3,r3,r2
                  |L7.18|
;;;190      }
;;;191    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;192      /* Configure the eight low port pins */
;;;193      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
000012  780a              LDRB     r2,[r1,#0]
;;;194      {
;;;195        tmpreg = GPIOx->CRL;
;;;196        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;197        {
;;;198          pos = ((uint32_t)0x01) << pinpos;
;;;199          /* Get the port pins position */
;;;200          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;201          if (currentpin == pos)
;;;202          {
;;;203            pos = pinpos << 2;
;;;204            /* Clear the corresponding low control register bits */
;;;205            pinmask = ((uint32_t)0x0F) << pos;
000014  f04f0e0f          MOV      lr,#0xf
000018  f0120fff          TST      r2,#0xff              ;193
00001c  f04f0201          MOV      r2,#1                 ;198
000020  d01c              BEQ      |L7.92|
000022  6804              LDR      r4,[r0,#0]            ;195
                  |L7.36|
000024  880f              LDRH     r7,[r1,#0]            ;200
000026  fa02f605          LSL      r6,r2,r5              ;198
00002a  4037              ANDS     r7,r7,r6              ;200
00002c  42b7              CMP      r7,r6                 ;201
00002e  d111              BNE      |L7.84|
000030  ea4f0c85          LSL      r12,r5,#2             ;201
000034  fa0ef70c          LSL      r7,lr,r12
;;;206            tmpreg &= ~pinmask;
000038  ea240707          BIC      r7,r4,r7
;;;207            /* Write the mode configuration in the corresponding bits */
;;;208            tmpreg |= (currentmode << pos);
00003c  fa03f40c          LSL      r4,r3,r12
000040  433c              ORRS     r4,r4,r7
;;;209            /* Reset the corresponding ODR bit */
;;;210            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000042  78cf              LDRB     r7,[r1,#3]
000044  2f28              CMP      r7,#0x28
000046  d002              BEQ      |L7.78|
;;;211            {
;;;212              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
;;;213            }
;;;214            else
;;;215            {
;;;216              /* Set the corresponding ODR bit */
;;;217              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000048  2f48              CMP      r7,#0x48
00004a  d002              BEQ      |L7.82|
00004c  e002              B        |L7.84|
                  |L7.78|
00004e  6146              STR      r6,[r0,#0x14]         ;212
000050  e000              B        |L7.84|
                  |L7.82|
;;;218              {
;;;219                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
000052  6106              STR      r6,[r0,#0x10]
                  |L7.84|
000054  1c6d              ADDS     r5,r5,#1
000056  2d08              CMP      r5,#8                 ;196
000058  d3e4              BCC      |L7.36|
;;;220              }
;;;221            }
;;;222          }
;;;223        }
;;;224        GPIOx->CRL = tmpreg;
00005a  6004              STR      r4,[r0,#0]
                  |L7.92|
;;;225      }
;;;226    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;227      /* Configure the eight high port pins */
;;;228      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
00005c  880c              LDRH     r4,[r1,#0]
00005e  2cff              CMP      r4,#0xff
000060  d91e              BLS      |L7.160|
;;;229      {
;;;230        tmpreg = GPIOx->CRH;
000062  6844              LDR      r4,[r0,#4]
;;;231        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000064  f05f0600          MOVS.W   r6,#0
                  |L7.104|
;;;232        {
;;;233          pos = (((uint32_t)0x01) << (pinpos + 0x08));
000068  f1060708          ADD      r7,r6,#8
00006c  fa02f507          LSL      r5,r2,r7
;;;234          /* Get the port pins position */
;;;235          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
000070  880f              LDRH     r7,[r1,#0]
000072  402f              ANDS     r7,r7,r5
;;;236          if (currentpin == pos)
000074  42af              CMP      r7,r5
000076  d10f              BNE      |L7.152|
000078  ea4f0c86          LSL      r12,r6,#2
;;;237          {
;;;238            pos = pinpos << 2;
;;;239            /* Clear the corresponding high control register bits */
;;;240            pinmask = ((uint32_t)0x0F) << pos;
00007c  fa0ef70c          LSL      r7,lr,r12
;;;241            tmpreg &= ~pinmask;
000080  43bc              BICS     r4,r4,r7
;;;242            /* Write the mode configuration in the corresponding bits */
;;;243            tmpreg |= (currentmode << pos);
000082  fa03f70c          LSL      r7,r3,r12
000086  433c              ORRS     r4,r4,r7
;;;244            /* Reset the corresponding ODR bit */
;;;245            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000088  78cf              LDRB     r7,[r1,#3]
00008a  2f28              CMP      r7,#0x28
00008c  d100              BNE      |L7.144|
;;;246            {
;;;247              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
00008e  6145              STR      r5,[r0,#0x14]
                  |L7.144|
;;;248            }
;;;249            /* Set the corresponding ODR bit */
;;;250            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000090  78cf              LDRB     r7,[r1,#3]
000092  2f48              CMP      r7,#0x48
000094  d100              BNE      |L7.152|
;;;251            {
;;;252              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
000096  6105              STR      r5,[r0,#0x10]
                  |L7.152|
000098  1c76              ADDS     r6,r6,#1
00009a  2e08              CMP      r6,#8                 ;231
00009c  d3e4              BCC      |L7.104|
;;;253            }
;;;254          }
;;;255        }
;;;256        GPIOx->CRH = tmpreg;
00009e  6044              STR      r4,[r0,#4]
                  |L7.160|
;;;257      }
;;;258    }
0000a0  bdf0              POP      {r4-r7,pc}
;;;259    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;431      */
;;;432    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  f4413280          ORR      r2,r1,#0x10000
;;;433    {
;;;434      uint32_t tmp = 0x00010000;
;;;435      
;;;436      /* Check the parameters */
;;;437      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;438      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;439      
;;;440      tmp |= GPIO_Pin;
;;;441      /* Set LCKK bit */
;;;442      GPIOx->LCKR = tmp;
000004  6182              STR      r2,[r0,#0x18]
;;;443      /* Reset LCKK bit */
;;;444      GPIOx->LCKR =  GPIO_Pin;
000006  6181              STR      r1,[r0,#0x18]
;;;445      /* Set LCKK bit */
;;;446      GPIOx->LCKR = tmp;
000008  6182              STR      r2,[r0,#0x18]
;;;447      /* Read LCKK bit*/
;;;448      tmp = GPIOx->LCKR;
00000a  6981              LDR      r1,[r0,#0x18]
;;;449      /* Read LCKK bit*/
;;;450      tmp = GPIOx->LCKR;
00000c  6980              LDR      r0,[r0,#0x18]
;;;451    }
00000e  4770              BX       lr
;;;452    
                          ENDP


                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;548      */
;;;549    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;550    {
;;;551      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;552    
;;;553      /* Check the parameters */
;;;554      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;555      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;556      
;;;557      if((GPIO_Remap & 0x80000000) == 0x80000000)
;;;558      {
;;;559        tmpreg = AFIO->MAPR2;
000002  4c14              LDR      r4,|L9.84|
000004  2800              CMP      r0,#0                 ;557
000006  da01              BGE      |L9.12|
000008  69e3              LDR      r3,[r4,#0x1c]
00000a  e000              B        |L9.14|
                  |L9.12|
;;;560      }
;;;561      else
;;;562      {
;;;563        tmpreg = AFIO->MAPR;
00000c  6863              LDR      r3,[r4,#4]
                  |L9.14|
;;;564      }
;;;565    
;;;566      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
;;;567      tmp = GPIO_Remap & LSB_MASK;
;;;568    
;;;569      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
;;;570      {
;;;571        tmpreg &= DBGAFR_SWJCFG_MASK;
;;;572        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
;;;573      }
;;;574      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
;;;575      {
;;;576        tmp1 = ((uint32_t)0x03) << tmpmask;
;;;577        tmpreg &= ~tmp1;
;;;578        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;579      }
;;;580      else
;;;581      {
;;;582        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
00000e  0d42              LSRS     r2,r0,#21
000010  0112              LSLS     r2,r2,#4
000012  b285              UXTH     r5,r0                 ;567
000014  f3c05701          UBFX     r7,r0,#20,#2          ;569
000018  4095              LSLS     r5,r5,r2
00001a  f3c04603          UBFX     r6,r0,#16,#4          ;566
00001e  2f03              CMP      r7,#3                 ;569
000020  d005              BEQ      |L9.46|
000022  02c2              LSLS     r2,r0,#11             ;574
000024  d50a              BPL      |L9.60|
000026  2203              MOVS     r2,#3                 ;576
000028  40b2              LSLS     r2,r2,r6              ;576
00002a  4393              BICS     r3,r3,r2              ;577
00002c  e007              B        |L9.62|
                  |L9.46|
00002e  f0236270          BIC      r2,r3,#0xf000000      ;571
000032  6863              LDR      r3,[r4,#4]            ;572
000034  f0236370          BIC      r3,r3,#0xf000000      ;572
000038  6063              STR      r3,[r4,#4]            ;572
00003a  e002              B        |L9.66|
                  |L9.60|
00003c  43ab              BICS     r3,r3,r5
                  |L9.62|
00003e  f0436270          ORR      r2,r3,#0xf000000      ;578
                  |L9.66|
;;;583        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;584      }
;;;585    
;;;586      if (NewState != DISABLE)
000042  b101              CBZ      r1,|L9.70|
;;;587      {
;;;588        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
000044  432a              ORRS     r2,r2,r5
                  |L9.70|
;;;589      }
;;;590    
;;;591      if((GPIO_Remap & 0x80000000) == 0x80000000)
000046  2800              CMP      r0,#0
000048  da01              BGE      |L9.78|
;;;592      {
;;;593        AFIO->MAPR2 = tmpreg;
00004a  61e2              STR      r2,[r4,#0x1c]
;;;594      }
;;;595      else
;;;596      {
;;;597        AFIO->MAPR = tmpreg;
;;;598      }  
;;;599    }
00004c  bdf0              POP      {r4-r7,pc}
                  |L9.78|
00004e  6062              STR      r2,[r4,#4]            ;597
000050  bdf0              POP      {r4-r7,pc}
;;;600    
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;304      */
;;;305    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  6880              LDR      r0,[r0,#8]
;;;306    {
;;;307      /* Check the parameters */
;;;308      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;309      
;;;310      return ((uint16_t)GPIOx->IDR);
000002  b280              UXTH     r0,r0
;;;311    }
000004  4770              BX       lr
;;;312    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;280      */
;;;281    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;282    {
;;;283      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;284      
;;;285      /* Check the parameters */
;;;286      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;287      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;288      
;;;289      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6892              LDR      r2,[r2,#8]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L11.12|
;;;290      {
;;;291        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L11.12|
;;;292      }
;;;293      else
;;;294      {
;;;295        bitstatus = (uint8_t)Bit_RESET;
;;;296      }
;;;297      return bitstatus;
;;;298    }
00000c  4770              BX       lr
;;;299    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;342      */
;;;343    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  68c0              LDR      r0,[r0,#0xc]
;;;344    {
;;;345      /* Check the parameters */
;;;346      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;347        
;;;348      return ((uint16_t)GPIOx->ODR);
000002  b280              UXTH     r0,r0
;;;349    }
000004  4770              BX       lr
;;;350    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;319      */
;;;320    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;321    {
;;;322      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;323      /* Check the parameters */
;;;324      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;325      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;326      
;;;327      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  68d2              LDR      r2,[r2,#0xc]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L13.12|
;;;328      {
;;;329        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L13.12|
;;;330      }
;;;331      else
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_RESET;
;;;334      }
;;;335      return bitstatus;
;;;336    }
00000c  4770              BX       lr
;;;337    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;373      */
;;;374    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6141              STR      r1,[r0,#0x14]
;;;375    {
;;;376      /* Check the parameters */
;;;377      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;378      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;379      
;;;380      GPIOx->BRR = GPIO_Pin;
;;;381    }
000002  4770              BX       lr
;;;382    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;357      */
;;;358    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6101              STR      r1,[r0,#0x10]
;;;359    {
;;;360      /* Check the parameters */
;;;361      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;362      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;363      
;;;364      GPIOx->BSRR = GPIO_Pin;
;;;365    }
000002  4770              BX       lr
;;;366    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;265      */
;;;266    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;267    {
;;;268      /* Reset GPIO init structure parameters values */
;;;269      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;270      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
000008  7081              STRB     r1,[r0,#2]
;;;271      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2104              MOVS     r1,#4
00000c  70c1              STRB     r1,[r0,#3]
;;;272    }
00000e  4770              BX       lr
;;;273    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;416      */
;;;417    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  60c1              STR      r1,[r0,#0xc]
;;;418    {
;;;419      /* Check the parameters */
;;;420      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;421      
;;;422      GPIOx->ODR = PortVal;
;;;423    }
000002  4770              BX       lr
;;;424    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;393      */
;;;394    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L18.6|
;;;395    {
;;;396      /* Check the parameters */
;;;397      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;398      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;399      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;400      
;;;401      if (BitVal != Bit_RESET)
;;;402      {
;;;403        GPIOx->BSRR = GPIO_Pin;
000002  6101              STR      r1,[r0,#0x10]
;;;404      }
;;;405      else
;;;406      {
;;;407        GPIOx->BRR = GPIO_Pin;
;;;408      }
;;;409    }
000004  4770              BX       lr
                  |L18.6|
000006  6141              STR      r1,[r0,#0x14]         ;407
000008  4770              BX       lr
;;;410    
                          ENDP

