; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\pid_pos.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pid_pos.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\FWlib\inc -I.\user -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=516 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\pid_pos.crf user\pid_pos.c]
                          THUMB

                          AREA ||i.abs||, CODE, READONLY, ALIGN=1

                  abs PROC
;;;42     
;;;43     float abs(float input)
000000  f1104fff          CMN      r0,#0x7f800000
;;;44     {
000004  d301              BCC      |L1.10|
;;;45         if (input>=0)
;;;46     	    return input;
;;;47     	else 
;;;48     	    return -input;
000006  f0804000          EOR      r0,r0,#0x80000000
                  |L1.10|
;;;49     }
00000a  4770              BX       lr
;;;50     
                          ENDP


                          AREA ||i.motor_set_position||, CODE, READONLY, ALIGN=2

                  motor_set_position PROC
;;;173    //called by user
;;;174    void motor_set_position(s32 position, u16 vel)
000000  b570              PUSH     {r4-r6,lr}
;;;175    {
000002  460a              MOV      r2,r1
000004  4605              MOV      r5,r0
;;;176    	pos_set_home();
000006  f7fffffe          BL       pos_set_home
;;;177    	max_pwm=vel;
00000a  4610              MOV      r0,r2
00000c  f7fffffe          BL       __aeabi_ui2f
000010  4c04              LDR      r4,|L2.36|
;;;178    	count_dest=position;
000012  60a0              STR      r0,[r4,#8]  ; max_pwm
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       __aeabi_i2f
;;;179    
;;;180    //	mode=4;
;;;181    	enable_bar=3;
00001a  4903              LDR      r1,|L2.40|
00001c  61e0              STR      r0,[r4,#0x1c]  ; count_dest
00001e  2003              MOVS     r0,#3
000020  7008              STRB     r0,[r1,#0]
;;;182    }
000022  bd70              POP      {r4-r6,pc}
;;;183    
                          ENDP

                  |L2.36|
                          DCD      ||area_number.16||
                  |L2.40|
                          DCD      enable_bar

                          AREA ||i.pos_cal_function_mode||, CODE, READONLY, ALIGN=2

                  pos_cal_function_mode PROC
;;;87     
;;;88     void pos_cal_function_mode(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;89     {
;;;90     	count_total= -d_cal+count_init;
000004  4891              LDR      r0,|L3.588|
000006  4c92              LDR      r4,|L3.592|
000008  6801              LDR      r1,[r0,#0]  ; d_cal
00000a  6920              LDR      r0,[r4,#0x10]  ; count_init
00000c  f7fffffe          BL       __aeabi_fsub
000010  4605              MOV      r5,r0
;;;91     
;;;92     	predictor = count_total + d_count*predict_parameter;		
000012  60e0              STR      r0,[r4,#0xc]  ; count_total
000014  488f              LDR      r0,|L3.596|
000016  69a1              LDR      r1,[r4,#0x18]  ; predict_parameter
000018  6800              LDR      r0,[r0,#0]  ; d_count
00001a  f7fffffe          BL       __aeabi_fmul
00001e  4629              MOV      r1,r5
000020  f7fffffe          BL       __aeabi_fadd
;;;93     
;;;94     	if (count_dest>=0)
000024  6160              STR      r0,[r4,#0x14]  ; predictor
000026  488b              LDR      r0,|L3.596|
000028  4626              MOV      r6,r4                 ;90
00002a  f04f0800          MOV      r8,#0
;;;95     	{
;;;96     	    offset=5;
;;;97     		sqrt_rt1=sqrt(abs(2*predictor*max_acc));
00002e  2501              MOVS     r5,#1
000030  69e7              LDR      r7,[r4,#0x1c]         ;92  ; count_dest
000032  6800              LDR      r0,[r0,#0]            ;92
000034  69b1              LDR      r1,[r6,#0x18]         ;92
000036  f7fffffe          BL       __aeabi_fmul
00003a  4984              LDR      r1,|L3.588|
00003c  4681              MOV      r9,r0                 ;92
00003e  6930              LDR      r0,[r6,#0x10]         ;90
000040  6809              LDR      r1,[r1,#0]            ;90
000042  f7fffffe          BL       __aeabi_fsub
000046  4601              MOV      r1,r0                 ;90
000048  4648              MOV      r0,r9                 ;90
00004a  f7fffffe          BL       __aeabi_fadd
00004e  4629              MOV      r1,r5                 ;92
000050  f7fffffe          BL       __ARM_scalbnf
000054  6871              LDR      r1,[r6,#4]
000056  f7fffffe          BL       __aeabi_fmul
00005a  f1174fff          CMN      r7,#0x7f800000        ;94
00005e  d21f              BCS      |L3.160|
000060  497d              LDR      r1,|L3.600|
000062  6261              STR      r1,[r4,#0x24]  ; offset
000064  f7fffffe          BL       abs
000068  f7fffffe          BL       __aeabi_f2d
00006c  f7fffffe          BL       sqrt
000070  f7fffffe          BL       __aeabi_d2f
;;;98     		sqrt_rt2=sqrt(abs(2*(count_dest-predictor)*max_acc));	
000074  62a0              STR      r0,[r4,#0x28]  ; sqrt_rt1
000076  6961              LDR      r1,[r4,#0x14]  ; predictor
000078  69e0              LDR      r0,[r4,#0x1c]  ; count_dest
00007a  f7fffffe          BL       __aeabi_fsub
00007e  2101              MOVS     r1,#1
000080  f7fffffe          BL       __ARM_scalbnf
000084  6861              LDR      r1,[r4,#4]  ; max_acc
000086  f7fffffe          BL       __aeabi_fmul
00008a  f7fffffe          BL       abs
00008e  f7fffffe          BL       __aeabi_f2d
000092  f7fffffe          BL       sqrt
000096  f7fffffe          BL       __aeabi_d2f
;;;99     		max_speed=max_pwm;
00009a  62e0              STR      r0,[r4,#0x2c]  ; sqrt_rt2
00009c  68a0              LDR      r0,[r4,#8]  ; max_pwm
00009e  e024              B        |L3.234|
                  |L3.160|
;;;100    	}
;;;101    	else 
;;;102    	{
;;;103    	    offset=-5;
0000a0  496e              LDR      r1,|L3.604|
;;;104    		sqrt_rt1=-sqrt(abs(2*predictor*max_acc));
0000a2  6261              STR      r1,[r4,#0x24]  ; offset
0000a4  f7fffffe          BL       abs
0000a8  f7fffffe          BL       __aeabi_f2d
0000ac  f7fffffe          BL       sqrt
0000b0  f7fffffe          BL       __aeabi_d2f
0000b4  f0804000          EOR      r0,r0,#0x80000000
;;;105    		sqrt_rt2=-sqrt(abs(2*(count_dest-predictor)*max_acc));
0000b8  62a0              STR      r0,[r4,#0x28]  ; sqrt_rt1
0000ba  6961              LDR      r1,[r4,#0x14]  ; predictor
0000bc  69e0              LDR      r0,[r4,#0x1c]  ; count_dest
0000be  f7fffffe          BL       __aeabi_fsub
0000c2  2101              MOVS     r1,#1
0000c4  f7fffffe          BL       __ARM_scalbnf
0000c8  6861              LDR      r1,[r4,#4]  ; max_acc
0000ca  f7fffffe          BL       __aeabi_fmul
0000ce  f7fffffe          BL       abs
0000d2  f7fffffe          BL       __aeabi_f2d
0000d6  f7fffffe          BL       sqrt
0000da  f7fffffe          BL       __aeabi_d2f
0000de  f0804000          EOR      r0,r0,#0x80000000
;;;106    		max_speed=-max_pwm;
0000e2  62e0              STR      r0,[r4,#0x2c]  ; sqrt_rt2
0000e4  68a0              LDR      r0,[r4,#8]  ; max_pwm
0000e6  f0804000          EOR      r0,r0,#0x80000000
                  |L3.234|
;;;107    	}
;;;108    
;;;109    	if (abs(count_dest) <= abs(max_pwm*max_pwm/max_acc))
0000ea  6320              STR      r0,[r4,#0x30]  ; max_speed
0000ec  68a1              LDR      r1,[r4,#8]  ; max_pwm
0000ee  4608              MOV      r0,r1
0000f0  f7fffffe          BL       __aeabi_fmul
0000f4  6861              LDR      r1,[r4,#4]  ; max_acc
0000f6  f7fffffe          BL       __aeabi_fdiv
0000fa  f7fffffe          BL       abs
0000fe  4601              MOV      r1,r0
000100  69e0              LDR      r0,[r4,#0x1c]  ; count_dest
000102  f7fffffe          BL       abs
000106  f7fffffe          BL       __aeabi_cfcmple
00010a  6960              LDR      r0,[r4,#0x14]  ; predictor
00010c  d82a              BHI      |L3.356|
;;;110    	{	
;;;111    	    if (abs(predictor) == 0)
00010e  f7fffffe          BL       abs
000112  f0104fff          TST      r0,#0x7f800000
;;;112    		    count_input=offset;
;;;113    
;;;114    	    else if (abs(predictor) <= abs(count_dest/2))
000116  f04f36ff          MOV      r6,#0xffffffff
00011a  d011              BEQ      |L3.320|
00011c  4631              MOV      r1,r6
00011e  69e0              LDR      r0,[r4,#0x1c]  ; count_dest
000120  f7fffffe          BL       __ARM_scalbnf
000124  f7fffffe          BL       abs
000128  4601              MOV      r1,r0
00012a  6960              LDR      r0,[r4,#0x14]  ; predictor
00012c  f7fffffe          BL       abs
000130  f7fffffe          BL       __aeabi_cfcmple
000134  d930              BLS      |L3.408|
;;;115    		    count_input=sqrt_rt1+offset;
;;;116    
;;;117    		else if (abs(predictor)>abs(count_dest/2) && abs(predictor)<abs(count_dest))
000136  4631              MOV      r1,r6
000138  69e0              LDR      r0,[r4,#0x1c]  ; count_dest
00013a  f7fffffe          BL       __ARM_scalbnf
00013e  e073              B        |L3.552|
                  |L3.320|
000140  6a60              LDR      r0,[r4,#0x24]         ;112  ; offset
000142  e00d              B        |L3.352|
                  |L3.324|
000144  69e0              LDR      r0,[r4,#0x1c]  ; count_dest
000146  f7fffffe          BL       abs
00014a  4601              MOV      r1,r0
00014c  6960              LDR      r0,[r4,#0x14]  ; predictor
00014e  f7fffffe          BL       abs
000152  f7fffffe          BL       __aeabi_cfcmple
000156  d270              BCS      |L3.570|
;;;118    		    count_input=sqrt_rt2+offset; 
;;;119    
;;;120    		else 
;;;121    		{
;;;122    		    reach_token=1;
;;;123    			count_input=0;
;;;124    		}
;;;125    	}
;;;126    	else 
;;;127    	{
;;;128    	    if (abs(predictor) == 0)
;;;129    		    count_input=offset;
;;;130    
;;;131    	    else if (abs(predictor) < abs(max_pwm*max_pwm/(2*max_acc)))
;;;132    			count_input=sqrt_rt1+offset;
;;;133    
;;;134    		else if  (abs(predictor) >= abs(max_pwm*max_pwm/(2*max_acc)) 
;;;135    		       && abs(predictor) <= abs(abs(count_dest)-(max_pwm*max_pwm/(2*max_acc))))
;;;136    			count_input=max_speed+offset;
;;;137    
;;;138    		else if  ( abs(predictor) > abs(abs(count_dest)-(max_pwm*max_pwm/(2*max_acc))) 
;;;139    		       && abs(predictor) < abs(count_dest))			   
;;;140    			count_input=sqrt_rt2+offset;
000158  6a61              LDR      r1,[r4,#0x24]  ; offset
00015a  6ae0              LDR      r0,[r4,#0x2c]  ; sqrt_rt2
                  |L3.348|
00015c  f7fffffe          BL       __aeabi_fadd
                  |L3.352|
000160  6220              STR      r0,[r4,#0x20]  ; count_input
000162  e06e              B        |L3.578|
                  |L3.356|
000164  f7fffffe          BL       abs
000168  f0104fff          TST      r0,#0x7f800000        ;128
00016c  d0e8              BEQ      |L3.320|
00016e  2101              MOVS     r1,#1                 ;131
000170  6860              LDR      r0,[r4,#4]            ;131  ; max_acc
000172  f7fffffe          BL       __ARM_scalbnf
000176  68a1              LDR      r1,[r4,#8]            ;131  ; max_pwm
000178  4606              MOV      r6,r0                 ;131
00017a  4608              MOV      r0,r1                 ;131
00017c  f7fffffe          BL       __aeabi_fmul
000180  4631              MOV      r1,r6                 ;131
000182  f7fffffe          BL       __aeabi_fdiv
000186  f7fffffe          BL       abs
00018a  4601              MOV      r1,r0                 ;131
00018c  6960              LDR      r0,[r4,#0x14]         ;131  ; predictor
00018e  f7fffffe          BL       abs
000192  f7fffffe          BL       __aeabi_cfcmple
000196  d202              BCS      |L3.414|
                  |L3.408|
000198  e9d41009          LDRD     r1,r0,[r4,#0x24]      ;131
00019c  e7de              B        |L3.348|
                  |L3.414|
00019e  2101              MOVS     r1,#1                 ;134
0001a0  6860              LDR      r0,[r4,#4]            ;134  ; max_acc
0001a2  f7fffffe          BL       __ARM_scalbnf
0001a6  68a1              LDR      r1,[r4,#8]            ;134  ; max_pwm
0001a8  4606              MOV      r6,r0                 ;134
0001aa  4608              MOV      r0,r1                 ;134
0001ac  f7fffffe          BL       __aeabi_fmul
0001b0  4631              MOV      r1,r6                 ;134
0001b2  f7fffffe          BL       __aeabi_fdiv
0001b6  f7fffffe          BL       abs
0001ba  4601              MOV      r1,r0                 ;134
0001bc  6960              LDR      r0,[r4,#0x14]         ;134  ; predictor
0001be  f7fffffe          BL       abs
0001c2  f7fffffe          BL       __aeabi_cfrcmple
0001c6  d81d              BHI      |L3.516|
0001c8  2101              MOVS     r1,#1                 ;135
0001ca  6860              LDR      r0,[r4,#4]            ;135  ; max_acc
0001cc  f7fffffe          BL       __ARM_scalbnf
0001d0  68a1              LDR      r1,[r4,#8]            ;135  ; max_pwm
0001d2  4606              MOV      r6,r0                 ;135
0001d4  4608              MOV      r0,r1                 ;135
0001d6  f7fffffe          BL       __aeabi_fmul
0001da  4631              MOV      r1,r6                 ;135
0001dc  f7fffffe          BL       __aeabi_fdiv
0001e0  4601              MOV      r1,r0                 ;135
0001e2  69e0              LDR      r0,[r4,#0x1c]         ;135  ; count_dest
0001e4  f7fffffe          BL       abs
0001e8  f7fffffe          BL       __aeabi_fsub
0001ec  f7fffffe          BL       abs
0001f0  4601              MOV      r1,r0                 ;135
0001f2  6960              LDR      r0,[r4,#0x14]         ;135  ; predictor
0001f4  f7fffffe          BL       abs
0001f8  f7fffffe          BL       __aeabi_cfcmple
0001fc  d802              BHI      |L3.516|
0001fe  6a61              LDR      r1,[r4,#0x24]         ;136  ; offset
000200  6b20              LDR      r0,[r4,#0x30]         ;136  ; max_speed
000202  e7ab              B        |L3.348|
                  |L3.516|
000204  2101              MOVS     r1,#1                 ;138
000206  6860              LDR      r0,[r4,#4]            ;138  ; max_acc
000208  f7fffffe          BL       __ARM_scalbnf
00020c  68a1              LDR      r1,[r4,#8]            ;138  ; max_pwm
00020e  4606              MOV      r6,r0                 ;138
000210  4608              MOV      r0,r1                 ;138
000212  f7fffffe          BL       __aeabi_fmul
000216  4631              MOV      r1,r6                 ;138
000218  f7fffffe          BL       __aeabi_fdiv
00021c  4601              MOV      r1,r0                 ;138
00021e  69e0              LDR      r0,[r4,#0x1c]         ;138  ; count_dest
000220  f7fffffe          BL       abs
000224  f7fffffe          BL       __aeabi_fsub
                  |L3.552|
000228  f7fffffe          BL       abs
00022c  4601              MOV      r1,r0                 ;117
00022e  6960              LDR      r0,[r4,#0x14]         ;117  ; predictor
000230  f7fffffe          BL       abs
000234  f7fffffe          BL       __aeabi_cfrcmple
000238  d384              BCC      |L3.324|
                  |L3.570|
;;;141    		else 
;;;142    		{
;;;143    		    reach_token=1;
00023a  7025              STRB     r5,[r4,#0]
;;;144    			count_input=0;
00023c  4640              MOV      r0,r8
00023e  f8c48020          STR      r8,[r4,#0x20]  ; count_input
                  |L3.578|
;;;145    		}
;;;146    	}
;;;147    
;;;148    	r_count=count_input;
000242  4907              LDR      r1,|L3.608|
000244  6008              STR      r0,[r1,#0]  ; r_count
;;;149    
;;;150        	
;;;151    }	 
000246  e8bd87f0          POP      {r4-r10,pc}
;;;152    
                          ENDP

00024a  0000              DCW      0x0000
                  |L3.588|
                          DCD      d_cal
                  |L3.592|
                          DCD      ||area_number.16||
                  |L3.596|
                          DCD      d_count
                  |L3.600|
                          DCD      0x40a00000
                  |L3.604|
                          DCD      0xc0a00000
                  |L3.608|
                          DCD      r_count

                          AREA ||i.pos_err||, CODE, READONLY, ALIGN=1

                  pos_err PROC
;;;80     
;;;81     void pos_err(void)
000000  4770              BX       lr
;;;82     {
;;;83        
;;;84     }
;;;85     
                          ENDP


                          AREA ||i.pos_get_curr||, CODE, READONLY, ALIGN=2

                  pos_get_curr PROC
;;;64     //is a command
;;;65     float pos_get_curr(void)
000000  4801              LDR      r0,|L5.8|
;;;66     {
;;;67      	return count_total;
000002  68c0              LDR      r0,[r0,#0xc]  ; count_total
;;;68     }
000004  4770              BX       lr
;;;69     
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||area_number.16||

                          AREA ||i.pos_move||, CODE, READONLY, ALIGN=2

                  pos_move PROC
;;;162    
;;;163    void pos_move(u8 mode)
000000  b510              PUSH     {r4,lr}
;;;164    {
;;;165    	if (abs(count_dest) > abs(predictor))
000002  4a0a              LDR      r2,|L6.44|
000004  4604              MOV      r4,r0                 ;164
000006  6950              LDR      r0,[r2,#0x14]  ; predictor
000008  f7fffffe          BL       abs
00000c  4601              MOV      r1,r0
00000e  69d0              LDR      r0,[r2,#0x1c]  ; count_dest
000010  f7fffffe          BL       abs
000014  f7fffffe          BL       __aeabi_cfrcmple
000018  d204              BCS      |L6.36|
;;;166    		pos_move_function_mode(mode);
00001a  4620              MOV      r0,r4
00001c  e8bd4010          POP      {r4,lr}
000020  f7ffbffe          B.W      pos_move_function_mode
                  |L6.36|
;;;167    	else 
;;;168    		enable_bar=2;
000024  4902              LDR      r1,|L6.48|
000026  2002              MOVS     r0,#2
000028  7008              STRB     r0,[r1,#0]
;;;169    	    
;;;170    }
00002a  bd10              POP      {r4,pc}
;;;171    
                          ENDP

                  |L6.44|
                          DCD      ||area_number.16||
                  |L6.48|
                          DCD      enable_bar

                          AREA ||i.pos_move_function_mode||, CODE, READONLY, ALIGN=2

                  pos_move_function_mode PROC
;;;154    
;;;155    void pos_move_function_mode(u8 mode)
000000  b510              PUSH     {r4,lr}
;;;156    {
000002  4604              MOV      r4,r0
;;;157        if (ticks%10==0) 
000004  4807              LDR      r0,|L7.36|
000006  220a              MOVS     r2,#0xa
000008  8801              LDRH     r1,[r0,#0]  ; ticks
00000a  fbb1f3f2          UDIV     r3,r1,r2
00000e  fb021013          MLS      r0,r2,r3,r1
000012  b908              CBNZ     r0,|L7.24|
;;;158    	    pos_cal_function_mode();
000014  f7fffffe          BL       pos_cal_function_mode
                  |L7.24|
;;;159    
;;;160    	vel_move(mode);
000018  4620              MOV      r0,r4
00001a  e8bd4010          POP      {r4,lr}
00001e  f7ffbffe          B.W      vel_move
;;;161    }
;;;162    
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      ticks

                          AREA ||i.pos_set_home||, CODE, READONLY, ALIGN=2

                  pos_set_home PROC
;;;70     //is a command
;;;71     void pos_set_home(void)
000000  4804              LDR      r0,|L8.20|
;;;72     {
;;;73     	count_total = 0;
000002  2100              MOVS     r1,#0
;;;74     	count_dest = 0;
000004  60c1              STR      r1,[r0,#0xc]  ; count_total
;;;75     //	pwm=0;
;;;76     	reach_token = 0;
000006  61c1              STR      r1,[r0,#0x1c]  ; count_dest
000008  7001              STRB     r1,[r0,#0]
;;;77     	predictor=0;
;;;78     	count_init = d_cal;
00000a  6141              STR      r1,[r0,#0x14]  ; predictor
00000c  4902              LDR      r1,|L8.24|
00000e  6809              LDR      r1,[r1,#0]  ; d_cal
000010  6101              STR      r1,[r0,#0x10]  ; count_init
;;;79     }
000012  4770              BX       lr
;;;80     
                          ENDP

                  |L8.20|
                          DCD      ||area_number.16||
                  |L8.24|
                          DCD      d_cal

                          AREA ||i.pos_set_max||, CODE, READONLY, ALIGN=2

                  pos_set_max PROC
;;;57     //is a command
;;;58     void pos_set_max(float _acc, float _pwm)
000000  4a01              LDR      r2,|L9.8|
;;;59     {
;;;60     	max_acc = _acc;
000002  e9c20101          STRD     r0,r1,[r2,#4]
;;;61     	max_pwm = _pwm;
;;;62     }
000006  4770              BX       lr
;;;63     
                          ENDP

                  |L9.8|
                          DCD      ||area_number.16||

                          AREA ||i.pos_set_pid||, CODE, READONLY, ALIGN=1

                  pos_set_pid PROC
;;;51     //is a command
;;;52     void pos_set_pid(float _p, float _i, float _d)
000000  4770              BX       lr
;;;53     {
;;;54     
;;;55     }
;;;56     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  kp_pos
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  ki_pos
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.15||, DATA, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.data||
                  kd_pos
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.16||, DATA, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.data||
                  reach_token
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  max_acc
000004  40400000          DCFS     0x40400000 ; 3
                  max_pwm
000008  43960000          DCFS     0x43960000 ; 300
                  count_total
00000c  00000000          DCFS     0x00000000 ; 0
                  count_init
000010  00000000          DCFS     0x00000000 ; 0
                  predictor
000014  00000000          DCFS     0x00000000 ; 0
                  predict_parameter
000018  00000000          DCFS     0x00000000 ; 0
                  count_dest
00001c  00000000          DCFS     0x00000000 ; 0
                  count_input
000020  00000000          DCFS     0x00000000 ; 0
                  offset
                          DCD      0x00000000
                  sqrt_rt1
                          DCD      0x00000000
                  sqrt_rt2
                          DCD      0x00000000
                  max_speed
                          DCD      0x00000000

                          AREA ||area_number.17||, DATA, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.data||
                  min_ac
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.18||, DATA, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.data||
                  count_dest_p
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.19||, DATA, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.data||
                  prev_pwm
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.20||, DATA, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.data||
                  mode_bar
000000  00                DCB      0x00

                          AREA ||area_number.21||, DATA, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.data||
                  encoder_count
                          DCD      0x00000000
