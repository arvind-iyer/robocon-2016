; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_cec.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_cec.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\FWlib\inc -I.\user -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=516 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_cec.crf FWlib\src\stm32f10x_cec.c]
                          THUMB

                          AREA ||i.CEC_ClearFlag||, CODE, READONLY, ALIGN=2

                  CEC_ClearFlag PROC
;;;348      */
;;;349    void CEC_ClearFlag(uint32_t CEC_FLAG)
000000  4906              LDR      r1,|L1.28|
;;;350    { 
000002  b510              PUSH     {r4,lr}
;;;351      uint32_t tmp = 0x0;
;;;352      
;;;353      /* Check the parameters */
;;;354      assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));
;;;355    
;;;356      tmp = CEC->CSR & 0x2;
000004  680a              LDR      r2,[r1,#0]
;;;357           
;;;358      /* Clear the selected CEC flags */
;;;359      CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
000006  680c              LDR      r4,[r1,#0]
000008  f0020302          AND      r3,r2,#2              ;356
00000c  f06f0203          MVN      r2,#3
000010  4382              BICS     r2,r2,r0
000012  431a              ORRS     r2,r2,r3
000014  4014              ANDS     r4,r4,r2
000016  600c              STR      r4,[r1,#0]
;;;360    }
000018  bd10              POP      {r4,pc}
;;;361    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0x40007810

                          AREA ||i.CEC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  CEC_ClearITPendingBit PROC
;;;407      */
;;;408    void CEC_ClearITPendingBit(uint16_t CEC_IT)
000000  4906              LDR      r1,|L2.28|
;;;409    {
000002  b510              PUSH     {r4,lr}
;;;410      uint32_t tmp = 0x0;
;;;411      
;;;412      /* Check the parameters */
;;;413      assert_param(IS_CEC_GET_IT(CEC_IT));
;;;414      
;;;415      tmp = CEC->CSR & 0x2;
000004  680a              LDR      r2,[r1,#0]
;;;416      
;;;417      /* Clear the selected CEC interrupt pending bits */
;;;418      CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
000006  680c              LDR      r4,[r1,#0]
000008  f0020302          AND      r3,r2,#2              ;415
00000c  f06f0203          MVN      r2,#3
000010  4382              BICS     r2,r2,r0
000012  431a              ORRS     r2,r2,r3
000014  4014              ANDS     r4,r4,r2
000016  600c              STR      r4,[r1,#0]
;;;419    }
000018  bd10              POP      {r4,pc}
;;;420    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40007810

                          AREA ||i.CEC_Cmd||, CODE, READONLY, ALIGN=2

                  CEC_Cmd PROC
;;;163      */
;;;164    void CEC_Cmd(FunctionalState NewState)
000000  4904              LDR      r1,|L3.20|
;;;165    {
;;;166      /* Check the parameters */
;;;167      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;168    
;;;169      *(__IO uint32_t *) CFGR_PE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
000004  2800              CMP      r0,#0                 ;165
000006  d103              BNE      |L3.16|
;;;170    
;;;171      if(NewState == DISABLE)
;;;172      {
;;;173        /* Wait until the PE bit is cleared by hardware (Idle Line detected) */
;;;174        while((CEC->CFGR & CEC_CFGR_PE) != (uint32_t)RESET)
000008  4803              LDR      r0,|L3.24|
                  |L3.10|
00000a  6801              LDR      r1,[r0,#0]
00000c  07c9              LSLS     r1,r1,#31
00000e  d1fc              BNE      |L3.10|
                  |L3.16|
;;;175        {
;;;176        }  
;;;177      }  
;;;178    }
000010  4770              BX       lr
;;;179    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x420f0000
                  |L3.24|
                          DCD      0x40007800

                          AREA ||i.CEC_DeInit||, CODE, READONLY, ALIGN=1

                  CEC_DeInit PROC
;;;117      */
;;;118    void CEC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;119    {
;;;120      /* Enable CEC reset state */
;;;121      RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);  
000002  2101              MOVS     r1,#1
000004  078c              LSLS     r4,r1,#30
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;122      /* Release CEC from reset state */
;;;123      RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE); 
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;124    }
;;;125    
                          ENDP


                          AREA ||i.CEC_EndOfMessageCmd||, CODE, READONLY, ALIGN=2

                  CEC_EndOfMessageCmd PROC
;;;261      */
;;;262    void CEC_EndOfMessageCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L5.8|
;;;263    {   
;;;264      /* Check the parameters */
;;;265      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;266      
;;;267      /* The data byte will be transmitted with or without an EOM bit*/
;;;268      *(__IO uint32_t *) CSR_TEOM_BB = (uint32_t)NewState;
000002  f8c10204          STR      r0,[r1,#0x204]
;;;269    }
000006  4770              BX       lr
;;;270    
                          ENDP

                  |L5.8|
                          DCD      0x420f0000

                          AREA ||i.CEC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  CEC_GetFlagStatus PROC
;;;290      */
;;;291    FlagStatus CEC_GetFlagStatus(uint32_t CEC_FLAG) 
000000  4601              MOV      r1,r0
;;;292    {
;;;293      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;294      uint32_t cecreg = 0, cecbase = 0;
;;;295      
;;;296      /* Check the parameters */
;;;297      assert_param(IS_CEC_GET_FLAG(CEC_FLAG));
;;;298     
;;;299      /* Get the CEC peripheral base address */
;;;300      cecbase = (uint32_t)(CEC_BASE);
;;;301      
;;;302      /* Read flag register index */
;;;303      cecreg = CEC_FLAG >> 28;
000004  0f0a              LSRS     r2,r1,#28
;;;304      
;;;305      /* Get bit[23:0] of the flag */
;;;306      CEC_FLAG &= FLAG_Mask;
000006  f021417f          BIC      r1,r1,#0xff000000
00000a  d002              BEQ      |L6.18|
;;;307      
;;;308      if(cecreg != 0)
;;;309      {
;;;310        /* Flag in CEC ESR Register */
;;;311        CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
00000c  0c09              LSRS     r1,r1,#16
;;;312        
;;;313        /* Get the CEC ESR register address */
;;;314        cecbase += 0xC;
00000e  4a04              LDR      r2,|L6.32|
000010  e001              B        |L6.22|
                  |L6.18|
;;;315      }
;;;316      else
;;;317      {
;;;318        /* Get the CEC CSR register address */
;;;319        cecbase += 0x10;
000012  4a03              LDR      r2,|L6.32|
000014  1d12              ADDS     r2,r2,#4
                  |L6.22|
;;;320      }
;;;321      
;;;322      if(((*(__IO uint32_t *)cecbase) & CEC_FLAG) != (uint32_t)RESET)
000016  6812              LDR      r2,[r2,#0]
000018  420a              TST      r2,r1
00001a  d000              BEQ      |L6.30|
;;;323      {
;;;324        /* CEC_FLAG is set */
;;;325        bitstatus = SET;
00001c  2001              MOVS     r0,#1
                  |L6.30|
;;;326      }
;;;327      else
;;;328      {
;;;329        /* CEC_FLAG is reset */
;;;330        bitstatus = RESET;
;;;331      }
;;;332      
;;;333      /* Return the CEC_FLAG status */
;;;334      return  bitstatus;
;;;335    }
00001e  4770              BX       lr
;;;336    
                          ENDP

                  |L6.32|
                          DCD      0x4000780c

                          AREA ||i.CEC_GetITStatus||, CODE, READONLY, ALIGN=2

                  CEC_GetITStatus PROC
;;;371      */
;;;372    ITStatus CEC_GetITStatus(uint8_t CEC_IT)
000000  4907              LDR      r1,|L7.32|
;;;373    {
000002  4602              MOV      r2,r0
;;;374      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;375      uint32_t enablestatus = 0;
;;;376      
;;;377      /* Check the parameters */
;;;378       assert_param(IS_CEC_GET_IT(CEC_IT));
;;;379       
;;;380      /* Get the CEC IT enable bit status */
;;;381      enablestatus = (CEC->CFGR & (uint8_t)CEC_CFGR_IE) ;
000006  6809              LDR      r1,[r1,#0]
;;;382      
;;;383      /* Check the status of the specified CEC interrupt */
;;;384      if (((CEC->CSR & CEC_IT) != (uint32_t)RESET) && enablestatus)
000008  4b05              LDR      r3,|L7.32|
00000a  f0010102          AND      r1,r1,#2              ;381
00000e  3310              ADDS     r3,r3,#0x10
000010  681b              LDR      r3,[r3,#0]
000012  4213              TST      r3,r2
000014  d002              BEQ      |L7.28|
000016  2900              CMP      r1,#0
000018  d000              BEQ      |L7.28|
;;;385      {
;;;386        /* CEC_IT is set */
;;;387        bitstatus = SET;
00001a  2001              MOVS     r0,#1
                  |L7.28|
;;;388      }
;;;389      else
;;;390      {
;;;391        /* CEC_IT is reset */
;;;392        bitstatus = RESET;
;;;393      }
;;;394      /* Return the CEC_IT status */
;;;395      return  bitstatus;
;;;396    }
00001c  4770              BX       lr
;;;397    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x40007800

                          AREA ||i.CEC_ITConfig||, CODE, READONLY, ALIGN=2

                  CEC_ITConfig PROC
;;;185      */
;;;186    void CEC_ITConfig(FunctionalState NewState)
000000  4901              LDR      r1,|L8.8|
;;;187    {
;;;188      /* Check the parameters */
;;;189      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;190    
;;;191      *(__IO uint32_t *) CFGR_IE_BB = (uint32_t)NewState;
000002  6048              STR      r0,[r1,#4]
;;;192    }
000004  4770              BX       lr
;;;193    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x420f0000

                          AREA ||i.CEC_Init||, CODE, READONLY, ALIGN=2

                  CEC_Init PROC
;;;134      */
;;;135    void CEC_Init(CEC_InitTypeDef* CEC_InitStruct)
000000  4a04              LDR      r2,|L9.20|
;;;136    {
;;;137      uint16_t tmpreg = 0;
;;;138     
;;;139      /* Check the parameters */
;;;140      assert_param(IS_CEC_BIT_TIMING_ERROR_MODE(CEC_InitStruct->CEC_BitTimingMode)); 
;;;141      assert_param(IS_CEC_BIT_PERIOD_ERROR_MODE(CEC_InitStruct->CEC_BitPeriodMode));
;;;142         
;;;143      /*---------------------------- CEC CFGR Configuration -----------------*/
;;;144      /* Get the CEC CFGR value */
;;;145      tmpreg = CEC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;146      
;;;147      /* Clear BTEM and BPEM bits */
;;;148      tmpreg &= CFGR_CLEAR_Mask;
000004  f00103f3          AND      r3,r1,#0xf3
;;;149      
;;;150      /* Configure CEC: Bit Timing Error and Bit Period Error */
;;;151      tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);
000008  8801              LDRH     r1,[r0,#0]
00000a  8840              LDRH     r0,[r0,#2]
00000c  4301              ORRS     r1,r1,r0
00000e  4319              ORRS     r1,r1,r3
;;;152    
;;;153      /* Write to CEC CFGR  register*/
;;;154      CEC->CFGR = tmpreg;
000010  6011              STR      r1,[r2,#0]
;;;155      
;;;156    }
000012  4770              BX       lr
;;;157    
                          ENDP

                  |L9.20|
                          DCD      0x40007800

                          AREA ||i.CEC_OwnAddressConfig||, CODE, READONLY, ALIGN=2

                  CEC_OwnAddressConfig PROC
;;;198      */
;;;199    void CEC_OwnAddressConfig(uint8_t CEC_OwnAddress)
000000  4901              LDR      r1,|L10.8|
;;;200    {
;;;201      /* Check the parameters */
;;;202      assert_param(IS_CEC_ADDRESS(CEC_OwnAddress));
;;;203    
;;;204      /* Set the CEC own address */
;;;205      CEC->OAR = CEC_OwnAddress;
000002  6008              STR      r0,[r1,#0]
;;;206    }
000004  4770              BX       lr
;;;207    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x40007804

                          AREA ||i.CEC_ReceiveDataByte||, CODE, READONLY, ALIGN=2

                  CEC_ReceiveDataByte PROC
;;;238      */
;;;239    uint8_t CEC_ReceiveDataByte(void)
000000  4801              LDR      r0,|L11.8|
;;;240    {
;;;241      /* Receive Data */
;;;242      return (uint8_t)(CEC->RXD);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;243    }
000006  4770              BX       lr
;;;244    
                          ENDP

                  |L11.8|
                          DCD      0x40007818

                          AREA ||i.CEC_SendDataByte||, CODE, READONLY, ALIGN=2

                  CEC_SendDataByte PROC
;;;226      */
;;;227    void CEC_SendDataByte(uint8_t Data)
000000  4901              LDR      r1,|L12.8|
;;;228    {  
;;;229      /* Transmit Data */
;;;230      CEC->TXD = Data ;
000002  6008              STR      r0,[r1,#0]
;;;231    }
000004  4770              BX       lr
;;;232    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40007814

                          AREA ||i.CEC_SetPrescaler||, CODE, READONLY, ALIGN=2

                  CEC_SetPrescaler PROC
;;;212      */
;;;213    void CEC_SetPrescaler(uint16_t CEC_Prescaler)
000000  4901              LDR      r1,|L13.8|
;;;214    {
;;;215      /* Check the parameters */
;;;216      assert_param(IS_CEC_PRESCALER(CEC_Prescaler));
;;;217    
;;;218      /* Set the  Prescaler value*/
;;;219      CEC->PRES = CEC_Prescaler;
000002  6008              STR      r0,[r1,#0]
;;;220    }
000004  4770              BX       lr
;;;221    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x40007808

                          AREA ||i.CEC_StartOfMessage||, CODE, READONLY, ALIGN=2

                  CEC_StartOfMessage PROC
;;;249      */
;;;250    void CEC_StartOfMessage(void)
000000  4902              LDR      r1,|L14.12|
;;;251    {  
;;;252      /* Starts of new message */
;;;253      *(__IO uint32_t *) CSR_TSOM_BB = (uint32_t)0x1;
000002  2001              MOVS     r0,#1
000004  f8c10200          STR      r0,[r1,#0x200]
;;;254    }
000008  4770              BX       lr
;;;255    
                          ENDP

00000a  0000              DCW      0x0000
                  |L14.12|
                          DCD      0x420f0000
