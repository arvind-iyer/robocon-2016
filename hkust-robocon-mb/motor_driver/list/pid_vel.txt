; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\pid_vel.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pid_vel.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\FWlib\inc -I.\user -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=516 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\pid_vel.crf user\pid_vel.c]
                          THUMB

                          AREA ||i.ADC_calibration||, CODE, READONLY, ALIGN=2

                  ADC_calibration PROC
;;;277    extern vu16  ADC_ConvertedValue[];
;;;278    void ADC_calibration(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;279    {
;;;280    	if (!cali_done)
000004  4d1d              LDR      r5,|L1.124|
000006  78e8              LDRB     r0,[r5,#3]  ; cali_done
000008  2800              CMP      r0,#0                 ;279
00000a  d11c              BNE      |L1.70|
;;;281    	{
;;;282    		if (tim_counter<5000)
;;;283    		{
;;;284    			ADC_offset[0]+=ADC_ConvertedValue[0];
00000c  f10504c4          ADD      r4,r5,#0xc4
000010  88ee              LDRH     r6,[r5,#6]            ;282  ; tim_counter
000012  e9d47800          LDRD     r7,r8,[r4,#0]         ;282
000016  f2413188          MOV      r1,#0x1388            ;282
00001a  428e              CMP      r6,r1                 ;282
00001c  d215              BCS      |L1.74|
00001e  f8df9060          LDR      r9,|L1.128|
000022  f8b90000          LDRH     r0,[r9,#0]  ; ADC_ConvertedValue
000026  f7fffffe          BL       __aeabi_ui2f
00002a  4639              MOV      r1,r7
00002c  f7fffffe          BL       __aeabi_fadd
;;;285    			ADC_offset[1]+=ADC_ConvertedValue[1];
000030  6020              STR      r0,[r4,#0]  ; ADC_offset
000032  f8b90002          LDRH     r0,[r9,#2]  ; ADC_ConvertedValue
000036  f7fffffe          BL       __aeabi_ui2f
00003a  4641              MOV      r1,r8
00003c  f7fffffe          BL       __aeabi_fadd
000040  1c76              ADDS     r6,r6,#1
;;;286    			tim_counter++;
000042  6060              STR      r0,[r4,#4]  ; ADC_offset
000044  80ee              STRH     r6,[r5,#6]
                  |L1.70|
;;;287    		}
;;;288    		else 
;;;289    		{
;;;290    			ADC_offset[0]/=5000;
;;;291    			ADC_offset[1]/=5000;
;;;292    			if ((ADC_offset[0]>1400 && ADC_offset[0]<1700)
;;;293    			&&  (ADC_offset[1]>1400 && ADC_offset[1]<1700))
;;;294    				cali_done=1;
;;;295    		}
;;;296    	 }
;;;297    }
000046  e8bd87f0          POP      {r4-r10,pc}
                  |L1.74|
00004a  f8df9038          LDR      r9,|L1.132|
00004e  4638              MOV      r0,r7                 ;290
000050  4649              MOV      r1,r9                 ;290
000052  f7fffffe          BL       __aeabi_fdiv
000056  4606              MOV      r6,r0                 ;290
000058  6020              STR      r0,[r4,#0]            ;291  ; ADC_offset
00005a  4649              MOV      r1,r9                 ;291
00005c  4640              MOV      r0,r8                 ;291
00005e  f7fffffe          BL       __aeabi_fdiv
000062  4a09              LDR      r2,|L1.136|
000064  4909              LDR      r1,|L1.140|
000066  18b3              ADDS     r3,r6,r2              ;292
000068  6060              STR      r0,[r4,#4]            ;292  ; ADC_offset
00006a  428b              CMP      r3,r1                 ;292
00006c  d2eb              BCS      |L1.70|
00006e  4410              ADD      r0,r0,r2              ;293
000070  4288              CMP      r0,r1                 ;293
000072  d2e8              BCS      |L1.70|
000074  2001              MOVS     r0,#1                 ;294
000076  70e8              STRB     r0,[r5,#3]            ;294
000078  e7e5              B        |L1.70|
;;;298    
                          ENDP

00007a  0000              DCW      0x0000
                  |L1.124|
                          DCD      ||.data||
                  |L1.128|
                          DCD      ADC_ConvertedValue
                  |L1.132|
                          DCD      0x459c4000
                  |L1.136|
                          DCD      0xbb50ffff
                  |L1.140|
                          DCD      0x00257fff

                          AREA ||i.cali_user||, CODE, READONLY, ALIGN=2

                  cali_user PROC
;;;551    
;;;552    void cali_user()
000000  4901              LDR      r1,|L2.8|
;;;553    {
;;;554    	enable_bar=6;
000002  2006              MOVS     r0,#6
000004  7008              STRB     r0,[r1,#0]
;;;555    }
000006  4770              BX       lr
;;;556    
                          ENDP

                  |L2.8|
                          DCD      ||.data||

                          AREA ||i.clear_record||, CODE, READONLY, ALIGN=2

                  clear_record PROC
;;;120    // sub component
;;;121    void clear_record(void)
000000  4908              LDR      r1,|L3.36|
;;;122    {
;;;123        err_curr=0;
000002  2000              MOVS     r0,#0
;;;124    	err_prev1=0;
;;;125    	err_prev2=0;
;;;126    
;;;127    	err_curr_pos=0;
000004  f1010280          ADD      r2,r1,#0x80
000008  6548              STR      r0,[r1,#0x54]         ;124  ; err_curr
00000a  6588              STR      r0,[r1,#0x58]         ;125  ; err_prev1
00000c  65c8              STR      r0,[r1,#0x5c]  ; err_prev2
;;;128    	err_prev1_pos=0;
00000e  6010              STR      r0,[r2,#0]  ; err_curr_pos
;;;129    	err_prev2_pos=0;
000010  6050              STR      r0,[r2,#4]  ; err_prev1_pos
;;;130    
;;;131    	cal_P=0;
000012  6090              STR      r0,[r2,#8]  ; err_prev2_pos
;;;132    	cal_I=0;
000014  6448              STR      r0,[r1,#0x44]  ; cal_P
;;;133    	cal_D=0;
000016  6488              STR      r0,[r1,#0x48]  ; cal_I
;;;134    	PID=0;
000018  64c8              STR      r0,[r1,#0x4c]  ; cal_D
;;;135    
;;;136    	pwm=0;
00001a  6508              STR      r0,[r1,#0x50]  ; PID
;;;137    
;;;138    	reach_token = 0;
00001c  6788              STR      r0,[r1,#0x78]  ; pwm
00001e  4902              LDR      r1,|L3.40|
000020  7008              STRB     r0,[r1,#0]
;;;139    }
000022  4770              BX       lr
;;;140    
                          ENDP

                  |L3.36|
                          DCD      ||.data||
                  |L3.40|
                          DCD      reach_token

                          AREA ||i.current_circle||, CODE, READONLY, ALIGN=2

                  current_circle PROC
;;;334    
;;;335    void current_circle(float p, float i, float d)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;336    {
;;;337    	I_err_curr=current_input-motor_current;
000004  4c24              LDR      r4,|L4.152|
000006  460f              MOV      r7,r1                 ;336
000008  4606              MOV      r6,r0                 ;336
00000a  4692              MOV      r10,r2                ;336
00000c  6b61              LDR      r1,[r4,#0x34]  ; motor_current
00000e  6960              LDR      r0,[r4,#0x14]  ; current_input
000010  f7fffffe          BL       __aeabi_fsub
;;;338    
;;;339        I_cal_P = p * (I_err_curr - I_err_prev1);
000014  62a0              STR      r0,[r4,#0x28]  ; I_err_curr
000016  6ae1              LDR      r1,[r4,#0x2c]  ; I_err_prev1
000018  4605              MOV      r5,r0                 ;337
00001a  4689              MOV      r9,r1
00001c  f7fffffe          BL       __aeabi_fsub
000020  4631              MOV      r1,r6
000022  f7fffffe          BL       __aeabi_fmul
000026  4680              MOV      r8,r0
;;;340    	I_cal_I = i * I_err_curr;
000028  61a0              STR      r0,[r4,#0x18]  ; I_cal_P
00002a  4629              MOV      r1,r5                 ;339
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       __aeabi_fmul
000032  4607              MOV      r7,r0
;;;341    	I_cal_D = d * (I_err_curr + I_err_prev2 - 2*I_err_prev1);
000034  61e0              STR      r0,[r4,#0x1c]  ; I_cal_I
000036  2101              MOVS     r1,#1
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       __ARM_scalbnf
00003e  4606              MOV      r6,r0
000040  4628              MOV      r0,r5
000042  6b21              LDR      r1,[r4,#0x30]  ; I_err_prev2
000044  f7fffffe          BL       __aeabi_fadd
000048  4631              MOV      r1,r6
00004a  f7fffffe          BL       __aeabi_fsub
00004e  4651              MOV      r1,r10
000050  f7fffffe          BL       __aeabi_fmul
000054  6220              STR      r0,[r4,#0x20]  ; I_cal_D
000056  e9c4590b          STRD     r5,r9,[r4,#0x2c]
00005a  4606              MOV      r6,r0
00005c  4639              MOV      r1,r7
00005e  4640              MOV      r0,r8
;;;342    
;;;343    	I_err_prev2 = I_err_prev1;
;;;344    	I_err_prev1 = I_err_curr;
;;;345    		
;;;346    	I_PID = I_cal_P + I_cal_I + I_cal_D;
000060  f7fffffe          BL       __aeabi_fadd
000064  4631              MOV      r1,r6
000066  f7fffffe          BL       __aeabi_fadd
;;;347    
;;;348    	pwm = pwm + I_PID;
00006a  6260              STR      r0,[r4,#0x24]  ; I_PID
00006c  3c80              SUBS     r4,r4,#0x80
00006e  4601              MOV      r1,r0                 ;346
000070  6fa0              LDR      r0,[r4,#0x78]  ; pwm
000072  f7fffffe          BL       __aeabi_fadd
;;;349    
;;;350    	dir = (pwm>0)?1:0;					  
000076  67a0              STR      r0,[r4,#0x78]  ; pwm
000078  f5b00f00          CMP      r0,#0x800000
00007c  db01              BLT      |L4.130|
00007e  2101              MOVS     r1,#1
000080  e000              B        |L4.132|
                  |L4.130|
000082  2100              MOVS     r1,#0
                  |L4.132|
000084  7061              STRB     r1,[r4,#1]
;;;351    
;;;352    	if(pwm > MAX_PWM)	pwm = MAX_PWM;
000086  4905              LDR      r1,|L4.156|
000088  4288              CMP      r0,r1
00008a  dc02              BGT      |L4.146|
;;;353    	if(pwm < -MAX_PWM)   pwm = -MAX_PWM;
00008c  4904              LDR      r1,|L4.160|
00008e  4288              CMP      r0,r1
000090  d900              BLS      |L4.148|
                  |L4.146|
000092  67a1              STR      r1,[r4,#0x78]  ; pwm
                  |L4.148|
;;;354    
;;;355    }	
000094  e8bd87f0          POP      {r4-r10,pc}
;;;356    
                          ENDP

                  |L4.152|
                          DCD      ||.data||+0x80
                  |L4.156|
                          DCD      0x44e0e000
                  |L4.160|
                          DCD      0xc4e0e000

                          AREA ||i.get_current||, CODE, READONLY, ALIGN=2

                  get_current PROC
;;;313    
;;;314    void get_current(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;315    {
;;;316    	current_stream[0]=-ADC_ConvertedValue[0]+ADC_offset[0];
000004  4d13              LDR      r5,|L5.84|
;;;317    	current_stream[1]=-ADC_ConvertedValue[1]+ADC_offset[1];
;;;318    
;;;319    	if (abs(current_stream[0])>abs(current_stream[1]))
;;;320    		motor_current=current_stream[0];
000006  4f12              LDR      r7,|L5.80|
000008  8828              LDRH     r0,[r5,#0]            ;316  ; ADC_ConvertedValue
00000a  f107044c          ADD      r4,r7,#0x4c           ;316
00000e  4240              RSBS     r0,r0,#0              ;316
000010  f7fffffe          BL       __aeabi_i2f
000014  f1a40608          SUB      r6,r4,#8              ;316
000018  6831              LDR      r1,[r6,#0]            ;316  ; ADC_offset
00001a  f7fffffe          BL       __aeabi_fadd
00001e  6020              STR      r0,[r4,#0]            ;317  ; current_stream
000020  8868              LDRH     r0,[r5,#2]            ;317  ; ADC_ConvertedValue
000022  4240              RSBS     r0,r0,#0              ;317
000024  f7fffffe          BL       __aeabi_i2f
000028  6871              LDR      r1,[r6,#4]            ;317  ; ADC_offset
00002a  f7fffffe          BL       __aeabi_fadd
00002e  6060              STR      r0,[r4,#4]            ;319  ; current_stream
000030  f7fffffe          BL       abs
000034  4605              MOV      r5,r0                 ;319
000036  6820              LDR      r0,[r4,#0]            ;319  ; current_stream
000038  f7fffffe          BL       abs
00003c  4629              MOV      r1,r5                 ;319
00003e  f7fffffe          BL       __aeabi_cfrcmple
000042  d201              BCS      |L5.72|
000044  6820              LDR      r0,[r4,#0]  ; current_stream
000046  e000              B        |L5.74|
                  |L5.72|
;;;321    	else
;;;322    		motor_current=current_stream[1];
000048  6860              LDR      r0,[r4,#4]  ; current_stream
                  |L5.74|
00004a  6378              STR      r0,[r7,#0x34]         ;320  ; motor_current
;;;323    /*
;;;324    	if (current_memory_index<9)
;;;325    		current_memory_index++;
;;;326    	else
;;;327    		current_memory_index=0;
;;;328    
;;;329    	current_memory_sum-=current_memory[current_memory_index];
;;;330    	current_memory[current_memory_index]=motor_current;
;;;331    	current_memory_sum+=current_memory[current_memory_index];
;;;332    */	
;;;333    }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;334    
                          ENDP

                  |L5.80|
                          DCD      ||.data||+0x80
                  |L5.84|
                          DCD      ADC_ConvertedValue

                          AREA ||i.increase_encoder||, CODE, READONLY, ALIGN=2

                  increase_encoder PROC
;;;562    // comm with main board for debugging
;;;563    void increase_encoder(void)
000000  b510              PUSH     {r4,lr}
;;;564    {
;;;565        abs_encoder+=(s32)(d_count);
000002  4c04              LDR      r4,|L6.20|
000004  6ee0              LDR      r0,[r4,#0x6c]  ; d_count
000006  f7fffffe          BL       __aeabi_f2iz
00000a  6e21              LDR      r1,[r4,#0x60]  ; abs_encoder
00000c  4408              ADD      r0,r0,r1
00000e  6620              STR      r0,[r4,#0x60]  ; abs_encoder
;;;566    }
000010  bd10              POP      {r4,pc}
;;;567    
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      ||.data||

                          AREA ||i.init_memory||, CODE, READONLY, ALIGN=2

                  init_memory PROC
;;;141    
;;;142    void init_memory(void)
000000  2000              MOVS     r0,#0
;;;143    {
;;;144    	int i=0;
;;;145    	for (i=0; i<MEMORY_SIZE; i++)
;;;146    	{
;;;147    		dcount_memory[i]=0;
000002  4904              LDR      r1,|L7.20|
000004  4602              MOV      r2,r0                 ;144
000006  bf00              NOP      
                  |L7.8|
000008  f8412020          STR      r2,[r1,r0,LSL #2]
00000c  1c40              ADDS     r0,r0,#1
00000e  2814              CMP      r0,#0x14              ;145
000010  dbfa              BLT      |L7.8|
;;;148    	}
;;;149    /*
;;;150    	for (i=0; i<10; i++)
;;;151    	{
;;;152    		current_memory[i]=0;
;;;153    	}
;;;154    */
;;;155    }
000012  4770              BX       lr
;;;156    
                          ENDP

                  |L7.20|
                          DCD      ||area_number.32||

                          AREA ||i.motor_lock||, CODE, READONLY, ALIGN=2

                  motor_lock PROC
;;;540    // function	called by user
;;;541    void motor_lock()
000000  4901              LDR      r1,|L8.8|
;;;542    {
;;;543        enable_bar=2;
000002  2002              MOVS     r0,#2
000004  7008              STRB     r0,[r1,#0]
;;;544    }
000006  4770              BX       lr
;;;545    
                          ENDP

                  |L8.8|
                          DCD      ||.data||

                          AREA ||i.motor_set_pwm||, CODE, READONLY, ALIGN=2

                  motor_set_pwm PROC
;;;517    // function	called by user
;;;518    void motor_set_pwm(float user_pwm)
000000  4905              LDR      r1,|L9.24|
;;;519    {
;;;520    	enable_bar=5;
000002  2205              MOVS     r2,#5
;;;521    
;;;522    	set_pwm=user_pwm;
;;;523    	set_dir = (user_pwm>=0)?1:0;
000004  f1104fff          CMN      r0,#0x7f800000
000008  700a              STRB     r2,[r1,#0]            ;520
00000a  67c8              STR      r0,[r1,#0x7c]  ; set_pwm
00000c  d201              BCS      |L9.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L9.20|
                  |L9.18|
000012  2000              MOVS     r0,#0
                  |L9.20|
000014  7088              STRB     r0,[r1,#2]
;;;524    }
000016  4770              BX       lr
;;;525    
                          ENDP

                  |L9.24|
                          DCD      ||.data||

                          AREA ||i.motor_set_pwm_current||, CODE, READONLY, ALIGN=2

                  motor_set_pwm_current PROC
;;;525    
;;;526    void motor_set_pwm_current(float user_pwm)
000000  4a03              LDR      r2,|L10.16|
;;;527    {
;;;528    	enable_bar=4;
000002  2104              MOVS     r1,#4
000004  7011              STRB     r1,[r2,#0]
;;;529    
;;;530    	pwm_current=user_pwm;
000006  f1020180          ADD      r1,r2,#0x80
00000a  6388              STR      r0,[r1,#0x38]  ; pwm_current
;;;531    }
00000c  4770              BX       lr
;;;532    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      ||.data||

                          AREA ||i.motor_set_speed||, CODE, READONLY, ALIGN=2

                  motor_set_speed PROC
;;;533    // function	called by user
;;;534    void motor_set_speed(float speed)
000000  4a03              LDR      r2,|L11.16|
;;;535    {
;;;536        enable_bar=1;
000002  2101              MOVS     r1,#1
000004  7011              STRB     r1,[r2,#0]
;;;537        user_speed=speed;
000006  f1020180          ADD      r1,r2,#0x80
00000a  6108              STR      r0,[r1,#0x10]  ; user_speed
;;;538    }
00000c  4770              BX       lr
;;;539    	
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      ||.data||

                          AREA ||i.motor_zero||, CODE, READONLY, ALIGN=2

                  motor_zero PROC
;;;546    // function	called by user
;;;547    void motor_zero()
000000  4901              LDR      r1,|L12.8|
;;;548    {
;;;549        enable_bar=0;
000002  2000              MOVS     r0,#0
000004  7008              STRB     r0,[r1,#0]
;;;550    }
000006  4770              BX       lr
;;;551    
                          ENDP

                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.read_encoder||, CODE, READONLY, ALIGN=2

                  read_encoder PROC
;;;157    // sub component
;;;158    void read_encoder(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;159    {
;;;160    	count = TIM_GetCounter(TIM2);
000004  f04f4780          MOV      r7,#0x40000000
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       TIM_GetCounter
00000e  f7fffffe          BL       __aeabi_ui2f
000012  4c28              LDR      r4,|L13.180|
;;;161    	if (count>62768)
000014  4928              LDR      r1,|L13.184|
;;;162    	{
;;;163    		s32 offset=count-30000;
000016  f8df80a4          LDR      r8,|L13.188|
;;;164    		count=offset;
;;;165    		TIM_SetCounter(TIM2, offset);
;;;166    		d_carrier++;
00001a  f04f567e          MOV      r6,#0x3f800000
00001e  6660              STR      r0,[r4,#0x64]         ;161  ; count
000020  4288              CMP      r0,r1                 ;161
000022  dd11              BLE      |L13.72|
000024  4641              MOV      r1,r8                 ;163
000026  f7fffffe          BL       __aeabi_fsub
00002a  f7fffffe          BL       __aeabi_f2iz
00002e  4605              MOV      r5,r0                 ;163
000030  f7fffffe          BL       __aeabi_i2f
000034  6660              STR      r0,[r4,#0x64]         ;165  ; count
000036  b2a9              UXTH     r1,r5                 ;165
000038  4638              MOV      r0,r7                 ;165
00003a  f7fffffe          BL       TIM_SetCounter
00003e  4631              MOV      r1,r6
000040  6f60              LDR      r0,[r4,#0x74]  ; d_carrier
000042  f7fffffe          BL       __aeabi_fadd
;;;167    	}
000046  e013              B        |L13.112|
                  |L13.72|
;;;168    	else if (count<2768)
000048  491d              LDR      r1,|L13.192|
00004a  4288              CMP      r0,r1
00004c  da11              BGE      |L13.114|
;;;169    	{
;;;170    		s32 offset=count+30000;
00004e  4641              MOV      r1,r8
000050  f7fffffe          BL       __aeabi_fadd
000054  f7fffffe          BL       __aeabi_f2iz
000058  4605              MOV      r5,r0
;;;171    		count=offset;
00005a  f7fffffe          BL       __aeabi_i2f
;;;172    		TIM_SetCounter(TIM2, offset);
00005e  6660              STR      r0,[r4,#0x64]  ; count
000060  b2a9              UXTH     r1,r5
000062  4638              MOV      r0,r7
000064  f7fffffe          BL       TIM_SetCounter
;;;173    		d_carrier--;
000068  4631              MOV      r1,r6
00006a  6f60              LDR      r0,[r4,#0x74]  ; d_carrier
00006c  f7fffffe          BL       __aeabi_fsub
                  |L13.112|
000070  6760              STR      r0,[r4,#0x74]  ; d_carrier
                  |L13.114|
;;;174    	}
;;;175    	
;;;176    	d_cal =	d_carrier*30000+count-32768;				
000072  4641              MOV      r1,r8
000074  6f60              LDR      r0,[r4,#0x74]  ; d_carrier
000076  f7fffffe          BL       __aeabi_fmul
00007a  6e61              LDR      r1,[r4,#0x64]  ; count
00007c  f7fffffe          BL       __aeabi_fadd
000080  f04f418e          MOV      r1,#0x47000000
000084  f7fffffe          BL       __aeabi_fsub
;;;177    	d_count = -d_cal + dcount_memory[memory_index];
000088  6720              STR      r0,[r4,#0x70]  ; d_cal
00008a  4f0e              LDR      r7,|L13.196|
00008c  88a5              LDRH     r5,[r4,#4]  ; memory_index
00008e  4606              MOV      r6,r0                 ;176
000090  4631              MOV      r1,r6
000092  f8570025          LDR      r0,[r7,r5,LSL #2]
000096  f7fffffe          BL       __aeabi_fsub
;;;178    
;;;179    	dcount_memory[memory_index]=d_cal;
00009a  66e0              STR      r0,[r4,#0x6c]  ; d_count
00009c  f8476025          STR      r6,[r7,r5,LSL #2]
;;;180    	
;;;181    	if (memory_index>MEMORY_SIZE-2)
0000a0  2d12              CMP      r5,#0x12
0000a2  d903              BLS      |L13.172|
;;;182    		memory_index=0;
0000a4  2000              MOVS     r0,#0
0000a6  80a0              STRH     r0,[r4,#4]
                  |L13.168|
;;;183    	else
;;;184    		memory_index++;
;;;185    }
0000a8  e8bd81f0          POP      {r4-r8,pc}
                  |L13.172|
0000ac  1c6d              ADDS     r5,r5,#1
0000ae  80a5              STRH     r5,[r4,#4]            ;184
0000b0  e7fa              B        |L13.168|
;;;186    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L13.180|
                          DCD      ||.data||
                  |L13.184|
                          DCD      0x47753000
                  |L13.188|
                          DCD      0x46ea6000
                  |L13.192|
                          DCD      0x452d0000
                  |L13.196|
                          DCD      ||area_number.32||

                          AREA ||i.set_acceleration||, CODE, READONLY, ALIGN=2

                  set_acceleration PROC
;;;556    
;;;557    void set_acceleration(u16 value)
000000  b510              PUSH     {r4,lr}
;;;558    {
;;;559    	increment=((float)(value))/1000;
000002  f7fffffe          BL       __aeabi_ui2f
000006  4903              LDR      r1,|L14.20|
000008  f7fffffe          BL       __aeabi_fdiv
00000c  4902              LDR      r1,|L14.24|
00000e  60c8              STR      r0,[r1,#0xc]  ; increment
;;;560    }
000010  bd10              POP      {r4,pc}
;;;561    
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x447a0000
                  |L14.24|
                          DCD      ||.data||+0x80

                          AREA ||i.set_pwm_to_motor||, CODE, READONLY, ALIGN=2

                  set_pwm_to_motor PROC
;;;265    //sub component
;;;266    void set_pwm_to_motor(void)
000000  4808              LDR      r0,|L15.36|
;;;267    {	
000002  b510              PUSH     {r4,lr}
;;;268        if (pwm>=0)
000004  4907              LDR      r1,|L15.36|
000006  6f80              LDR      r0,[r0,#0x78]  ; pwm
;;;269    	    motion_set_motor(pwm,dir);
000008  f9914001          LDRSB    r4,[r1,#1]
00000c  f1104fff          CMN      r0,#0x7f800000        ;268
000010  d301              BCC      |L15.22|
;;;270        else  
;;;271    	    motion_set_motor((-1)*pwm,dir);
000012  f0804000          EOR      r0,r0,#0x80000000
                  |L15.22|
000016  f7fffffe          BL       __aeabi_f2iz
00001a  b2e1              UXTB     r1,r4                 ;269
00001c  e8bd4010          POP      {r4,lr}               ;269
000020  f7ffbffe          B.W      motion_set_motor
;;;272    }
;;;273    
                          ENDP

                  |L15.36|
                          DCD      ||.data||

                          AREA ||i.vel_calculate_pwm||, CODE, READONLY, ALIGN=2

                  vel_calculate_pwm PROC
;;;233    float current_input=0;
;;;234    void vel_calculate_pwm(float p, float i, float d, u8 mode)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;235    {
;;;236    
;;;237    	cal_P = p * (err_curr - err_prev1);
000004  4c2b              LDR      r4,|L16.180|
000006  460d              MOV      r5,r1                 ;235
000008  4606              MOV      r6,r0                 ;235
00000a  6da1              LDR      r1,[r4,#0x58]  ; err_prev1
00000c  6d60              LDR      r0,[r4,#0x54]  ; err_curr
00000e  469a              MOV      r10,r3                ;235
000010  4693              MOV      r11,r2                ;235
000012  4689              MOV      r9,r1
000014  4680              MOV      r8,r0
000016  f7fffffe          BL       __aeabi_fsub
00001a  4631              MOV      r1,r6
00001c  f7fffffe          BL       __aeabi_fmul
000020  4607              MOV      r7,r0
;;;238    	cal_I = i * err_curr;
000022  6460              STR      r0,[r4,#0x44]  ; cal_P
000024  4641              MOV      r1,r8                 ;237
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       __aeabi_fmul
00002c  4606              MOV      r6,r0
;;;239    	cal_D = d * (err_curr + err_prev2 - 2*err_prev1);
00002e  64a0              STR      r0,[r4,#0x48]  ; cal_I
000030  2101              MOVS     r1,#1
000032  4648              MOV      r0,r9
000034  f7fffffe          BL       __ARM_scalbnf
000038  4605              MOV      r5,r0
00003a  4640              MOV      r0,r8
00003c  6de1              LDR      r1,[r4,#0x5c]  ; err_prev2
00003e  f7fffffe          BL       __aeabi_fadd
000042  4629              MOV      r1,r5
000044  f7fffffe          BL       __aeabi_fsub
000048  4659              MOV      r1,r11
00004a  f7fffffe          BL       __aeabi_fmul
00004e  64e0              STR      r0,[r4,#0x4c]  ; cal_D
000050  4605              MOV      r5,r0
000052  4631              MOV      r1,r6
000054  4638              MOV      r0,r7
000056  e9c48916          STRD     r8,r9,[r4,#0x58]
;;;240    
;;;241    	err_prev2 = err_prev1;
;;;242    	err_prev1 = err_curr;
;;;243    		
;;;244    	PID = cal_P + cal_I + cal_D;
00005a  f7fffffe          BL       __aeabi_fadd
00005e  4629              MOV      r1,r5
000060  f7fffffe          BL       __aeabi_fadd
000064  4601              MOV      r1,r0
;;;245    
;;;246    	if (mode==0)
000066  6520              STR      r0,[r4,#0x50]  ; PID
000068  f1ba0f00          CMP      r10,#0
00006c  d008              BEQ      |L16.128|
;;;247    	{
;;;248    		current_input += PID;
;;;249    	
;;;250    		if(current_input > MAX_CURRENT)	   current_input = MAX_CURRENT;
;;;251    		if(current_input < -MAX_CURRENT)   current_input = -MAX_CURRENT;
;;;252    	}
;;;253    	else
;;;254    	{
;;;255    		pwm = pwm + PID;
00006e  6fa0              LDR      r0,[r4,#0x78]  ; pwm
000070  f7fffffe          BL       __aeabi_fadd
;;;256    
;;;257    		dir = (pwm>0)?1:0;					  
000074  67a0              STR      r0,[r4,#0x78]  ; pwm
000076  f5b00f00          CMP      r0,#0x800000
00007a  db10              BLT      |L16.158|
00007c  2101              MOVS     r1,#1
00007e  e00f              B        |L16.160|
                  |L16.128|
000080  4c0c              LDR      r4,|L16.180|
000082  3480              ADDS     r4,r4,#0x80           ;248
000084  6960              LDR      r0,[r4,#0x14]         ;248  ; current_input
000086  f7fffffe          BL       __aeabi_fadd
00008a  490b              LDR      r1,|L16.184|
00008c  6160              STR      r0,[r4,#0x14]         ;250  ; current_input
00008e  4288              CMP      r0,r1                 ;250
000090  dc02              BGT      |L16.152|
000092  490a              LDR      r1,|L16.188|
000094  4288              CMP      r0,r1                 ;251
000096  d900              BLS      |L16.154|
                  |L16.152|
000098  6161              STR      r1,[r4,#0x14]         ;251  ; current_input
                  |L16.154|
;;;258    
;;;259    		if(pwm > MAX_PWM)	pwm = MAX_PWM;
;;;260    		if(pwm < -MAX_PWM)   pwm = -MAX_PWM;
;;;261    	}
;;;262    }
00009a  e8bd9ff0          POP      {r4-r12,pc}
                  |L16.158|
00009e  2100              MOVS     r1,#0                 ;257
                  |L16.160|
0000a0  7061              STRB     r1,[r4,#1]            ;257
0000a2  4907              LDR      r1,|L16.192|
0000a4  4288              CMP      r0,r1                 ;259
0000a6  dc02              BGT      |L16.174|
0000a8  4906              LDR      r1,|L16.196|
0000aa  4288              CMP      r0,r1                 ;260
0000ac  d9f5              BLS      |L16.154|
                  |L16.174|
0000ae  67a1              STR      r1,[r4,#0x78]         ;260  ; pwm
0000b0  e7f3              B        |L16.154|
;;;263    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L16.180|
                          DCD      ||.data||
                  |L16.184|
                          DCD      0x44898000
                  |L16.188|
                          DCD      0xc4898000
                  |L16.192|
                          DCD      0x44e0e000
                  |L16.196|
                          DCD      0xc4e0e000

                          AREA ||i.vel_err||, CODE, READONLY, ALIGN=2

                  vel_err PROC
;;;190    
;;;191    void vel_err(void)
000000  b570              PUSH     {r4-r6,lr}
;;;192    {
;;;193    	if (user_speed-r_count>increment)
000002  4d32              LDR      r5,|L17.204|
000004  f1a50480          SUB      r4,r5,#0x80
000008  6928              LDR      r0,[r5,#0x10]  ; user_speed
00000a  6ea1              LDR      r1,[r4,#0x68]  ; r_count
00000c  f7fffffe          BL       __aeabi_fsub
000010  68e9              LDR      r1,[r5,#0xc]  ; increment
000012  f7fffffe          BL       __aeabi_cfrcmple
000016  d204              BCS      |L17.34|
;;;194    		r_count+=increment;
000018  68e9              LDR      r1,[r5,#0xc]  ; increment
00001a  6ea0              LDR      r0,[r4,#0x68]  ; r_count
00001c  f7fffffe          BL       __aeabi_fadd
000020  e010              B        |L17.68|
                  |L17.34|
;;;195    	else if (user_speed-r_count<-increment)
000022  68e8              LDR      r0,[r5,#0xc]  ; increment
000024  6ea1              LDR      r1,[r4,#0x68]  ; r_count
000026  f0804600          EOR      r6,r0,#0x80000000
00002a  6928              LDR      r0,[r5,#0x10]  ; user_speed
00002c  f7fffffe          BL       __aeabi_fsub
000030  4631              MOV      r1,r6
000032  f7fffffe          BL       __aeabi_cfcmple
000036  d204              BCS      |L17.66|
;;;196    		r_count-=increment;
000038  68e9              LDR      r1,[r5,#0xc]  ; increment
00003a  6ea0              LDR      r0,[r4,#0x68]  ; r_count
00003c  f7fffffe          BL       __aeabi_fsub
000040  e000              B        |L17.68|
                  |L17.66|
;;;197    	else r_count=user_speed;
000042  6928              LDR      r0,[r5,#0x10]  ; user_speed
                  |L17.68|
;;;198    
;;;199        err_curr = r_count - d_count;		
000044  66a0              STR      r0,[r4,#0x68]  ; r_count
000046  4605              MOV      r5,r0
000048  6ee1              LDR      r1,[r4,#0x6c]  ; d_count
00004a  f7fffffe          BL       __aeabi_fsub
;;;200    
;;;201    if(cali_done){
00004e  6560              STR      r0,[r4,#0x54]  ; err_curr
000050  78e0              LDRB     r0,[r4,#3]  ; cali_done
000052  2800              CMP      r0,#0
000054  d038              BEQ      |L17.200|
;;;202    	if(r_count < 30 && r_count > -30){
000056  481e              LDR      r0,|L17.208|
000058  2100              MOVS     r1,#0
;;;203        kp1 = 15;
;;;204        kp2 = 15;
;;;205        ki1 = 0.45;
;;;206    		ki2 = 0.45;
;;;207    		kd1 = 30;
;;;208    		kd2 = 30;
;;;209    		ip = 2.1;
;;;210    		ii = 0.14;
;;;211    		id = 0;
;;;212    			GPIO_WriteBit(GPIOC,GPIO_Pin_0,1);
00005a  4e1e              LDR      r6,|L17.212|
00005c  4285              CMP      r5,r0                 ;202
00005e  da17              BGE      |L17.144|
000060  4a1d              LDR      r2,|L17.216|
000062  4295              CMP      r5,r2                 ;202
000064  d214              BCS      |L17.144|
000066  4a1d              LDR      r2,|L17.220|
000068  60a2              STR      r2,[r4,#8]            ;204  ; kp1
00006a  6162              STR      r2,[r4,#0x14]         ;205  ; kp2
00006c  4a1c              LDR      r2,|L17.224|
00006e  e9c42003          STRD     r2,r0,[r4,#0xc]       ;207
000072  e9c42006          STRD     r2,r0,[r4,#0x18]      ;207
000076  481b              LDR      r0,|L17.228|
000078  6220              STR      r0,[r4,#0x20]         ;210  ; ip
00007a  481b              LDR      r0,|L17.232|
00007c  e9c40109          STRD     r0,r1,[r4,#0x24]      ;210
000080  2201              MOVS     r2,#1
000082  4611              MOV      r1,r2
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       GPIO_WriteBit
;;;213    			GPIO_WriteBit(GPIOC,GPIO_Pin_1,0);
00008a  2200              MOVS     r2,#0
00008c  2102              MOVS     r1,#2
00008e  e016              B        |L17.190|
                  |L17.144|
;;;214    	}else{
;;;215    		kp1 = 8;
000090  f04f4082          MOV      r0,#0x41000000
;;;216        kp2 = 8;
000094  60a0              STR      r0,[r4,#8]  ; kp1
;;;217        ki1 = 0.08;
000096  6160              STR      r0,[r4,#0x14]  ; kp2
000098  4814              LDR      r0,|L17.236|
;;;218    		ki2 = 0.08;
00009a  60e0              STR      r0,[r4,#0xc]  ; ki1
;;;219    		kd1 = 32;
00009c  61a0              STR      r0,[r4,#0x18]  ; ki2
00009e  f04f4084          MOV      r0,#0x42000000
;;;220    		kd2 = 32;
0000a2  6120              STR      r0,[r4,#0x10]  ; kd1
;;;221    		ip = 3;
0000a4  61e0              STR      r0,[r4,#0x1c]  ; kd2
0000a6  4812              LDR      r0,|L17.240|
;;;222    		ii = 0.2;
0000a8  6220              STR      r0,[r4,#0x20]  ; ip
0000aa  4812              LDR      r0,|L17.244|
0000ac  e9c40109          STRD     r0,r1,[r4,#0x24]
;;;223    		id = 0;
;;;224    		GPIO_WriteBit(GPIOC,GPIO_Pin_1,1);
0000b0  2201              MOVS     r2,#1
0000b2  2102              MOVS     r1,#2
0000b4  4630              MOV      r0,r6
0000b6  f7fffffe          BL       GPIO_WriteBit
;;;225    		GPIO_WriteBit(GPIOC,GPIO_Pin_0,0);
0000ba  2200              MOVS     r2,#0
0000bc  2101              MOVS     r1,#1
                  |L17.190|
0000be  4630              MOV      r0,r6
0000c0  e8bd4070          POP      {r4-r6,lr}
0000c4  f7ffbffe          B.W      GPIO_WriteBit
                  |L17.200|
;;;226    	}	
;;;227    }	
;;;228    }
0000c8  bd70              POP      {r4-r6,pc}
;;;229    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L17.204|
                          DCD      ||.data||+0x80
                  |L17.208|
                          DCD      0x41f00000
                  |L17.212|
                          DCD      0x40011000
                  |L17.216|
                          DCD      0xc1f00000
                  |L17.220|
                          DCD      0x41700000
                  |L17.224|
                          DCD      0x3ee66666
                  |L17.228|
                          DCD      0x40066666
                  |L17.232|
                          DCD      0x3e0f5c29
                  |L17.236|
                          DCD      0x3da3d70a
                  |L17.240|
                          DCD      0x40400000
                  |L17.244|
                          DCD      0x3e4ccccd

                          AREA ||i.vel_get_speed||, CODE, READONLY, ALIGN=2

                  vel_get_speed PROC
;;;113    // command only	for debug
;;;114    float vel_get_speed(void)
000000  4801              LDR      r0,|L18.8|
;;;115    {
;;;116    	return d_count; 
000002  6ec0              LDR      r0,[r0,#0x6c]  ; d_count
;;;117    }
000004  4770              BX       lr
;;;118    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      ||.data||

                          AREA ||i.vel_init_pwm||, CODE, READONLY, ALIGN=2

                  vel_init_pwm PROC
;;;94     // command only	for debug
;;;95     void vel_init_pwm(float _pwm, s8 _dir)
000000  4a01              LDR      r2,|L19.8|
;;;96     {
;;;97      	pwm = _pwm;
;;;98     	dir = _dir;
000002  6790              STR      r0,[r2,#0x78]  ; pwm
000004  7051              STRB     r1,[r2,#1]
;;;99     }
000006  4770              BX       lr
;;;100    
                          ENDP

                  |L19.8|
                          DCD      ||.data||

                          AREA ||i.vel_move||, CODE, READONLY, ALIGN=2

                  vel_move PROC
;;;356    
;;;357    void vel_move(u8 mode)
000000  b570              PUSH     {r4-r6,lr}
;;;358    {
000002  4605              MOV      r5,r0
;;;359    	vel_err();
000004  f7fffffe          BL       vel_err
;;;360    
;;;361    	if (mode==0)
;;;362    	{
;;;363    
;;;364    	 	vel_calculate_pwm(kp1,ki1,kd1,0);
000008  4c0b              LDR      r4,|L20.56|
00000a  b13d              CBZ      r5,|L20.28|
;;;365    	
;;;366    	//	current_input=r_count;
;;;367    	
;;;368    		current_circle(ip,ii,id);
;;;369    	}
;;;370    	else
;;;371    	{
;;;372    		vel_calculate_pwm(kp11,ki11,kd11,1);
00000c  2301              MOVS     r3,#1
00000e  342c              ADDS     r4,r4,#0x2c
000010  e8940007          LDM      r4,{r0-r2}
000014  e8bd4070          POP      {r4-r6,lr}
000018  f7ffbffe          B.W      vel_calculate_pwm
                  |L20.28|
00001c  f1040008          ADD      r0,r4,#8              ;364
000020  2300              MOVS     r3,#0                 ;364
000022  c807              LDM      r0,{r0-r2}            ;364
000024  f7fffffe          BL       vel_calculate_pwm
000028  3420              ADDS     r4,r4,#0x20           ;364
00002a  e8940007          LDM      r4,{r0-r2}            ;364
00002e  e8bd4070          POP      {r4-r6,lr}            ;368
000032  f7ffbffe          B.W      current_circle
;;;373    	}
;;;374    
;;;375    }
;;;376    
                          ENDP

000036  0000              DCW      0x0000
                  |L20.56|
                          DCD      ||.data||

                          AREA ||i.vel_n_pos||, CODE, READONLY, ALIGN=2

                  vel_n_pos PROC
;;;464    // main function
;;;465    void vel_n_pos(void)
000000  b510              PUSH     {r4,lr}
;;;466    {
;;;467    
;;;468        read_encoder();
000002  f7fffffe          BL       read_encoder
;;;469    	get_current();
000006  f7fffffe          BL       get_current
;;;470    	if (cali_done)
00000a  481f              LDR      r0,|L21.136|
00000c  78c1              LDRB     r1,[r0,#3]  ; cali_done
;;;471    	{
;;;472    		if (enable_bar==0)  
;;;473    			vel_zero();
;;;474    	
;;;475    		else if(enable_bar==2)
;;;476    			vel_stop(0);
;;;477    		
;;;478    		else if(enable_bar==1) 
;;;479    			vel_move(0);
;;;480    		
;;;481    		else if(enable_bar==3)
;;;482    			pos_move(0);
;;;483    	
;;;484    		else if(enable_bar==4)
;;;485    			vel_pwm_current(0);
;;;486    
;;;487    		else if(enable_bar==5) 
;;;488    			vel_pwm();
;;;489    		
;;;490    	}
;;;491    	else 
;;;492    	{
;;;493    		if(enable_bar==6) 
00000e  7800              LDRB     r0,[r0,#0]  ; enable_bar
000010  b189              CBZ      r1,|L21.54|
000012  b308              CBZ      r0,|L21.88|
000014  2802              CMP      r0,#2                 ;475
000016  d006              BEQ      |L21.38|
000018  2801              CMP      r0,#1                 ;478
00001a  d006              BEQ      |L21.42|
00001c  2803              CMP      r0,#3                 ;481
00001e  d006              BEQ      |L21.46|
000020  2804              CMP      r0,#4                 ;484
000022  d006              BEQ      |L21.50|
000024  e012              B        |L21.76|
                  |L21.38|
000026  2000              MOVS     r0,#0                 ;476
000028  e01a              B        |L21.96|
                  |L21.42|
00002a  2000              MOVS     r0,#0                 ;479
00002c  e01b              B        |L21.102|
                  |L21.46|
00002e  2000              MOVS     r0,#0                 ;482
000030  e01d              B        |L21.110|
                  |L21.50|
000032  2000              MOVS     r0,#0                 ;485
000034  e01f              B        |L21.118|
                  |L21.54|
000036  2806              CMP      r0,#6
000038  d00b              BEQ      |L21.82|
;;;494    			ADC_calibration();
;;;495    
;;;496    		else if (enable_bar==0)  
00003a  b168              CBZ      r0,|L21.88|
;;;497    			vel_zero();
;;;498    	
;;;499    		else if(enable_bar==2)
00003c  2802              CMP      r0,#2
00003e  d00e              BEQ      |L21.94|
;;;500    			vel_stop(1);
;;;501    		
;;;502    		else if(enable_bar==1) 
000040  2801              CMP      r0,#1
000042  d010              BEQ      |L21.102|
;;;503    			vel_move(1);
;;;504    		
;;;505    		else if(enable_bar==3)
000044  2803              CMP      r0,#3
000046  d011              BEQ      |L21.108|
;;;506    			pos_move(1);
;;;507    	
;;;508    		else if(enable_bar==4)
000048  2804              CMP      r0,#4
00004a  d013              BEQ      |L21.116|
                  |L21.76|
;;;509    			vel_pwm_current(1);
;;;510    
;;;511    		else if(enable_bar==5) 
00004c  2805              CMP      r0,#5
00004e  d015              BEQ      |L21.124|
000050  e016              B        |L21.128|
                  |L21.82|
000052  f7fffffe          BL       ADC_calibration
000056  e013              B        |L21.128|
                  |L21.88|
000058  f7fffffe          BL       vel_zero
00005c  e010              B        |L21.128|
                  |L21.94|
00005e  2001              MOVS     r0,#1                 ;500
                  |L21.96|
000060  f7fffffe          BL       vel_stop
000064  e00c              B        |L21.128|
                  |L21.102|
000066  f7fffffe          BL       vel_move
00006a  e009              B        |L21.128|
                  |L21.108|
00006c  2001              MOVS     r0,#1                 ;506
                  |L21.110|
00006e  f7fffffe          BL       pos_move
000072  e005              B        |L21.128|
                  |L21.116|
000074  2001              MOVS     r0,#1                 ;509
                  |L21.118|
000076  f7fffffe          BL       vel_pwm_current
00007a  e001              B        |L21.128|
                  |L21.124|
;;;512    			vel_pwm();
00007c  f7fffffe          BL       vel_pwm
                  |L21.128|
;;;513    	}
;;;514    	set_pwm_to_motor();	   
000080  e8bd4010          POP      {r4,lr}
000084  f7ffbffe          B.W      set_pwm_to_motor
;;;515    }
;;;516    
                          ENDP

                  |L21.136|
                          DCD      ||.data||

                          AREA ||i.vel_pwm||, CODE, READONLY, ALIGN=2

                  vel_pwm PROC
;;;404    //sub function
;;;405    void vel_pwm(void)
000000  4802              LDR      r0,|L22.12|
;;;406    {
;;;407    	pwm=set_pwm;
000002  6fc1              LDR      r1,[r0,#0x7c]  ; set_pwm
;;;408    	dir=set_dir;
000004  6781              STR      r1,[r0,#0x78]  ; pwm
000006  7881              LDRB     r1,[r0,#2]  ; set_dir
000008  7041              STRB     r1,[r0,#1]
;;;409    
;;;410    }
00000a  4770              BX       lr
;;;411    
                          ENDP

                  |L22.12|
                          DCD      ||.data||

                          AREA ||i.vel_pwm_current||, CODE, READONLY, ALIGN=2

                  vel_pwm_current PROC
;;;416    float r_cur=0;
;;;417    void vel_pwm_current(u8 mode)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;418    {
;;;419    	if (mode==0)
;;;420    	{
;;;421    		if (pwm_current==0)
000004  4c35              LDR      r4,|L23.220|
;;;422    			pwm=0;
000006  f1a40580          SUB      r5,r4,#0x80
00000a  6ba6              LDR      r6,[r4,#0x38]         ;418
00000c  b110              CBZ      r0,|L23.20|
;;;423    		else
;;;424    		{
;;;425    			if (pwm_current>0)
;;;426    				r_cur=max_current;
;;;427    			else
;;;428    				r_cur=-max_current;
;;;429    	
;;;430    		    I_err_curr=r_cur-motor_current;
;;;431    		
;;;432    		    I_cal_P = ip * (I_err_curr - I_err_prev1);
;;;433    			I_cal_I = ii * I_err_curr;
;;;434    			I_cal_D = id * (I_err_curr + I_err_prev2 - 2*I_err_prev1);
;;;435    		
;;;436    			I_err_prev2 = I_err_prev1;
;;;437    			I_err_prev1 = I_err_curr;
;;;438    				
;;;439    			I_PID = I_cal_P + I_cal_I + I_cal_D;
;;;440    		
;;;441    			pwm = pwm + I_PID;
;;;442    		
;;;443    			dir = (pwm>0)?1:0;
;;;444    			if (pwm_current>0)
;;;445    			{
;;;446    				if(pwm >pwm_current)	pwm = pwm_current;
;;;447    				if(pwm > MAX_PWM)	pwm = MAX_PWM;
;;;448    				if(pwm < -MAX_PWM)   pwm = -MAX_PWM;
;;;449    			}
;;;450    			else 
;;;451    			{
;;;452    				if(pwm < pwm_current)   pwm = pwm_current;
;;;453    				if(pwm > MAX_PWM)	pwm = MAX_PWM;
;;;454    				if(pwm < -MAX_PWM)   pwm = -MAX_PWM;
;;;455    			}
;;;456    		}
;;;457    	}
;;;458    	else
;;;459    	{
;;;460    		pwm=pwm_current;
00000e  67ae              STR      r6,[r5,#0x78]  ; pwm
                  |L23.16|
;;;461    	}
;;;462    }
000010  e8bd8ff8          POP      {r3-r11,pc}
                  |L23.20|
000014  f0164fff          TST      r6,#0x7f800000        ;421
000018  d040              BEQ      |L23.156|
00001a  f44f0b00          MOV      r11,#0x800000         ;425
00001e  6be0              LDR      r0,[r4,#0x3c]         ;425  ; max_current
000020  455e              CMP      r6,r11                ;425
000022  da01              BGE      |L23.40|
000024  f0804000          EOR      r0,r0,#0x80000000     ;428
                  |L23.40|
000028  6420              STR      r0,[r4,#0x40]         ;430  ; r_cur
00002a  6b61              LDR      r1,[r4,#0x34]         ;430  ; motor_current
00002c  f7fffffe          BL       __aeabi_fsub
000030  62a0              STR      r0,[r4,#0x28]         ;432  ; I_err_curr
000032  6ae1              LDR      r1,[r4,#0x2c]         ;432  ; I_err_prev1
000034  4607              MOV      r7,r0                 ;430
000036  9100              STR      r1,[sp,#0]            ;432
000038  f7fffffe          BL       __aeabi_fsub
00003c  6a29              LDR      r1,[r5,#0x20]         ;432  ; ip
00003e  f7fffffe          BL       __aeabi_fmul
000042  4682              MOV      r10,r0                ;432
000044  61a0              STR      r0,[r4,#0x18]         ;433  ; I_cal_P
000046  4639              MOV      r1,r7                 ;432
000048  6a68              LDR      r0,[r5,#0x24]         ;433  ; ii
00004a  f7fffffe          BL       __aeabi_fmul
00004e  4681              MOV      r9,r0                 ;433
000050  61e0              STR      r0,[r4,#0x1c]         ;434  ; I_cal_I
000052  2101              MOVS     r1,#1                 ;434
000054  9800              LDR      r0,[sp,#0]            ;434
000056  f7fffffe          BL       __ARM_scalbnf
00005a  4680              MOV      r8,r0                 ;434
00005c  4638              MOV      r0,r7                 ;434
00005e  6b21              LDR      r1,[r4,#0x30]         ;434  ; I_err_prev2
000060  f7fffffe          BL       __aeabi_fadd
000064  4641              MOV      r1,r8                 ;434
000066  f7fffffe          BL       __aeabi_fsub
00006a  6aa9              LDR      r1,[r5,#0x28]         ;434  ; id
00006c  f7fffffe          BL       __aeabi_fmul
000070  4680              MOV      r8,r0                 ;434
000072  6220              STR      r0,[r4,#0x20]         ;434  ; I_cal_D
000074  9800              LDR      r0,[sp,#0]            ;434
000076  4649              MOV      r1,r9                 ;434
000078  e9c4700b          STRD     r7,r0,[r4,#0x2c]      ;434
00007c  4650              MOV      r0,r10                ;434
00007e  f7fffffe          BL       __aeabi_fadd
000082  4641              MOV      r1,r8                 ;439
000084  f7fffffe          BL       __aeabi_fadd
000088  4601              MOV      r1,r0                 ;439
00008a  6260              STR      r0,[r4,#0x24]         ;441  ; I_PID
00008c  6fa8              LDR      r0,[r5,#0x78]         ;441  ; pwm
00008e  f7fffffe          BL       __aeabi_fadd
000092  67a8              STR      r0,[r5,#0x78]         ;443  ; pwm
000094  4558              CMP      r0,r11                ;443
000096  db04              BLT      |L23.162|
000098  2201              MOVS     r2,#1                 ;443
00009a  e003              B        |L23.164|
                  |L23.156|
00009c  2000              MOVS     r0,#0                 ;422
00009e  67a8              STR      r0,[r5,#0x78]         ;422  ; pwm
0000a0  e7b6              B        |L23.16|
                  |L23.162|
0000a2  2200              MOVS     r2,#0                 ;443
                  |L23.164|
0000a4  4f0e              LDR      r7,|L23.224|
0000a6  f8df803c          LDR      r8,|L23.228|
0000aa  706a              STRB     r2,[r5,#1]            ;443
0000ac  455e              CMP      r6,r11                ;444
0000ae  4631              MOV      r1,r6                 ;444
0000b0  db0f              BLT      |L23.210|
0000b2  f7fffffe          BL       __aeabi_cfrcmple
0000b6  d301              BCC      |L23.188|
                  |L23.184|
0000b8  6fa8              LDR      r0,[r5,#0x78]         ;446  ; pwm
0000ba  e001              B        |L23.192|
                  |L23.188|
0000bc  6ba0              LDR      r0,[r4,#0x38]         ;446  ; pwm_current
0000be  67a8              STR      r0,[r5,#0x78]         ;446  ; pwm
                  |L23.192|
0000c0  42b8              CMP      r0,r7                 ;453
0000c2  dd01              BLE      |L23.200|
0000c4  67af              STR      r7,[r5,#0x78]         ;447  ; pwm
0000c6  e7a3              B        |L23.16|
                  |L23.200|
0000c8  4540              CMP      r0,r8                 ;448
0000ca  d9a1              BLS      |L23.16|
0000cc  f8c58078          STR      r8,[r5,#0x78]         ;448  ; pwm
0000d0  e79e              B        |L23.16|
                  |L23.210|
0000d2  f7fffffe          BL       __aeabi_cfcmple
0000d6  d3f1              BCC      |L23.188|
0000d8  e7ee              B        |L23.184|
;;;463    
                          ENDP

0000da  0000              DCW      0x0000
                  |L23.220|
                          DCD      ||.data||+0x80
                  |L23.224|
                          DCD      0x44e0e000
                  |L23.228|
                          DCD      0xc4e0e000

                          AREA ||i.vel_set_max||, CODE, READONLY, ALIGN=2

                  vel_set_max PROC
;;;101    // command only	for debug
;;;102    void vel_set_max(float m)
000000  4901              LDR      r1,|L24.8|
;;;103    {
;;;104     	max_pwm = m;
000002  6008              STR      r0,[r1,#0]  ; max_pwm
;;;105    }
000004  4770              BX       lr
;;;106    
                          ENDP

000006  0000              DCW      0x0000
                  |L24.8|
                          DCD      max_pwm

                          AREA ||i.vel_set_pid1||, CODE, READONLY, ALIGN=2

                  vel_set_pid1 PROC
;;;78     // command only for debug
;;;79     void vel_set_pid1(float _p, float _i, float _d)
000000  4b01              LDR      r3,|L25.8|
;;;80     {
;;;81     	kp1 = _p;
000002  e8830007          STM      r3,{r0-r2}
;;;82     	ki1 = _i;
;;;83     	kd1 = _d;	
;;;84     }	
000006  4770              BX       lr
;;;85     
                          ENDP

                  |L25.8|
                          DCD      ||.data||+0x8

                          AREA ||i.vel_set_pid2||, CODE, READONLY, ALIGN=2

                  vel_set_pid2 PROC
;;;86     // command only	for debug
;;;87     void vel_set_pid2(float _p, float _i, float _d)
000000  4b01              LDR      r3,|L26.8|
;;;88     {
;;;89     	kp2 = _p;
000002  e8830007          STM      r3,{r0-r2}
;;;90     	ki2 = _i;
;;;91     	kd2 = _d;	
;;;92     }	
000006  4770              BX       lr
;;;93     
                          ENDP

                  |L26.8|
                          DCD      ||.data||+0x14

                          AREA ||i.vel_set_speed||, CODE, READONLY, ALIGN=2

                  vel_set_speed PROC
;;;107    // command only	for debug
;;;108    void vel_set_speed(float r)
000000  4901              LDR      r1,|L27.8|
;;;109    {
;;;110    	r_count = r;
000002  6688              STR      r0,[r1,#0x68]  ; r_count
;;;111    }
000004  4770              BX       lr
;;;112    
                          ENDP

000006  0000              DCW      0x0000
                  |L27.8|
                          DCD      ||.data||

                          AREA ||i.vel_stop||, CODE, READONLY, ALIGN=2

                  vel_stop PROC
;;;377    //sub function
;;;378    void vel_stop(u8 mode)
000000  b570              PUSH     {r4-r6,lr}
;;;379    {  
;;;380    	r_count=0;
000002  4c0e              LDR      r4,|L28.60|
000004  4605              MOV      r5,r0                 ;379
000006  2000              MOVS     r0,#0
;;;381    
;;;382    	vel_err();
000008  66a0              STR      r0,[r4,#0x68]  ; r_count
00000a  f7fffffe          BL       vel_err
;;;383    
;;;384    	if (mode==0)
00000e  b13d              CBZ      r5,|L28.32|
;;;385    	{
;;;386    		vel_calculate_pwm(kp2,ki2,kd2,0);
;;;387    	
;;;388    		current_circle(ip,ii,id);
;;;389    	}
;;;390    	else
;;;391    	{
;;;392    		vel_calculate_pwm(kp21,ki21,kd21,1);
000010  2301              MOVS     r3,#1
000012  3438              ADDS     r4,r4,#0x38
000014  e8940007          LDM      r4,{r0-r2}
000018  e8bd4070          POP      {r4-r6,lr}
00001c  f7ffbffe          B.W      vel_calculate_pwm
                  |L28.32|
000020  3414              ADDS     r4,r4,#0x14           ;386
000022  2300              MOVS     r3,#0                 ;386
000024  e8940007          LDM      r4,{r0-r2}            ;386
000028  3c14              SUBS     r4,r4,#0x14           ;386
00002a  f7fffffe          BL       vel_calculate_pwm
00002e  3420              ADDS     r4,r4,#0x20           ;386
000030  e8940007          LDM      r4,{r0-r2}            ;386
000034  e8bd4070          POP      {r4-r6,lr}            ;388
000038  f7ffbffe          B.W      current_circle
;;;393    	}
;;;394    } 
;;;395    
                          ENDP

                  |L28.60|
                          DCD      ||.data||

                          AREA ||i.vel_zero||, CODE, READONLY, ALIGN=2

                  vel_zero PROC
;;;398    //sub function
;;;399    void vel_zero(void)
000000  4802              LDR      r0,|L29.12|
;;;400    {
;;;401    	pwm=0;
000002  2100              MOVS     r1,#0
;;;402    	dir=0;
000004  6781              STR      r1,[r0,#0x78]  ; pwm
000006  7041              STRB     r1,[r0,#1]
;;;403    }
000008  4770              BX       lr
;;;404    //sub function
                          ENDP

00000a  0000              DCW      0x0000
                  |L29.12|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  histogram
                          %        28

                          AREA ||area_number.32||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.bss||
                  dcount_memory
                          %        80

                          AREA ||.data||, DATA, ALIGN=2

                  enable_bar
000000  00                DCB      0x00
                  ||dir||
000001  00                DCB      0x00
                  set_dir
000002  00                DCB      0x00
                  cali_done
000003  00                DCB      0x00
                  memory_index
000004  0000              DCW      0x0000
                  tim_counter
000006  0000              DCW      0x0000
                  kp1
000008  41700000          DCFS     0x41700000 ; 15
                  ki1
00000c  3ee66666          DCFS     0x3ee66666 ; 0.44999998807907104
                  kd1
000010  41f00000          DCFS     0x41f00000 ; 30
                  kp2
000014  41700000          DCFS     0x41700000 ; 15
                  ki2
000018  3ee66666          DCFS     0x3ee66666 ; 0.44999998807907104
                  kd2
00001c  41f00000          DCFS     0x41f00000 ; 30
                  ||ip||
000020  40066666          DCFS     0x40066666 ; 2.0999999046325684
                  ||ii||
000024  3e0f5c29          DCFS     0x3e0f5c29 ; 0.14000000059604645
                  ||id||
000028  00000000          DCFS     0x00000000 ; 0
                  kp11
00002c  41800000          DCFS     0x41800000 ; 16
                  ki11
000030  3e99999a          DCFS     0x3e99999a ; 0.30000001192092896
                  kd11
000034  42f00000          DCFS     0x42f00000 ; 120
                  kp21
000038  41800000          DCFS     0x41800000 ; 16
                  ki21
00003c  3e99999a          DCFS     0x3e99999a ; 0.30000001192092896
                  kd21
000040  42f00000          DCFS     0x42f00000 ; 120
                  cal_P
000044  00000000          DCFS     0x00000000 ; 0
                  cal_I
000048  00000000          DCFS     0x00000000 ; 0
                  cal_D
00004c  00000000          DCFS     0x00000000 ; 0
                  PID
000050  00000000          DCFS     0x00000000 ; 0
                  err_curr
000054  00000000          DCFS     0x00000000 ; 0
                  err_prev1
000058  00000000          DCFS     0x00000000 ; 0
                  err_prev2
00005c  00000000          DCFS     0x00000000 ; 0
                  abs_encoder
                          DCD      0x00000000
                  count
000064  00000000          DCFS     0x00000000 ; 0
                  r_count
000068  00000000          DCFS     0x00000000 ; 0
                  d_count
00006c  00000000          DCFS     0x00000000 ; 0
                  d_cal
000070  00000000          DCFS     0x00000000 ; 0
                  d_carrier
000074  00000000          DCFS     0x00000000 ; 0
                  pwm
000078  00000000          DCFS     0x00000000 ; 0
                  set_pwm
00007c  00000000          DCFS     0x00000000 ; 0
                  err_curr_pos
000080  00000000          DCFS     0x00000000 ; 0
                  err_prev1_pos
000084  00000000          DCFS     0x00000000 ; 0
                  err_prev2_pos
000088  00000000          DCFS     0x00000000 ; 0
                  increment
00008c  3f000000          DCFS     0x3f000000 ; 0.5
                  user_speed
000090  00000000          DCFS     0x00000000 ; 0
                  current_input
000094  00000000          DCFS     0x00000000 ; 0
                  I_cal_P
000098  00000000          DCFS     0x00000000 ; 0
                  I_cal_I
00009c  00000000          DCFS     0x00000000 ; 0
                  I_cal_D
0000a0  00000000          DCFS     0x00000000 ; 0
                  I_PID
0000a4  00000000          DCFS     0x00000000 ; 0
                  I_err_curr
0000a8  00000000          DCFS     0x00000000 ; 0
                  I_err_prev1
0000ac  00000000          DCFS     0x00000000 ; 0
                  I_err_prev2
0000b0  00000000          DCFS     0x00000000 ; 0
                  motor_current
0000b4  00000000          DCFS     0x00000000 ; 0
                  pwm_current
0000b8  00000000          DCFS     0x00000000 ; 0
                  max_current
0000bc  447a0000          DCFS     0x447a0000 ; 1000
                  r_cur
0000c0  00000000          DCFS     0x00000000 ; 0
                  ADC_offset
                          %        8
                  current_stream
                          %        8

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  enable_bar_memory
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  err_total
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.37||, DATA, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.data||
                  r_count_prev
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.38||, DATA, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.data||
                  d_count_prev
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.39||, DATA, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.data||
                  pwm_init
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  vel_reach
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  counter_memory
000000  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  counter_index
000000  0000              DCW      0x0000

                          AREA ||area_number.43||, DATA, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.data||
                  pos_init
000000  00000000          DCFS     0x00000000 ; 0
