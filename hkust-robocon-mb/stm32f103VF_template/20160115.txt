#include "main.h"
#include <stdlib.h>

#define MAXVEL 140

int _x;
int _y;
int _angle;

int M1;
int M2;
int M3;
int dir;
int target_direction=0;
int dist=0;

int start_x;
int start_y;

int target_x;
int target_y;
int target_angle;

int dist_e;
int angle_e;
int min;

int W;
int M;

float err=1;

void _updateScreen();
void _updateStatus();
void _move(float magnitude, float bearing, float W);
void _setTarget(int x, int y, int angle, int d_e, int a_e, int min_magnitude);
int _getX();
int _getY();
void _delay();
int _angleDiff(int o, int t);
int _bearing(int x1, int y1, int x2, int y2);

int _vector(int m1, int a1, int m2, int a2);
void _straight(int x, int y, int angle, int d_e, int a_e);
void _curve(int x1, int y1, int x2, int y2);

int main()
{
	tft_init(2, BLACK, WHITE, RED);
	ticks_init();
	gyro_init();
	can_init();
	can_rx_init();
	can_motor_init();
	_delay();
	_setTarget(0, 500, 0, 20, 5, 0);
	while (1)
	{
		_updateStatus();
		_updateScreen();
		/*
		motor_set_vel(MOTOR1, 0, CLOSE_LOOP);
		motor_set_vel(MOTOR2, 0, CLOSE_LOOP);
		motor_set_vel(MOTOR3, 0, CLOSE_LOOP);
		*/
		_straight(0, 500, 0, 20, 5);
	}
}

void _updateScreen()
{
	tft_clear();
	tft_prints(0, 0, "X=%d Y=%d", _getX(), _getY());
	tft_prints(0, 1, "Angle: %d", get_angle());
	tft_prints(0, 3, "_m(%d, %d, %d)", M, dir, W);
	tft_prints(0, 4, "M: %d %d %d", M1, M2, M3);
	tft_prints(0, 5, "err: %.2f", err); 
	tft_prints(0, 6, "T: %d %d %d", target_x, target_y, target_angle);
	tft_prints(0, 7, "t_dir: %d", target_direction);
	tft_prints(0, 8, "dis: %d", dist);
	tft_prints(0, 9, "timer: %d", get_ticks());
	tft_update();
}

void _setTarget(int x, int y, int angle, int d_e, int a_e, int min_magnitude)
{
	start_x=_getX();
	start_y=_getY();
	target_x=x;
	target_y=y;
	target_angle=angle;
	dist_e=d_e;
	angle_e=a_e;
	min=min_magnitude;
}

void _updateStatus()
{
	dist=Sqrt(Sqr(target_y-_getY())+Sqr(target_x-_getX()));
	target_direction = ((90-(int_arc_tan2(target_y - _getY(), target_x - _getX()))) - get_angle()/10) %360;
	target_direction = target_direction < 0 ? target_direction + 360 : target_direction;
}

void _move(float magnitude, float bearing, float W)
{
	float _M1;
	float _M2;
	float _M3;
	float X;
	float Y;
	X=magnitude*int_sin(bearing)*MAXVEL/100/10000;
	Y=magnitude*int_cos(bearing)*MAXVEL/100/10000;
	_M1=(-W-X*2)/3;
	_M2=(-W*Sqrt(3)/3+X*Sqrt(3)/3-Y)/Sqrt(3);
	_M3=-W-M1-M2;
	if ((magnitude!=0 || W!=0) && _x==_getX() && _y==_getY() && _angle==get_angle())
	{
		if (_M1*(err+0.03f)<=140 && _M2*(err+0.03f)<=140 && _M3*(err+0.03f)<=140)
		{
			err=err+0.03f;
		}
	}
	else
	{
		err=err-0.13f;
		if (err<1)
		{
			err=1;
		}
	}
	M1=_M1*err;
	M2=_M2*err;
	M3=_M3*err;
	//motor control
	motor_set_vel(MOTOR1, M1, CLOSE_LOOP);
	motor_set_vel(MOTOR2, M2, CLOSE_LOOP);
	motor_set_vel(MOTOR3, M3, CLOSE_LOOP);
	_x=_getX();
	_y=_getY();
	_angle=get_angle();
}

int _getX()
{
	//return get_pos()->x;
	return -get_pos()->y;
}

int _getY()
{
	//return get_pos()->y;
	return get_pos()->x;
}

void _delay()
{
	int start=get_seconds();
	while (get_seconds()-start!=5)
	{
		_updateScreen();
	}
}

int _angleDiff(int o, int t)
{
	int a=t-o;
	if (0>a && Abs(a)>180)
	{
		a=a+360;
	}
	return a;
}

int _bearing(int x1, int y1, int x2, int y2)
{
	int dir;
	dir = ((90-(int_arc_tan2(y2 - y1, x2 - x1)))) %360;
	dir = dir < 0 ? dir + 360 : dir;
	return dir;
}

int _vector(int m1, int a1, int m2, int a2)
{
	return _bearing(0, 0, m1*int_sin(a1*10)+m2*int_sin(a2*10), m1*int_cos(a1*10)+m2*int_cos(a2*10));
}

void _straight(int x, int y, int angle, int d_e, int a_e)
{
	int a;
	int b;
	int c;
	int D;
	int a1;
	a=y-start_y;
	b=start_x-x;
	c=-start_x*a-b*start_y;
	D=(a*_getX()+b*_getY()+c)/Sqrt(a*a+b*b);
	float px=x-start_x;
	float py=y-start_y;
	float dab=px*px+py*py;
	float u=((_getX()-start_x)*px+(_getY()-start_y)*py)/dab;
	float _x=start_x+u*px;
	float _y=start_y+u*py;
	if (dist/20>100)
	{
		M=100;
	}
	else
	{
		M=dist/20;
	}
	if (dist>d_e && M==0)
	{
		M=1;
	}
	if (dist>50)
	{
		dir=_vector(dist, target_direction, D, _bearing(_getX(), _getY(), _x, _y));
	}
	else
	{
		dir=_bearing(_getX(), _getY(), _x, _y);
	}
	W=_angleDiff(get_angle()/10, target_angle)*100/360;
	if (_angleDiff(get_angle()/10, target_angle)>a_e && W==0)
	{
		W=1;
	}
	if (_angleDiff(get_angle()/10, target_angle)<-a_e && W==0)
	{
		W=-1;
	}
	_move(M, dir, W);
}

void _curve(int x1, int y1, int x2, int y2)
{
	int x0;
	int y0;
	x0=_getX();
	y0=_getY();
	for (int t=0; t<10; t++)
	{
		int x;
		int y;
		x=(10-t)*(10-t)*x0/100+2*(10-t)*t*x1/100+t*t*x2/100;
		y=(10-t)*(10-t)*y0/100+2*(10-t)*t*y1/100+t*t*y2/100;
		_straight(x, y, 0, 100, 360);
	}
	_straight(x2, y2, 0, 200, 360);
}

